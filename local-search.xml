<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>05.认识方法和其使用</title>
    <link href="/waterbottle/posts/5b91/"/>
    <url>/waterbottle/posts/5b91/</url>
    
    <content type="html"><![CDATA[<p>认识Java的方法，了解其构成，学会方法的构建和使用。</p><span id="more"></span><h2 id="一-java-方法的核心概念"><a class="markdownIt-Anchor" href="#一-java-方法的核心概念"></a> 一、Java 方法的核心概念</h2><blockquote><p>方法是Java里的基石，是Java里最核心的编程概念，Java的一个类是由很多个方法组成，很多个类组成一套处理数据的逻辑关系，很多个逻辑关系最终组成一个完整的Java程序。</p></blockquote><p>Java 方法本质上是类中一段具有特定功能的代码集合，<strong>是完成特定功能的代码块</strong>。相当于一个&quot;黑盒子&quot;，就像家里的咖啡机，接收不同的 “咖啡豆”（参数），经过一系列加工，产出对应的 “咖啡”（返回值）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类比现实：咖啡机就是个&quot;方法&quot;</span><br><span class="hljs-keyword">public</span> Coffee <span class="hljs-title function_">makeCoffee</span><span class="hljs-params">(CoffeeBean bean, <span class="hljs-type">int</span> waterML)</span> &#123;<br>    <span class="hljs-comment">// 内部实现细节被封装...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>();   <span class="hljs-comment">// 返回一杯做好的咖啡</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再比如，在一个学生成绩管理系统中，计算学生平均分、查找最高分学生等功能，都可以封装成不同的方法。</p><p>✅ 方法的<strong>核心价值</strong>：</p><ol><li><strong>代码复用</strong> - 避免重复代码</li><li><strong>模块化</strong> - 分解复杂问题</li><li><strong>可读性</strong> - 通过方法名理解功能</li><li><strong>易维护</strong> - 修改只需调整一处</li><li>合理使用方法，能让代码结构清晰，避免重复劳动，提高开发效率。</li></ol><h2 id="二-java-方法的构成要素详解"><a class="markdownIt-Anchor" href="#二-java-方法的构成要素详解"></a> 二、Java 方法的构成要素详解</h2><p>一个完整的 Java 方法由多个部分组成，每个部分都有其独特的作用，下面我们逐一深入分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方法的构成主要由下面部分组成</span><br>[访问修饰符] [<span class="hljs-keyword">static</span>/<span class="hljs-keyword">final</span>] 返回类型 方法名(参数列表) [<span class="hljs-keyword">throws</span> 异常] &#123;<br>    <span class="hljs-comment">// 方法体</span><br>    <span class="hljs-keyword">return</span> 返回值; <span class="hljs-comment">// void方法可省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-访问修饰符方法的-权限与属性标签"><a class="markdownIt-Anchor" href="#1-访问修饰符方法的-权限与属性标签"></a> 1、访问修饰符：方法的 “权限与属性标签”</h3><blockquote><p>修饰符决定了方法的访问权限和特性。<br />表格如下</p></blockquote><table><thead><tr><th>修饰符</th><th>作用域</th><th>常见场景</th></tr></thead><tbody><tr><td><code>public</code></td><td>所有类可见</td><td>工具类方法</td></tr><tr><td><code>protected</code></td><td>同包+子类可见</td><td>父类扩展方法</td></tr><tr><td><code>默认</code></td><td>同包可见</td><td>内部工具方法</td></tr><tr><td><code>private</code></td><td>仅当前类可见</td><td>辅助方法/封装细节</td></tr></tbody></table><h4 id="public"><a class="markdownIt-Anchor" href="#public"></a> public</h4><blockquote><p><code>public</code> 修饰符表示方法是公共的，就像公共场所，任何类都可以访问这个方法。比如在一个工具类中，用于数据加密的encryptData方法，希望其他类都能使用，就可以用public修饰。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utility</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encryptData</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-comment">// 加密逻辑</span><br>        <span class="hljs-keyword">return</span> encryptedData;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="private"><a class="markdownIt-Anchor" href="#private"></a> private</h4><blockquote><p><code>private</code> 修饰符意味着方法是私有的，如同私人房间，只有在本类中才能访问。当一个方法只是辅助本类其他方法完成功能，不希望被外部调用时，就可以使用private。</p></blockquote><p>例如在一个用户类中，用于校验密码格式的validatePasswordFormat方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validatePasswordFormat</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-comment">// 密码格式校验逻辑</span><br>        <span class="hljs-keyword">return</span> isValid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="static"><a class="markdownIt-Anchor" href="#static"></a> static</h4><blockquote><p><code>static</code> 修饰符表示静态方法，静态方法可以直接通过类名调用，无需创建类的实例。</p></blockquote><blockquote><p>静态方法可以访问静态成员变量和静态方法，但不能访问实例成员变量和实例方法。</p></blockquote><p>比如数学工具类中的calculateCircleArea方法计算圆的面积：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateCircleArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用方式</span><br><span class="hljs-type">double</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> MathUtils.calculateCircleArea(<span class="hljs-number">5</span>);<br><br></code></pre></td></tr></table></figure><p>还有protected（受保护的，用于继承场景）、final（方法不能被重写）等修饰符，它们在不同场景下发挥着重要作用。</p><h3 id="返回类型方法的-产出物类型"><a class="markdownIt-Anchor" href="#返回类型方法的-产出物类型"></a> 返回类型：方法的 “产出物类型”</h3><blockquote><p>返回值类型明确了方法执行结束后返回的数据类型。如果方法没有返回值，就用void表示，比如打印日志的logMessage方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logMessage</span><span class="hljs-params">(String message)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;日志信息：&quot;</span> + message);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若有返回值，必须与定义的类型一致。例如计算两个整数乘积的multiply方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>    <span class="hljs-keyword">return</span> num1 * num2;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法返回类型详细样例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 方法返回类型样例</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 返回基本类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">// 返回对象类型</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> user.getName();<br>&#125;<br><span class="hljs-number">2</span><br><span class="hljs-comment">// 无返回值 (void)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLog</span><span class="hljs-params">(String message)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;[LOG] &quot;</span> + message);<br>&#125;<br><br><span class="hljs-comment">// 返回集合</span><br><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">getEvenNumbers</span><span class="hljs-params">(List&lt;Integer&gt; numbers)</span> &#123;<br>    <span class="hljs-keyword">return</span> numbers.stream()<br>                  .filter(n -&gt; n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                  .collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>值得注意的是，return语句不仅用于返回值，还能提前结束方法执行，即使方法是void类型。</p></blockquote><h3 id="方法名"><a class="markdownIt-Anchor" href="#方法名"></a> 方法名</h3><p>方法名，顾名思义，是方法的专属名字，它唯一标识了该方法。</p><p>方法名要遵循驼峰命名法，且能准确反映方法功能。例如，将字符串转换为大写的convertToUpperCase方法，从名字就能清晰知道它的用途。避免使用模糊、无意义的名称，否则会给代码阅读和维护带来困难。</p><h3 id="参数列表"><a class="markdownIt-Anchor" href="#参数列表"></a> 参数列表</h3><blockquote><p>参数列表是方法执行时所需的数据。</p></blockquote><p>参数可以是基本数据类型，如int、double，也可以是引用数据类型，如String、自定义类。方法可以有多个参数，也可以没有参数。</p><p>例如，计算长方形面积的calculateRectangleArea方法接收长和宽两个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateRectangleArea</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;  <span class="hljs-comment">//length 和 width 是就是参数，double 是参数的类型</span><br>    <span class="hljs-keyword">return</span> length * width;<br>&#125;<br></code></pre></td></tr></table></figure><p>当方法需要处理多个同类型数据时，还可以使用数组作为参数</p><p>比如计算数组中所有元素和的sumArrayElements方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumArrayElements</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;   <span class="hljs-comment">//array 是一个int类型的数组</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : array) &#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法体"><a class="markdownIt-Anchor" href="#方法体"></a> 方法体</h3><p>方法体是实现具体功能的代码块，用<code>&#123;&#125;</code>包裹。在方法体中，根据业务逻辑编写代码，可能包含变量声明、条件判断、循环等操作。</p><p>例如，判断一个数是否为质数的isPrime方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 判断一个数是否为质数</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;  <span class="hljs-comment">//  方法代码块的左括号</span><br>    <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= Math.sqrt(number); i++) &#123;<br>        <span class="hljs-keyword">if</span> (number % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;  <span class="hljs-comment">//方法代码块的右括号，也是结束括号</span><br></code></pre></td></tr></table></figure><h2 id="三-java-方法的多样使用场景"><a class="markdownIt-Anchor" href="#三-java-方法的多样使用场景"></a> 三、Java 方法的多样使用场景</h2><h3 id="无参数无返回值方法"><a class="markdownIt-Anchor" href="#无参数无返回值方法"></a> 无参数无返回值方法</h3><blockquote><p>这类方法常用于执行一些简单的、不需要输入输出的操作，比如初始化系统配置、播放提示音等。</p></blockquote><p>以打印系统启动信息为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 模拟系统启动</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemInitializer</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStartupMessage</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;系统正在启动...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;加载配置文件...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;启动完成！&quot;</span>);<br>    &#125;<br>&#125;<br>   <span class="hljs-comment">// 在主程序中调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SystemInitializer.printStartupMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有参数无返回值方法"><a class="markdownIt-Anchor" href="#有参数无返回值方法"></a> 有参数无返回值方法</h3><blockquote><p>当方法需要根据外部传入的数据进行处理，但不需要返回结果时适用。</p></blockquote><p>比如，向文件中写入日志信息，需要传入日志内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 日志记录方法样例</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogWriter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLog</span><span class="hljs-params">(String logMessage)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;log.txt&quot;</span>, <span class="hljs-literal">true</span>))) &#123;<br>            writer.write(logMessage);<br>            writer.newLine();<br>        &#125; <br>        <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    LogWriter.writeLog(<span class="hljs-string">&quot;用户登录成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有参数有返回值方法"><a class="markdownIt-Anchor" href="#有参数有返回值方法"></a> 有参数有返回值方法</h3><blockquote><p>这是最常用且的方法类型，用于处理数据并返回结果。例如，从数据库中查询用户信息，传入用户 ID，返回对应的用户对象：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 有参数有返回值方法样例</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123; <br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 省略构造函数、getter和setter方法</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(String userId)</span> &#123;<br>    <span class="hljs-comment">// 模拟从数据库查询操作</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;123&quot;</span>.equals(userId)) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">25</span>);<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br>   <span class="hljs-comment">// 调用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.getUserById(<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户姓名：&quot;</span> + user.getName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法的重载"><a class="markdownIt-Anchor" href="#方法的重载"></a> 方法的重载</h3><blockquote><p>在同一个类中，允许定义多个方法名相同但参数列表不同的方法，这就是方法重载。<br />编译器会根据调用时传入的<strong>参数类型和个数自动匹配</strong>对应的方法。</p></blockquote><p>例如，计算图形面积的方法，针对不同图形可以进行重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 方法的重载样例</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-comment">// 计算圆形面积</span><br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateArea</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;<br>        <span class="hljs-comment">// 计算长方形面积</span><br>        <span class="hljs-keyword">return</span> length * width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateArea</span><span class="hljs-params">(<span class="hljs-type">double</span> base, <span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-comment">// 计算三角形面积</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> * base * height;<br>    &#125;<br>&#125;<br>   <span class="hljs-comment">// 调用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">circleArea</span> <span class="hljs-operator">=</span> AreaCalculator.calculateArea(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">rectangleArea</span> <span class="hljs-operator">=</span> AreaCalculator.calculateArea(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">triangleArea</span> <span class="hljs-operator">=</span> AreaCalculator.calculateArea(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>);<br>        System.out.println(<span class="hljs-string">&quot;圆形面积：&quot;</span> + circleArea);<br>        System.out.println(<span class="hljs-string">&quot;长方形面积：&quot;</span> + rectangleArea);<br>        System.out.println(<span class="hljs-string">&quot;三角形面积：&quot;</span> + triangleArea);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="递归方法"><a class="markdownIt-Anchor" href="#递归方法"></a> 递归方法</h3><blockquote><p>递归方法是指<strong>在方法体内调用自身的方法</strong>。<br />常用于解决可以分解为相似子问题的情况，如计算阶乘、遍历树形结构等。</p></blockquote><p>以计算阶乘为例 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 方法的递归使用样例，计算阶乘</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactorialCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateFactorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n * calculateFactorial(n - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br>   <span class="hljs-comment">// 调用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> FactorialCalculator.calculateFactorial(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;5的阶乘是：&quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 使用递归方法时要注意设置终止条件，否则会导致栈溢出错误。</p></blockquote><h3 id="可变参数方法"><a class="markdownIt-Anchor" href="#可变参数方法"></a> 可变参数方法</h3><blockquote><p>在 <code>Java 5</code> 之后，引入了可变参数，允许方法接收任意数量的同类型参数。可变参数<strong>本质上是一个数组</strong>，在方法内部可以像操作数组一样处理参数。</p></blockquote><p>例如，计算多个整数的和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SumCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... numbers)</span> &#123;  <span class="hljs-comment">// 使用三个&quot;.&quot;来表示这是一个可变参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : numbers) &#123;<br>            total += num;<br>        &#125;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br>&#125;<br>   <span class="hljs-comment">// 调用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum1</span> <span class="hljs-operator">=</span> SumCalculator.sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum2</span> <span class="hljs-operator">=</span> SumCalculator.sum(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>);<br>        System.out.println(<span class="hljs-string">&quot;和1：&quot;</span> + sum1);<br>        System.out.println(<span class="hljs-string">&quot;和2：&quot;</span> + sum2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四-方法使用的注意事项与黄金法则"><a class="markdownIt-Anchor" href="#四-方法使用的注意事项与黄金法则"></a> 四、方法使用的注意事项与黄金法则</h2><h3 id="使用注意事项"><a class="markdownIt-Anchor" href="#使用注意事项"></a> 使用注意事项</h3><p>方法的作用域：方法中定义的变量是局部变量，只在方法体内有效，方法执行结束后，局部变量就会被销毁。<br />方法调用的性能：过多的方法调用会产生一定的性能开销，尤其是在循环中频繁调用方法时，要考虑性能优化。<br />方法的注释：为了提高代码的可读性和可维护性，要给方法添加清晰的注释，说明方法的功能、参数含义、返回值意义等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 计算两个整数的和</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> num1 第一个整数</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> num2 第二个整数</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 两个整数的和</span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>    <span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="方法的黄金法则"><a class="markdownIt-Anchor" href="#方法的黄金法则"></a> 方法的黄金法则</h3><ol><li><strong>单一职责</strong>：一个方法只做一件事</li><li><strong>见名知意</strong>：方法名精确反映功能</li><li><strong>参数精简</strong>：不超过3个参数（多用对象封装）</li><li><strong>防御编程</strong>：对输入参数进行校验</li><li><strong>避免副作用</strong>：不修改非局部变量（纯函数更安全）</li><li><strong>长度控制</strong>：方法体不超过屏幕一屏（约30行）</li><li><strong>异常处理</strong>：合理使用throws或try-catch</li></ol><h2 id="五-总结"><a class="markdownIt-Anchor" href="#五-总结"></a> 五、总结</h2><p>Java 方法是 Java 编程的核心内容之一，掌握方法的构成、使用场景和技巧，能让我们编写出更加高效、优雅、可维护的代码。从简单的无参无返回值方法，到复杂的递归、可变参数方法，每一种类型都有其独特的应用价值。希望通过今天的深度解析，你对 Java 方法有了更全面、更深入的理解。</p><p>如果你在学习方法的过程中遇到任何问题，或者有想了解的其他 Java 知识，欢迎在公众号留言！别忘记点击关注，获取更多 Java 干货，一起在编程的道路上越走越远！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java快速入门学习手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>04.认识输入输出与运算符</title>
    <link href="/waterbottle/posts/c1c/"/>
    <url>/waterbottle/posts/c1c/</url>
    
    <content type="html"><![CDATA[<p>认识Java的输入输出与运算符。</p><span id="more"></span><p>在 Java 编程中，基本数据类型是构建程序的基石，而输入输出与运算符则是程序与外界交互、处理数据的关键工具。<br />掌握它们，能让你的程序 “听得懂” 外界指令，“算得清” 各类逻辑。本文将带你深入了解 Java 输入输出与运算符的用法、技巧与注意事项。</p><h2 id="一-java输入"><a class="markdownIt-Anchor" href="#一-java输入"></a> 一、Java输入</h2><p>Java 中常用的输入方式主要通过 <code>Scanner</code> 类和 <code>BufferedReader</code> 类实现，它们就像是程序的 “耳朵”，接收用户输入的数据。</p><h3 id="使用-scanner-类"><a class="markdownIt-Anchor" href="#使用-scanner-类"></a> 使用 Scanner 类</h3><blockquote><p>Scanner 类是最常用的输入方式，使用起来简单便捷，适用于大多数基础输入场景。</p></blockquote><h4 id="步骤详解"><a class="markdownIt-Anchor" href="#步骤详解"></a> 步骤详解：</h4><p>1、使用 <code>Scanner</code> 类前，需要导入 <code>java.util.Scanner</code> 包。<br />使用 <strong><code>import java.util.Scanner;</code></strong> 来导入Scanner，使其在接下来的程序中可用。</p><p>2、然后创建一个 Scanner 对象：在主程序中创建一个 Scanner 实例，通常将标准输入流 <a href="http://System.in">System.in</a> 作为参数传入，它代表从键盘获取输入。<br /><code>Scanner scanner = new Scanner(System.in);</code></p><p>3、接着获取输入数据：根据需要获取的数据类型，调用 Scanner 类相应的方法。<br />详细代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Scanner获取输入</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Version: 1.0</span><br><span class="hljs-comment"> * Author: 瓶子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CH04inputAndOutput</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">// 获取输入数据：根据需要获取的数据类型，调用 Scanner 类相应的方法。</span><br>        System.out.print(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();  <span class="hljs-comment">// 获取整数输入，输入非整数内容会报错</span><br><br>        System.out.print(<span class="hljs-string">&quot;请输入一个字符串：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.next();  <span class="hljs-comment">// 获取字符串输入，遇到空格停止读取</span><br><br>        System.out.print(<span class="hljs-string">&quot;请输入一行文本：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> scanner.nextLine();  <span class="hljs-comment">// 获取整行字符串，包括空格</span><br><br>        <span class="hljs-comment">//关闭 Scanner：使用完毕后，应关闭 Scanner 对象以释放资源。</span><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用-bufferedreader-类"><a class="markdownIt-Anchor" href="#使用-bufferedreader-类"></a> 使用 BufferedReader 类</h3><blockquote><p><code>BufferedReader</code> 类基于字符流进行输入，相比 <code>Scanner</code> 类，在处理大量文本输入时效率更高，且能更灵活地处理字符数据。</p></blockquote><h4 id="步骤详解-2"><a class="markdownIt-Anchor" href="#步骤详解-2"></a> 步骤详解：</h4><p>1、导入包：导入 <code>java.io.BufferedReader</code> 和 <code>java.io.InputStreamReader</code> 包。</p><p>2、创建 BufferedReader 对象：通过 InputStreamReader 将字节流转换为字符流，再创建 BufferedReader 实例。</p><p>3、获取输入数据：主要使用 readLine() 方法读取一行字符串，若要获取其他类型数据，需自行进行类型转换。</p><p>4、关闭 BufferedReader：使用完毕后，应关闭 BufferedReader 对象以释放资源。</p><blockquote><p>使用 BufferedReader 类时，需要添加异常处理，防止程序因输入错误而崩溃。</p></blockquote><p>以下是代码样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* BufferedReader 获取输入</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* Version: 1.0</span><br><span class="hljs-comment">* Author: 瓶子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CH04inputAndOutput</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, IOException &#123;<br>      <span class="hljs-comment">// 获取输入数据：使用 BufferedReader 类，使用try-catch块来捕获异常并抛出</span><br>      <span class="hljs-keyword">try</span>&#123;<br>         <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>         System.out.print(<span class="hljs-string">&quot;请输入任意内容：&quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> reader.readLine();   <span class="hljs-comment">// 获取整行输入内容</span><br>         System.out.println(<span class="hljs-string">&quot;输入的内容是：&quot;</span> + input);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>         System.err.println(<span class="hljs-string">&quot;读取输入时出错：&quot;</span> + e.getMessage());<br>      &#125;<br><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-java-输出"><a class="markdownIt-Anchor" href="#二-java-输出"></a> 二、Java 输出</h2><blockquote><p>Java 的输出功能通过 System.out 实现，它就像是程序的 “嘴巴”，将处理结果展示给用户。</p></blockquote><h3 id="print-方法"><a class="markdownIt-Anchor" href="#print-方法"></a> print() 方法</h3><blockquote><p>print() 方法用于将指定内容输出到控制台，输出后不会自动换行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(<span class="hljs-string">&quot;Hello, &quot;</span>);<br>system.out.print(<span class="hljs-string">&quot;World!&quot;</span>);<br></code></pre></td></tr></table></figure><p>上述代码放到main中执行后，控制台输出 Hello, World! ，内容在同一行显示。</p><h3 id="println-方法"><a class="markdownIt-Anchor" href="#println-方法"></a> println() 方法</h3><blockquote><p>println() 方法同样用于输出内容到控制台，但输出后会自动换行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Java&quot;</span>);<br></code></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Hello</span><br><span class="hljs-attribute">Java</span><br></code></pre></td></tr></table></figure><h3 id="printf-方法"><a class="markdownIt-Anchor" href="#printf-方法"></a> printf() 方法</h3><blockquote><p>printf() 方法按照指定格式输出内容，类似于 C 语言中的 printf 函数，适用于格式化输出场景，如输出表格数据、控制小数位数等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br>System.out.printf(<span class="hljs-string">&quot;圆周率保留两位小数为：%.2f&quot;</span>, num);<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">圆周率保留两位小数为：3.14<br></code></pre></td></tr></table></figure><h2 id="三-java-运算符"><a class="markdownIt-Anchor" href="#三-java-运算符"></a> 三、Java 运算符</h2><blockquote><p>运算符是 Java 进行数据运算和逻辑判断的关键工具，根据功能可分为算术运算符、赋值运算符、关系运算符、逻辑运算符、位运算符等。</p></blockquote><h3 id="算术运算符"><a class="markdownIt-Anchor" href="#算术运算符"></a> 算术运算符</h3><blockquote><p>算术运算符用于进行基本的数学运算，包括加（+）、减（-）、乘（*）、除（/）、取余（%）、自增（++）、自减（–）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 运算符演示</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Version: 1.0</span><br><span class="hljs-comment"> * Author: 瓶子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>System.out.println(<span class="hljs-string">&quot;a + b = &quot;</span> + (a + b));  <span class="hljs-comment">// 输出 13</span><br>System.out.println(<span class="hljs-string">&quot;a - b = &quot;</span> + (a - b));  <span class="hljs-comment">// 输出 7</span><br>System.out.println(<span class="hljs-string">&quot;a * b = &quot;</span> + (a * b));  <span class="hljs-comment">// 输出 30</span><br>System.out.println(<span class="hljs-string">&quot;a / b = &quot;</span> + (a / b));  <span class="hljs-comment">// 输出 3，整数相除结果取整</span><br>System.out.println(<span class="hljs-string">&quot;a % b = &quot;</span> + (a % b));  <span class="hljs-comment">// 输出 1，取余数</span><br>System.out.println(<span class="hljs-string">&quot;a++ = &quot;</span> + (a++));  <span class="hljs-comment">// 先输出 a 的值 10，再将 a 自增为 11</span><br>System.out.println(<span class="hljs-string">&quot;++a = &quot;</span> + (++a));  <span class="hljs-comment">// 先将 a 自增为 12，再输出 a 的值 12</span><br></code></pre></td></tr></table></figure><h3 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h3><blockquote><p>赋值运算符用于将右侧表达式的值赋给左侧变量，最基本的赋值运算符是 =，还有复合赋值运算符，如 +=、-=、*=、/=、%= 等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>x += <span class="hljs-number">3</span>;  <span class="hljs-comment">// 等价于 x = x + 3，x 的值变为 8</span><br>x *= <span class="hljs-number">2</span>;  <span class="hljs-comment">// 等价于 x = x * 2，x 的值变为 16</span><br></code></pre></td></tr></table></figure><h3 id="关系运算符"><a class="markdownIt-Anchor" href="#关系运算符"></a> 关系运算符</h3><blockquote><p>关系运算符用于比较两个值的大小关系，结果为 boolean 类型（true 或 false），包括大于（&gt;）、小于（&lt;）、大于等于（&gt;=）、小于等于（&lt;=）、等于（==）、不等于（!=）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>System.out.println(<span class="hljs-string">&quot;m &gt; n = &quot;</span> + (m &gt; n));  <span class="hljs-comment">// 输出 false</span><br>System.out.println(<span class="hljs-string">&quot;m &lt; n = &quot;</span> + (m &lt; n));  <span class="hljs-comment">// 输出 true</span><br>System.out.println(<span class="hljs-string">&quot;m == n = &quot;</span> + (m == n));  <span class="hljs-comment">// 输出 false</span><br>System.out.println(<span class="hljs-string">&quot;m != n = &quot;</span> + (m != n));  <span class="hljs-comment">// 输出 true</span><br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h3><blockquote><p>逻辑运算符用于对 boolean 类型的值进行逻辑运算，结果同样为 boolean 类型，包括逻辑与（&amp;&amp;）、逻辑或（||）、逻辑非（!）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>System.out.println(<span class="hljs-string">&quot;p &amp;&amp; q = &quot;</span> + (p &amp;&amp; q));  <span class="hljs-comment">// 逻辑与，全真才为真，输出 false</span><br>System.out.println(<span class="hljs-string">&quot;p || q = &quot;</span> + (p || q));  <span class="hljs-comment">// 逻辑或，有真即为真，输出 true</span><br>System.out.println(<span class="hljs-string">&quot;!p = &quot;</span> + (!p));  <span class="hljs-comment">// 逻辑非，取反，输出 false</span><br></code></pre></td></tr></table></figure><h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h3><blockquote><p>位运算符直接对二进制位进行操作，包括按位与（&amp;）、按位或（|）、按位异或（^）、按位取反（~）、左移（&lt;&lt;）、右移（&gt;&gt;）、无符号右移（&gt;&gt;&gt;）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;  <span class="hljs-comment">// 二进制为 0000 0110</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;  <span class="hljs-comment">// 二进制为 0000 0011</span><br>System.out.println(<span class="hljs-string">&quot;num1 &amp; num2 = &quot;</span> + (num1 &amp; num2));  <span class="hljs-comment">// 按位与，输出 2（二进制 0000 0010）</span><br>System.out.println(<span class="hljs-string">&quot;num1 | num2 = &quot;</span> + (num1 | num2));  <span class="hljs-comment">// 按位或，输出 7（二进制 0000 0111）</span><br>System.out.println(<span class="hljs-string">&quot;num1 ^ num2 = &quot;</span> + (num1 ^ num2));  <span class="hljs-comment">// 按位异或，输出 5（二进制 0000 0101）</span><br>System.out.println(<span class="hljs-string">&quot;~num1 = &quot;</span> + (~num1));  <span class="hljs-comment">// 按位取反，输出 -7</span><br>System.out.println(<span class="hljs-string">&quot;num1 &lt;&lt; 1 = &quot;</span> + (num1 &lt;&lt; <span class="hljs-number">1</span>));  <span class="hljs-comment">// 左移 1 位，输出 12（二进制 0000 1100）</span><br>System.out.println(<span class="hljs-string">&quot;num1 &gt;&gt; 1 = &quot;</span> + (num1 &gt;&gt; <span class="hljs-number">1</span>));  <span class="hljs-comment">// 右移 1 位，输出 3（二进制 0000 0011）</span><br></code></pre></td></tr></table></figure><h2 id="四-运算符优先级与结合性"><a class="markdownIt-Anchor" href="#四-运算符优先级与结合性"></a> 四、运算符优先级与结合性</h2><blockquote><p><strong>注意</strong> 在一个表达式中存在多个运算符时，运算顺序由运算符的优先级和结合性决定。<br />优先级高的运算符先执行，优先级相同则根据结合性确定执行顺序。<br />例如，算术运算符优先级高于关系运算符，关系运算符优先级高于逻辑运算符。具体的优先级和结合性规则可参考官方文档。<br />但在实际编程中，为了避免歧义，建议使用括号明确运算顺序。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (<span class="hljs-number">2</span> + <span class="hljs-number">3</span>) * <span class="hljs-number">4</span> / <span class="hljs-number">2</span>;  <span class="hljs-comment">// 先算括号内，再依次进行乘除运算，结果为 10</span><br></code></pre></td></tr></table></figure><p>掌握了 Java 的输入输出与运算符，你已经具备了编写更复杂程序的能力。后续我们将继续深入 Java 编程世界，学习流程控制语句、函数等知识。如果在学习过程中有任何疑问，欢迎在评论区留言交流，也别忘了持续关注我们，解锁更多 Java 编程学习干货！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java快速入门学习手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>03.认识变量与常量</title>
    <link href="/waterbottle/posts/274c/"/>
    <url>/waterbottle/posts/274c/</url>
    
    <content type="html"><![CDATA[<p>认识Java的变量与常量</p><span id="more"></span><h2 id="java常量与变量"><a class="markdownIt-Anchor" href="#java常量与变量"></a> Java常量与变量</h2><p>在Java编程中，<strong>常量（Constant）</strong> 和 <strong>变量（Variable）</strong> 是存储数据的基本单元。它们的区别在于：</p><ul><li><strong>变量</strong>：值在程序运行期间可以改变。</li><li><strong>常量</strong>：值在程序运行期间不可改变。</li></ul><h3 id="一-变量"><a class="markdownIt-Anchor" href="#一-变量"></a> 一、变量</h3><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><p>变量是内存中的一个存储区域，其值可以在程序执行过程中发生变化。每个变量都必须声明其数据类型。<br />简单点理解：变量就是一个盒子，用来装程序运行中需要处理的数据。他的格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义格式</span><br><span class="hljs-comment">// 数据类型 变量名称 = 数据;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><ul><li>数据类型：用来限制盒子里存储的某种数据形式，你需要什么类型的数据就填什么。例如 <code>int</code>, <code>double</code>, <code>String</code> 等。</li><li>变量名称：变量的名称，用于标识变量。首字母小写，要有意义。</li><li>等于号：这里是赋值符号，用来将右边的值赋给左边的变量。</li><li>数据：变量存储的数据。</li></ul><h4 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h4><ol><li>变量在定义的时候可以不赋初始值，但是在<strong>使用时变量里必须有值</strong>。</li><li>变量里的数据是可以被替换的。</li><li>变量是什么类型，就必须赋值什么类型的数据。</li><li>变量的作用域是定义变量的代码块。也就是在定义变量的开始，到他所属的这个代码块结束的范围内有效。如果不理解什么叫代码块没关系，我们后面会说。</li><li>同一个作用域范围内，变量名称不能重复。</li><li>变量的名称不能和Java的保留关键字重复。如果不清楚什么是关键字也没关系，我们会在后面说。</li></ol><p>下面我们看一段代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 变量的特点展示</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Version: 1.0</span><br><span class="hljs-comment"> * Author: 瓶子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CH03VariablesAndConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> a;          <span class="hljs-comment">// 初始化但是不赋值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>; <span class="hljs-comment">// 初始化并赋值</span><br>        System.out.println(msg); <span class="hljs-comment">//  输出</span><br>        a = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 赋值</span><br>        System.out.println(a);  <span class="hljs-comment">// 输出</span><br>        a= <span class="hljs-number">10</span>; <span class="hljs-comment">// 改变赋值</span><br>        System.out.println(a);  <span class="hljs-comment">//  输出</span><br><br>        <span class="hljs-comment">//  赋值字符串，会报错</span><br>        <span class="hljs-comment">//a = &quot;123456&quot;</span><br><br>        <span class="hljs-comment">// int a;</span><br>        <span class="hljs-comment">// 上面的int a; 是重复定义，会导致报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="命名规则"><a class="markdownIt-Anchor" href="#命名规则"></a> 命名规则</h4><ol><li>变量名由字母、数字、下划线 <code>_</code> 或 <code>$</code> 组成。</li><li>变量名不能以数字开头。</li><li>变量名不能使用关键字（如 <code>int</code>, <code>class</code> 等）。</li><li>变量名应具有可读性，通常使用小驼峰命名法（例如 <code>studentAge</code>）。</li></ol><h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 变量的命名规则和使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Version: 1.0</span><br><span class="hljs-comment"> * Author: 瓶子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CH03VariablesAndConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>; <span class="hljs-comment">// 声明并初始化一个整型变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000.50</span>; <span class="hljs-comment">// 声明并初始化一个双精度浮点型变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>; <span class="hljs-comment">// 声明并初始化一个字符串变量</span><br><br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;工资：&quot;</span> + salary);<br><br>        age = <span class="hljs-number">21</span>; <span class="hljs-comment">// 修改变量的值</span><br>        System.out.println(<span class="hljs-string">&quot;修改后的年龄：&quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二-常量"><a class="markdownIt-Anchor" href="#二-常量"></a> 二、常量</h3><h4 id="定义-2"><a class="markdownIt-Anchor" href="#定义-2"></a> 定义</h4><p>常量是在程序运行过程中其值不会发生改变的量。在Java中，通过 <code>final</code> 关键字来定义常量。</p><h4 id="命名规则-2"><a class="markdownIt-Anchor" href="#命名规则-2"></a> 命名规则</h4><ol><li>常量名通常使用大写字母。</li><li>如果有多个单词组成，可以用下划线分隔（例如 <code>MAX_VALUE</code>）。</li></ol><h4 id="示例代码-2"><a class="markdownIt-Anchor" href="#示例代码-2"></a> 示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 常量的特点展示</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Version: 1.0</span><br><span class="hljs-comment"> * Author: 瓶子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstantExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14159</span>; <span class="hljs-comment">// 声明一个常量PI</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">radius</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> PI * radius * radius; <span class="hljs-comment">// 使用常量计算圆的面积</span><br><br>        System.out.println(<span class="hljs-string">&quot;圆的面积为：&quot;</span> + area);<br><br>        <span class="hljs-comment">// PI = 3.14; // 编译错误，不能修改常量的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三-总结对比表"><a class="markdownIt-Anchor" href="#三-总结对比表"></a> 三、总结对比表</h3><table><thead><tr><th>特征</th><th>变量</th><th>常量</th></tr></thead><tbody><tr><td>值是否可变</td><td>可以改变</td><td>不可改变</td></tr><tr><td>声明方式</td><td>直接声明数据类型和变量名</td><td>使用 <code>final</code> 关键字修饰</td></tr><tr><td>命名规范</td><td>小驼峰命名法（如 <code>age</code>）</td><td>全大写，多词用下划线分隔</td></tr><tr><td>使用场景</td><td>需要频繁更改的数据</td><td>固定不变的数据（如数学常数）</td></tr></tbody></table><h3 id="四-注意事项"><a class="markdownIt-Anchor" href="#四-注意事项"></a> 四、注意事项</h3><ol><li>在定义变量之前，必须先声明变量。</li><li>常量通常定义在类或接口中，作为静态常量时使用 <code>static final</code>。</li><li>常量有助于提高代码的可读性和维护性。</li></ol><p>通过合理使用变量和常量，可以编写出结构清晰、易于维护的Java程序。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java快速入门学习手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20.面向对象编程应用</title>
    <link href="/waterbottle/posts/174b/"/>
    <url>/waterbottle/posts/174b/</url>
    
    <content type="html"><![CDATA[<p>面向对象编程的实际应用思路</p><span id="more"></span><h2 id="面向对象编程应用"><a class="markdownIt-Anchor" href="#面向对象编程应用"></a> 面向对象编程应用</h2><p>面向对象编程对初学者来说不难理解但很难应用，虽然我们为大家总结过面向对象的三步走方法（定义类、创建对象、给对象发消息），但是说起来容易做起来难。<br /><strong>大量的编程练习</strong>和<strong>阅读优质的代码</strong>可能是这个阶段最能够帮助到大家的两件事情。接下来我们还是通过经典的案例来剖析面向对象编程的知识，同时也通过这些案例把我们之前学过的 Python 知识都串联起来。</p><h3 id="例子1扑克游戏"><a class="markdownIt-Anchor" href="#例子1扑克游戏"></a> 例子1：扑克游戏。</h3><blockquote><p><strong>说明</strong>：简单起见，我们的扑克只有52张牌（没有大小王），游戏需要将 52 张牌发到 4 个玩家的手上，每个玩家手上有 13 张牌，按照黑桃、红心、草花、方块的顺序和点数从小到大排列，暂时不实现其他的功能。</p></blockquote><p>使用面向对象编程方法，首先需要从问题的需求中找到对象并抽象出对应的类，此外还要找到对象的属性和行为。<br />当然，这件事情并不是特别困难，我们可以从需求的描述中找出名词和动词，名词通常就是对象或者是对象的属性，而动词通常是对象的行为。<br />扑克游戏中至少应该有三类对象，分别是牌、扑克和玩家，三个类也并不是孤立的。<br />类和类之间的关系可以粗略的分为 <strong>is-a关系（继承）</strong>、**has-a关系（关联）**和 <strong>use-a关系（依赖）</strong>。<br />很显然扑克和牌是 has-a 关系，因为一副扑克有（has-a）52 张牌；玩家和牌之间不仅有关联关系还有依赖关系，因为玩家手上有（has-a）牌而且玩家使用了（use-a）牌。</p><p>牌的属性显而易见，有花色和点数。我们可以用 0 到 3 的四个数字来代表四种不同的花色，但是这样的代码可读性会非常糟糕，因为我们并不知道黑桃、红心、草花、方块跟 0 到 3 的数字的对应关系。<br />如果一个变量的取值只有有限多个选项，我们可以使用枚举。与 C、Java 等语言不同的是，Python 中没有声明枚举类型的关键字，但是可以通过继承<code>enum</code>模块的<code>Enum</code>类来创建枚举类型，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Suite</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;花色(枚举)&quot;&quot;&quot;</span><br>    SPADE, HEART, CLUB, DIAMOND = <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>通过上面的代码可以看出，定义枚举类型其实就是定义符号常量，如<code>SPADE</code>、<code>HEART</code>等。每个符号常量都有与之对应的值，这样表示黑桃就可以不用数字 0，而是用<code>Suite.SPADE</code>；同理，表示方块可以不用数字 3， 而是用<code>Suite.DIAMOND</code>。<br />注意，使用符号常量肯定是优于使用字面常量的，因为能够读懂英文就能理解符号常量的含义，代码的可读性会提升很多。<br />Python 中的枚举类型是可迭代类型，简单的说就是可以将枚举类型放到<code>for-in</code>循环中，依次取出每一个符号常量及其对应的值，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> suite <span class="hljs-keyword">in</span> Suite:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;suite&#125;</span>: <span class="hljs-subst">&#123;suite.value&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>接下来我们可以定义牌类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;牌&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, suite, face</span>):<br>        <span class="hljs-variable language_">self</span>.suite = suite<br>        <span class="hljs-variable language_">self</span>.face = face<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        suites = <span class="hljs-string">&#x27;♠♥♣♦&#x27;</span><br>        faces = [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;suites[self.suite.value]&#125;</span><span class="hljs-subst">&#123;faces[self.face]&#125;</span>&#x27;</span>  <span class="hljs-comment"># 返回牌的花色和点数</span><br></code></pre></td></tr></table></figure><p>可以通过下面的代码来测试下<code>Card</code>类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">card1 = Card(Suite.SPADE, <span class="hljs-number">5</span>)<br>card2 = Card(Suite.HEART, <span class="hljs-number">13</span>)<br><span class="hljs-built_in">print</span>(card1)  <span class="hljs-comment"># ♠5 </span><br><span class="hljs-built_in">print</span>(card2)  <span class="hljs-comment"># ♥K</span><br></code></pre></td></tr></table></figure><p>接下来我们定义扑克类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Poker</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;扑克&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.cards = [Card(suite, face) <br>                      <span class="hljs-keyword">for</span> suite <span class="hljs-keyword">in</span> Suite<br>                      <span class="hljs-keyword">for</span> face <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>)]  <span class="hljs-comment"># 52张牌构成的列表</span><br>        <span class="hljs-variable language_">self</span>.current = <span class="hljs-number">0</span>  <span class="hljs-comment"># 记录发牌位置的属性</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;洗牌&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.current = <span class="hljs-number">0</span><br>        random.shuffle(<span class="hljs-variable language_">self</span>.cards)  <span class="hljs-comment"># 通过random模块的shuffle函数实现随机乱序</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deal</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span><br>        card = <span class="hljs-variable language_">self</span>.cards[<span class="hljs-variable language_">self</span>.current]<br>        <span class="hljs-variable language_">self</span>.current += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> card<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;还有没有牌可以发&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.current &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.cards)<br></code></pre></td></tr></table></figure><p>可以通过下面的代码来测试下<code>Poker</code>类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">poker = Poker()<br><span class="hljs-built_in">print</span>(poker.cards)  <span class="hljs-comment"># 洗牌前的牌</span><br>poker.shuffle()<br><span class="hljs-built_in">print</span>(poker.cards)  <span class="hljs-comment"># 洗牌后的牌</span><br></code></pre></td></tr></table></figure><p>定义玩家类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.cards = []  <span class="hljs-comment"># 玩家手上的牌</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_one</span>(<span class="hljs-params">self, card</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;摸牌&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.cards.append(card)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrange</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;整理手上的牌&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.cards.sort()<br></code></pre></td></tr></table></figure><p>创建四个玩家并将牌发到玩家的手上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">poker = Poker()<br>poker.shuffle()<br>players = [Player(<span class="hljs-string">&#x27;东邪&#x27;</span>), Player(<span class="hljs-string">&#x27;西毒&#x27;</span>), Player(<span class="hljs-string">&#x27;南帝&#x27;</span>), Player(<span class="hljs-string">&#x27;北丐&#x27;</span>)]<br><span class="hljs-comment"># 将牌轮流发到每个玩家手上每人13张牌</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>        player.get_one(poker.deal())<br><span class="hljs-comment"># 玩家整理手上的牌输出名字和手牌</span><br><span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>    player.arrange()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;player.name&#125;</span>: &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(player.cards)<br></code></pre></td></tr></table></figure><p>执行上面的代码会在<code>player.arrange()</code>那里出现异常，因为<code>Player</code>的<code>arrange</code>方法使用了列表的<code>sort</code>对玩家手上的牌进行排序，排序需要比较两个<code>Card</code>对象的大小，而<code>&lt;</code>运算符又不能直接作用于<code>Card</code>类型，所以就出现了<code>TypeError</code>异常，异常消息为：<code>'&lt;' not supported between instances of 'Card' and 'Card'</code>。</p><p>为了解决这个问题，我们可以对<code>Card</code>类的代码稍作修改，使得两个<code>Card</code>对象可以直接用<code>&lt;</code>进行大小的比较。这里用到技术叫<strong>运算符重载</strong>，Python 中要实现对<code>&lt;</code>运算符的重载，需要在类中添加一个名为<code>__lt__</code>的魔术方法。很显然，私有方法<code>__lt__</code>中的<code>lt</code>是英文单词“less than”的缩写，以此类推，私有方法<code>__gt__</code>对应<code>&gt;</code>运算符，私有方法<code>__le__</code>对应<code>&lt;=</code>运算符，<code>__ge__</code>对应<code>&gt;=</code>运算符，<code>__eq__</code>对应<code>==</code>运算符，<code>__ne__</code>对应<code>!=</code>运算符。</p><p>修改后的<code>Card</code>类代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;牌&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, suite, face</span>):<br>        <span class="hljs-variable language_">self</span>.suite = suite<br>        <span class="hljs-variable language_">self</span>.face = face<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        suites = <span class="hljs-string">&#x27;♠♥♣♦&#x27;</span><br>        faces = [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;suites[self.suite.value]&#125;</span><span class="hljs-subst">&#123;faces[self.face]&#125;</span>&#x27;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.suite == other.suite:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.face &lt; other.face   <span class="hljs-comment"># 花色相同比较点数的大小</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.suite.value &lt; other.suite.value   <span class="hljs-comment"># 花色不同比较花色对应的值</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以尝试在上面代码的基础上写一个简单的扑克游戏，如 21 点游戏（Black Jack），游戏的规则可以自己在网上找一找。</p></blockquote><h3 id="例子2工资结算系统"><a class="markdownIt-Anchor" href="#例子2工资结算系统"></a> 例子2：工资结算系统。</h3><blockquote><p><strong>要求</strong>：某公司有三种类型的员工，分别是部门经理、程序员和销售员。需要设计一个工资结算系统，根据提供的员工信息来计算员工的月薪。其中，部门经理的月薪是固定 15000 元；程序员按工作时间（以小时为单位）支付月薪，每小时 200 元；销售员的月薪由 1800 元底薪加上销售额 5% 的提成两部分构成。</p></blockquote><p>通过对上述需求的分析，可以看出部门经理、程序员、销售员都是员工，有相同的属性和行为，那么我们可以先设计一个名为<code>Employee</code>的父类，再通过继承的方式从这个父类派生出部门经理、程序员和销售员三个子类。很显然，后续的代码不会创建<code>Employee</code> 类的对象，因为我们需要的是具体的员工对象，所以这个类可以设计成专门用于继承的抽象类。Python 语言中没有定义抽象类的关键字，但是可以通过<code>abc</code>模块中名为<code>ABCMeta</code> 的元类来定义抽象类。关于元类的概念此处不展开讲解，当然大家不用纠结，照做即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>(metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;员工&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;结算月薪&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>在上面的员工类中，有一个名为<code>get_salary</code>的方法用于结算月薪，但是由于还没有确定是哪一类员工，所以结算月薪虽然是员工的公共行为但这里却没有办法实现。对于暂时无法实现的方法，我们可以使用<code>abstractmethod</code>装饰器将其声明为抽象方法，所谓<strong>抽象方法就是只有声明没有实现的方法</strong>，<strong>声明这个方法是为了让子类去重写这个方法</strong>。接下来的代码展示了如何从员工类派生出部门经理、程序员、销售员这三个子类以及子类如何重写父类的抽象方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">15000.0</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Programmer</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, working_hour=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        <span class="hljs-variable language_">self</span>.working_hour = working_hour<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> * <span class="hljs-variable language_">self</span>.working_hour<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Salesman</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sales=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        <span class="hljs-variable language_">self</span>.sales = sales<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1800</span> + <span class="hljs-variable language_">self</span>.sales * <span class="hljs-number">0.05</span><br></code></pre></td></tr></table></figure><p>上面的<code>Manager</code>、<code>Programmer</code>、<code>Salesman</code>三个类都继承自<code>Employee</code>，三个类都分别重写了<code>get_salary</code>方法。<strong>重写就是子类对父类已有的方法重新做出实现</strong>。相信大家已经注意到了，三个子类中的<code>get_salary</code>各不相同，所以这个方法在程序运行时会产生<strong>多态行为</strong>，多态简单的说就是<strong>调用相同的方法</strong>，<strong>不同的子类对象做不同的事情</strong>。</p><p>我们通过下面的代码来完成这个工资结算系统，由于程序员和销售员需要分别录入本月的工作时间和销售额，所以在下面的代码中我们使用了 Python 内置的<code>isinstance</code>函数来判断员工对象的类型。我们之前讲过的<code>type</code>函数也能识别对象的类型，但是<code>isinstance</code>函数更加强大，因为它可以判断出一个对象是不是某个继承结构下的子类型，你可以简单的理解为<code>type</code>函数是对对象类型的精准匹配，而<code>isinstance</code>函数是对对象类型的模糊匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">emps = [Manager(<span class="hljs-string">&#x27;刘备&#x27;</span>), Programmer(<span class="hljs-string">&#x27;诸葛亮&#x27;</span>), Manager(<span class="hljs-string">&#x27;曹操&#x27;</span>), Programmer(<span class="hljs-string">&#x27;荀彧&#x27;</span>), Salesman(<span class="hljs-string">&#x27;张辽&#x27;</span>)]<br><span class="hljs-keyword">for</span> emp <span class="hljs-keyword">in</span> emps:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(emp, Programmer):<br>        emp.working_hour = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入<span class="hljs-subst">&#123;emp.name&#125;</span>本月工作时间: &#x27;</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(emp, Salesman):<br>        emp.sales = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入<span class="hljs-subst">&#123;emp.name&#125;</span>本月销售额: &#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;emp.name&#125;</span>本月工资为: ￥<span class="hljs-subst">&#123;emp.get_salary():<span class="hljs-number">.2</span>f&#125;</span>元&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>19.面向对象编程进阶</title>
    <link href="/waterbottle/posts/9252/"/>
    <url>/waterbottle/posts/9252/</url>
    
    <content type="html"><![CDATA[<p>面向对象编程进阶讲解</p><span id="more"></span><h2 id="面向对象编程进阶"><a class="markdownIt-Anchor" href="#面向对象编程进阶"></a> 面向对象编程进阶</h2><p>前面我们讲解了 Python 面向对象编程的一些基础知识，本节我们继续讨论面向对象编程相关的内容。</p><h3 id="可见性和属性装饰器"><a class="markdownIt-Anchor" href="#可见性和属性装饰器"></a> 可见性和属性装饰器</h3><p>在很多面向对象编程语言中，对象的属性通常会被设置为私有（private）或受保护（protected）的成员，简单的说就是不允许直接访问这些属性；<br />对象的方法通常都是公开的（public），因为公开的方法是对象能够接受的消息，也是对象暴露给外界的调用接口，这就是所谓的访问可见性。<br />在 Python 中，可以通过给对象属性名添加前缀下划线的方式来说明属性的访问可见性，例如，可以用<code>__name</code>表示一个私有属性，<code>_name</code>表示一个受保护属性，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.__name = name<br>        <span class="hljs-variable language_">self</span>.__age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.__name&#125;</span>正在学习<span class="hljs-subst">&#123;course_name&#125;</span>.&#x27;</span>)<br><br><br>stu = Student(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">20</span>)<br>stu.study(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)<br><span class="hljs-built_in">print</span>(stu.__name)  <span class="hljs-comment"># AttributeError: &#x27;Student&#x27; object has no attribute &#x27;__name&#x27;</span><br></code></pre></td></tr></table></figure><p>上面代码的最后一行会引发<code>AttributeError</code>（属性错误）异常，异常消息为：<code>'Student' object has no attribute '__name'</code>。<br />由此可见，以<code>__</code>开头的属性<code>__name</code>相当于是私有的，在类的外面无法直接访问，但是类里面的<code>study</code>方法中可以通过<code>self.__name</code>访问该属性。<br />需要说明的是，大多数使用 Python 语言的人在定义类时，通常不会选择让对象的属性私有或受保护，正如有一句名言说的：“<strong>We are all consenting adults here</strong>”（大家都是成年人），成年人可以为自己的行为负责，而不需要通过 Python 语言本身来限制访问可见性。<br />事实上，大多数的程序员都认为<strong>开放比封闭要好</strong>，把对象的属性私有化并非必不可少的东西，所以 Python 语言并没有从语义上做出最严格的限定，也就是说上面的代码如果你愿意，用<code>stu._Student__name</code>的方式仍然可以访问到私有属性<code>__name</code>。</p><h3 id="动态属性"><a class="markdownIt-Anchor" href="#动态属性"></a> 动态属性</h3><p>Python 语言属于动态语言，维基百科对动态语言的解释是：“在运行时可以改变其结构的语言，例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化”。<br />动态语言非常灵活，目前流行的 Python 和 JavaScript 都是动态语言，除此之外，诸如 PHP、Ruby 等也都属于动态语言，而 C、C++ 等语言则不属于动态语言。</p><p>在 Python 中，我们可以动态为对象添加属性，这是 Python 作为动态类型语言的一项特权，代码如下所示。<br />需要提醒大家的是，对象的方法其实本质上也是对象的属性，如果给对象发送一个无法接收的消息，引发的异常仍然是<code>AttributeError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br><br>stu = Student(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">20</span>)<br>stu.sex = <span class="hljs-string">&#x27;男&#x27;</span>  <span class="hljs-comment"># 给学生对象动态添加sex属性</span><br></code></pre></td></tr></table></figure><p>如果不希望在使用对象时动态的为对象添加属性，可以使用 Python 语言中的<code>__slots__</code>语法，<code>__slots__</code>语法可以限制<code>__dict__</code>中可以添加的属性，从而达到限制对象添加属性的目的。<br />对于<code>Student</code>类来说，可以在类中指定<code>__slots__ = ('name', 'age')</code>，这样<code>Student</code>类的对象只能有<code>name</code>和<code>age</code>属性，如果想动态添加其他属性将会引发异常，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    __slots__ = (<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br><br>stu = Student(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">20</span>)<br><span class="hljs-comment"># AttributeError: &#x27;Student&#x27; object has no attribute &#x27;sex&#x27;</span><br>stu.sex = <span class="hljs-string">&#x27;男&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="静态方法和类方法"><a class="markdownIt-Anchor" href="#静态方法和类方法"></a> 静态方法和类方法</h3><p>之前我们在类中定义的方法都是对象方法，换句话说这些方法都是对象可以接收的消息。除了对象方法之外，类中还可以有静态方法和类方法，这两类方法是发给类的消息，二者并没有实质性的区别。<br />在面向对象的世界里，一切皆为对象，我们定义的每一个类其实也是一个对象，而静态方法和类方法就是发送给类对象的消息。那么，什么样的消息会直接发送给类对象呢？</p><p>举一个例子，定义一个三角形类，通过传入三条边的长度来构造三角形，并提供计算周长和面积的方法。<br />计算周长和面积肯定是三角形对象的方法，这一点毫无疑问。但是在创建三角形对象时，传入的三条边长未必能构造出三角形，为此我们可以先写一个方法来验证给定的三条边长是否可以构成三角形，这种方法很显然就不是对象方法。<br />因为在调用这个方法时三角形对象还没有创建出来。我们可以把这类方法设计为静态方法或类方法，也就是说这类方法不是发送给三角形对象的消息，而是发送给三角形类的消息，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;三角形&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b, c</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.a = a<br>        <span class="hljs-variable language_">self</span>.b = b<br>        <span class="hljs-variable language_">self</span>.c = c<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">a, b, c</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断三条边长能否构成三角形(静态方法)&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br>    <span class="hljs-comment"># @classmethod</span><br>    <span class="hljs-comment"># def is_valid(cls, a, b, c):</span><br>    <span class="hljs-comment">#     &quot;&quot;&quot;判断三条边长能否构成三角形(类方法)&quot;&quot;&quot;</span><br>    <span class="hljs-comment">#     return a + b &gt; c and b + c &gt; a and a + c &gt; b</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perimeter</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算周长&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.a + <span class="hljs-variable language_">self</span>.b + <span class="hljs-variable language_">self</span>.c<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算面积&quot;&quot;&quot;</span><br>        p = <span class="hljs-variable language_">self</span>.perimeter() / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> (p * (p - <span class="hljs-variable language_">self</span>.a) * (p - <span class="hljs-variable language_">self</span>.b) * (p - <span class="hljs-variable language_">self</span>.c)) ** <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>上面的代码使用<code>staticmethod</code>装饰器声明了<code>is_valid</code>方法是<code>Triangle</code>类的静态方法，如果要声明类方法，可以使用<code>classmethod</code>装饰器（如上面的代码15~18行所示）。<br />可以直接使用<code>类名.方法名</code>的方式来调用静态方法和类方法，二者的区别在于，类方法的第一个参数是类对象本身，而静态方法则没有这个参数。<br />简单的总结一下，<strong>对象方法、类方法、静态方法都可以通过“类名.方法名”的方式来调用，区别在于方法的第一个参数到底是普通对象还是类对象，还是没有接受消息的对象</strong>。<br />静态方法通常也可以直接写成一个独立的函数，因为它并没有跟特定的对象绑定。</p><p>这里做一个补充说明，我们可以给上面计算三角形周长和面积的方法添加一个<code>property</code>装饰器（Python 内置类型）。<br />这样三角形类的<code>perimeter</code>和<code>area</code>就变成了两个属性，不再通过调用方法的方式来访问，而是用对象访问属性的方式直接获得，修改后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;三角形&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b, c</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.a = a<br>        <span class="hljs-variable language_">self</span>.b = b<br>        <span class="hljs-variable language_">self</span>.c = c<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">a, b, c</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断三条边长能否构成三角形(静态方法)&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perimeter</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算周长&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.a + <span class="hljs-variable language_">self</span>.b + <span class="hljs-variable language_">self</span>.c<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算面积&quot;&quot;&quot;</span><br>        p = <span class="hljs-variable language_">self</span>.perimeter / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> (p * (p - <span class="hljs-variable language_">self</span>.a) * (p - <span class="hljs-variable language_">self</span>.b) * (p - <span class="hljs-variable language_">self</span>.c)) ** <span class="hljs-number">0.5</span><br><br><br>t = Triangle(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;周长: <span class="hljs-subst">&#123;t.perimeter&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;面积: <span class="hljs-subst">&#123;t.area&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="继承和多态"><a class="markdownIt-Anchor" href="#继承和多态"></a> 继承和多态</h3><p>面向对象的编程语言支持在已有类的基础上创建新类，从而减少重复代码的编写。提供继承信息的类叫做父类（超类、基类），得到继承信息的类叫做子类（派生类、衍生类）。<br />例如，我们定义一个学生类和一个老师类，我们会发现他们有大量的重复代码，而这些重复代码都是老师和学生作为人的公共属性和行为，所以在这种情况下，我们应该先定义人类，再通过继承，从人类派生出老师类和学生类，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;人&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>正在吃饭.&#x27;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>正在睡觉.&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>正在学习<span class="hljs-subst">&#123;course_name&#125;</span>.&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;老师&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, title</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        <span class="hljs-variable language_">self</span>.title = title<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teach</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span><span class="hljs-subst">&#123;self.title&#125;</span>正在讲授<span class="hljs-subst">&#123;course_name&#125;</span>.&#x27;</span>)<br><br><br><br>stu1 = Student(<span class="hljs-string">&#x27;白元芳&#x27;</span>, <span class="hljs-number">21</span>)<br>stu2 = Student(<span class="hljs-string">&#x27;狄仁杰&#x27;</span>, <span class="hljs-number">22</span>)<br>tea1 = Teacher(<span class="hljs-string">&#x27;武则天&#x27;</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;副教授&#x27;</span>)<br>stu1.eat()<br>stu2.sleep()<br>tea1.eat()<br>stu1.study(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)<br>tea1.teach(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)<br>stu2.study(<span class="hljs-string">&#x27;数据科学导论&#x27;</span>)<br></code></pre></td></tr></table></figure><p>继承的语法是在定义类的时候，在类名后的圆括号中指定当前类的父类。如果定义一个类的时候没有指定它的父类是谁，那么默认的父类是<code>object</code>类。<code>object</code>类是 Python 中的顶级类，这也就意味着所有的类都是它的子类，要么直接继承它，要么间接继承它。<br />Python 语言允许多重继承，也就是说一个类可以有一个或多个父类，关于多重继承的问题我们在后面会有更为详细的讨论。在子类的初始化方法中，我们可以通过<code>super().__init__()</code>来调用父类初始化方法，<code>super</code>函数是 Python 内置函数中专门为获取当前对象的父类对象而设计的。<br />从上面的代码可以看出，子类除了可以通过继承得到父类提供的属性和方法外，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力。<br />在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，也叫做“里氏替换原则”（Liskov Substitution Principle）。</p><p>子类继承父类的方法后，还可以对方法进行重写（重新实现该方法），不同的子类可以对父类的同一个方法给出不同的实现版本，这样的方法在程序运行时就会表现出多态行为（调用相同的方法，做了不同的事情）。<br />多态是面向对象编程中最精髓的部分，当然也是对初学者来说最难以理解和灵活运用的部分，我们会在下一个章节用专门的例子来讲解这个知识点。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>18.面向对象编程入门</title>
    <link href="/waterbottle/posts/65fb/"/>
    <url>/waterbottle/posts/65fb/</url>
    
    <content type="html"><![CDATA[<p>面向对象编程简介</p><span id="more"></span><h2 id="面向对象编程入门"><a class="markdownIt-Anchor" href="#面向对象编程入门"></a> 面向对象编程入门</h2><p>计算机专业的小伙伴应该在《软件工程》或者《java语言程序设计》类似的课程中学习过<strong>面向对象编程</strong>和<strong>面向过程编程</strong>的具体含义和设计规则，所以这部分基础含义讲解可以跳过，直接去到类的定义和创建的内容。</p><p>面向对象编程是一种非常流行的<strong>编程范式</strong>（programming paradigm），所谓编程范式就是<strong>程序设计的方法论</strong>，简单的说就是程序员对程序的认知和理解以及他们编写代码的方式。</p><p>在前面的课程中，我们说过“<strong>程序是指令的集合</strong>”，运行程序时，程序中的语句会变成一条或多条指令，然后由CPU（中央处理器）去执行。为了简化程序的设计，我们又讲到了函数，<strong>把相对独立且经常重复使用的代码放置到函数中</strong>，在需要使用这些代码的时候调用函数即可。如果一个函数的功能过于复杂和臃肿，我们又可以进一步<strong>将函数进一步拆分为多个子函数</strong>来降低系统的复杂性。</p><p>不知大家是否发现，编程其实是写程序的人按照计算机的工作方式通过代码控制机器完成任务。但是，计算机的工作方式与人类正常的思维模式是不同的，如果编程就必须抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多。这里，我想说的并不是我们不能按照计算机的工作方式去编写代码，但是当我们需要开发一个复杂的系统时，这种方式会让代码过于复杂，从而导致开发和维护工作都变得举步维艰。</p><p>随着软件复杂性的增加，编写正确可靠的代码会变成了一项极为艰巨的任务，这也是很多人都坚信“软件开发是人类改造世界所有活动中最为复杂的活动”的原因。如何用程序描述复杂系统和解决复杂问题，就成为了所有程序员必须要思考和直面的问题。诞生于上世纪70年代的 Smalltalk 语言让软件开发者看到了希望，因为它引入了一种新的编程范式叫面向对象编程。在面向对象编程的世界里，程序中的<strong>数据和操作数据的函数是一个逻辑上的整体</strong>，我们称之为<strong>对象</strong>，<strong>对象可以接收消息</strong>，解决问题的方法就是<strong>创建对象并向对象发出各种各样的消息</strong>；通过消息传递，程序中的多个对象可以协同工作，这样就能构造出复杂的系统并解决现实中的问题。当然，面向对象编程的雏形还可以向前追溯到更早期的Simula语言，但这不是我们要讨论的重点。</p><blockquote><p><strong>说明：</strong> 今天我们使用的很多高级程序设计语言都支持面向对象编程，但是面向对象编程也不是解决软件开发中所有问题的“银弹”，或者说在软件开发这个行业目前还没有所谓的“银弹”。关于这个问题，大家可以参考 IBM360 系统之父弗雷德里克·布鲁克斯所发表的论文《没有银弹：软件工程的本质性与附属性工作》或软件工程的经典著作《人月神话》一书。</p></blockquote><h3 id="类和对象"><a class="markdownIt-Anchor" href="#类和对象"></a> 类和对象</h3><p>如果要用一句话来概括面向对象编程，我认为下面的说法是相当精辟和准确的。</p><blockquote><p><strong>面向对象编程</strong>：把一组数据和处理数据的方法组成<strong>对象</strong>，把行为相同的对象归纳为<strong>类</strong>，通过<strong>封装</strong>隐藏对象的内部细节，通过<strong>继承</strong>实现类的特化和泛化，通过<strong>多态</strong>实现基于对象类型的动态分派。</p></blockquote><p>这句话对初学者来说可能不那么容易理解，但是我可以先为大家圈出几个关键词：<strong>对象</strong>（object）、<strong>类</strong>（class）、<strong>封装</strong>（encapsulation）、<strong>继承</strong>（inheritance）、<strong>多态</strong>（polymorphism）。</p><p>我们先说说类和对象这两个词。在面向对象编程中，<strong>类是一个抽象的概念，对象是一个具体的概念</strong>。我们把同一类对象的共同特征抽取出来就是一个类，比如我们经常说的人类，这是一个抽象概念，而我们每个人就是人类的这个抽象概念下的实实在在的存在，也就是一个对象。简而言之，<strong>类是对象的蓝图和模板，对象是类的实例，是可以接受消息的实体</strong>。</p><p>在面向对象编程的世界中，<strong>一切皆为对象</strong>，<strong>对象都有属性和行为</strong>，<strong>每个对象都是独一无二的</strong>，而且<strong>对象一定属于某个类</strong>。对象的属性是对象的静态特征，对象的行为是对象的动态特征。按照上面的说法，如果我们把拥有共同特征的对象的属性和行为都抽取出来，就可以定义出一个类。</p><h3 id="定义类"><a class="markdownIt-Anchor" href="#定义类"></a> 定义类</h3><p>在 Python 语言中，我们可以使用<code>class</code>关键字加上类名来定义类，通过缩进我们可以确定类的代码块，就如同定义函数那样。<br />在类的代码块中，我们需要写一些函数，我们说过类是一个抽象概念，那么这些函数就是我们对一类对象共同的动态特征的提取。<br />写在类里面的函数我们通常称之为<strong>方法</strong>，方法就是对象的行为，也就是对象可以接收的消息。方法的第一个参数通常都是<code>self</code>，它代表了接收这个消息的对象本身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;学生正在学习<span class="hljs-subst">&#123;course_name&#125;</span>.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;学生正在玩游戏.&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="创建和使用对象"><a class="markdownIt-Anchor" href="#创建和使用对象"></a> 创建和使用对象</h3><p>在我们定义好一个类之后，可以使用构造器语法来创建对象，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">stu1 = Student()<br>stu2 = Student()<br><span class="hljs-built_in">print</span>(stu1)    <span class="hljs-comment"># &lt;__main__.Student object at 0x10ad5ac50&gt;</span><br><span class="hljs-built_in">print</span>(stu2)    <span class="hljs-comment"># &lt;__main__.Student object at 0x10ad5acd0&gt; </span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(stu1)), <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(stu2)))    <span class="hljs-comment"># 0x10ad5ac50 0x10ad5acd0</span><br></code></pre></td></tr></table></figure><p>在类的名字后跟上圆括号就是所谓的构造器语法，上面的代码创建了两个学生对象，一个赋值给变量<code>stu1</code>，一个赋值给变量<code>stu2</code>。当我们用<code>print</code>函数打印<code>stu1</code>和<code>stu2</code>两个变量时，我们会看到输出了对象在内存中的地址（十六进制形式），跟我们用<code>id</code>函数查看对象标识获得的值是相同的。<br />现在我们可以告诉大家，我们定义的变量其实保存的是一个对象在内存中的逻辑地址（位置），通过这个逻辑地址，我们就可以在内存中找到这个对象。所以<code>stu3 = stu2</code>这样的赋值语句并没有创建新的对象，只是用一个新的变量保存了已有对象的地址。</p><p>接下来，我们尝试给对象发消息，即调用对象的方法。刚才的<code>Student</code>类中我们定义了<code>study</code>和<code>play</code>两个方法，两个方法的第一个参数<code>self</code>代表了接收消息的学生对象，<code>study</code>方法的第二个参数是学习的课程名称。<br />Python中，给对象发消息有两种方式，请看下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过“类.方法”调用方法</span><br><span class="hljs-comment"># 第一个参数是接收消息的对象</span><br><span class="hljs-comment"># 第二个参数是学习的课程名称</span><br>Student.study(stu1, <span class="hljs-string">&#x27;Python程序设计&#x27;</span>)    <span class="hljs-comment"># 学生正在学习Python程序设计.</span><br><span class="hljs-comment"># 通过“对象.方法”调用方法</span><br><span class="hljs-comment"># 点前面的对象就是接收消息的对象</span><br><span class="hljs-comment"># 只需要传入第二个参数课程名称</span><br>stu1.study(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)             <span class="hljs-comment"># 学生正在学习Python程序设计.</span><br><br>Student.play(stu2)                      <span class="hljs-comment"># 学生正在玩游戏.</span><br>stu2.play()                             <span class="hljs-comment"># 学生正在玩游戏. </span><br></code></pre></td></tr></table></figure><h3 id="初始化方法"><a class="markdownIt-Anchor" href="#初始化方法"></a> 初始化方法</h3><p>大家可能已经注意到了，刚才我们创建的学生对象只有行为没有属性，如果要给学生对象定义属性，我们可以修改<code>Student</code>类，为其添加一个名为<code>__init__</code>的方法。<br />在我们调用<code>Student</code>类的构造器创建对象时，首先会在内存中获得保存学生对象所需的内存空间，然后通过自动执行<code>__init__</code>方法，完成对内存的初始化操作，也就是把数据放到内存空间中。<br />所以我们可以通过给<code>Student</code>类添加<code>__init__</code>方法的方式为学生对象指定属性，同时完成对属性赋初始值的操作。<br />正因如此，<code>__init__</code>方法通常也被称为初始化方法。</p><p>我们对上面的<code>Student</code>类稍作修改，给学生对象添加<code>name</code>（姓名）和<code>age</code>（年龄）两个属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;学习&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>正在学习<span class="hljs-subst">&#123;course_name&#125;</span>.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;玩耍&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>正在玩游戏.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>修改刚才创建对象和给对象发消息的代码，重新执行一次，看看程序的执行结果有什么变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调用Student类的构造器创建对象并传入初始化参数</span><br>stu1 = Student(<span class="hljs-string">&#x27;瓶子&#x27;</span>, <span class="hljs-number">20</span>)<br>stu2 = Student(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">25</span>)<br>stu1.study(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)    <span class="hljs-comment"># 瓶子正在学习Python程序设计.</span><br>stu2.play()                    <span class="hljs-comment"># 王大锤正在玩游戏.</span><br></code></pre></td></tr></table></figure><h3 id="面向对象的支柱"><a class="markdownIt-Anchor" href="#面向对象的支柱"></a> 面向对象的支柱</h3><p>面向对象编程有三大支柱，就是我们之前给大家划重点的时候圈出的三个词：<strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。后面两个概念在下一节课中会详细说明，这里我们先说一下什么是封装。<br />封装就是<strong>将数据（属性）和操作数据的方法封装在一个类中，对外隐藏实现细节，只暴露必要的接口</strong><br />打个比方就像汽车的发动机，里面有活塞，火花塞，连杆，曲轴等很多很多东西，但是只对外界暴露出几个接口，比如点火，踩油门加速。我们只需要知道如何使用加速点火的功能，其他的发动机自己解决，自己处理。<br />我们在类中定义的对象方法其实就是一种封装，这种封装可以让我们在创建对象之后，只需要给对象发送一个消息就可以执行方法中的代码，也就是说我们在只知道方法的名字和参数，不知道方法内部实现细节的情况下就完成了对方法的使用。</p><p>再举一个例子，假如要控制一个机器人帮我倒杯水，如果不使用面向对象编程，不做任何的封装，那么就需要向这个机器人发出一系列的指令，如站起来、向左转、向前走5步、拿起面前的水杯、向后转、向前走10步、弯腰、放下水杯、按下出水按钮、等待10秒、松开出水按钮、拿起水杯、向右转、向前走5步、放下水杯等，才能完成这个简单的操作，想想都觉得麻烦。<br />按照面向对象编程的思想，我们可以将倒水的操作封装到机器人的一个方法中，当需要机器人帮我们倒水的时候，只需要向机器人对象发出倒水的消息就可以了，这样做不是更好吗？</p><p>在很多场景下，面向对象编程其实就是一个三步走的问题。第一步定义类，第二步创建对象，第三步给对象发消息。当然，有的时候我们是不需要第一步的，因为我们想用的类可能已经存在了。<br />之前我们说过，Python内置的<code>list</code>、<code>set</code>、<code>dict</code>其实都是类，如果要创建列表、集合、字典对象，我们就不用自定义类了。<br />当然，有的类并不是 Python 标准库中直接提供的，它可能来自于第三方的代码，如何安装和使用三方代码在后续课程中会进行讨论。<br />在某些特殊的场景中，我们会用到名为“内置对象”的对象，所谓“内置对象”就是说上面三步走的第一步和第二步都不需要了，因为类已经存在而且对象已然创建过了，直接向对象发消息就可以了，这也就是我们常说的“开箱即用”。</p><h3 id="面向对象案例"><a class="markdownIt-Anchor" href="#面向对象案例"></a> 面向对象案例</h3><h4 id="例子1时钟"><a class="markdownIt-Anchor" href="#例子1时钟"></a> 例子1：时钟</h4><blockquote><p><strong>要求</strong>：定义一个类描述数字时钟，提供走字和显示时间的功能。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-comment"># 定义时钟类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, hour=<span class="hljs-number">0</span>, minute=<span class="hljs-number">0</span>, second=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string">        :param hour: 时</span><br><span class="hljs-string">        :param minute: 分</span><br><span class="hljs-string">        :param second: 秒</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.hour = hour<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">min</span> = minute<br>        <span class="hljs-variable language_">self</span>.sec = second<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.sec += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.sec == <span class="hljs-number">60</span>:<br>            <span class="hljs-variable language_">self</span>.sec = <span class="hljs-number">0</span><br>            <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">min</span> += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">min</span> == <span class="hljs-number">60</span>:<br>                <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">min</span> = <span class="hljs-number">0</span><br>                <span class="hljs-variable language_">self</span>.hour += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.hour == <span class="hljs-number">24</span>:<br>                    <span class="hljs-variable language_">self</span>.hour = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.hour:<span class="hljs-number">0</span>&gt;2d&#125;</span>:<span class="hljs-subst">&#123;self.<span class="hljs-built_in">min</span>:<span class="hljs-number">0</span>&gt;2d&#125;</span>:<span class="hljs-subst">&#123;self.sec:<span class="hljs-number">0</span>&gt;2d&#125;</span>&#x27;</span><br><br><br><span class="hljs-comment"># 创建时钟对象</span><br>clock = Clock(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">58</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 给时钟对象发消息读取时间</span><br>    <span class="hljs-built_in">print</span>(clock.show())<br>    <span class="hljs-comment"># 休眠1秒钟</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 给时钟对象发消息使其走字</span><br>    clock.run()<br></code></pre></td></tr></table></figure><h4 id="例子2平面上的点"><a class="markdownIt-Anchor" href="#例子2平面上的点"></a> 例子2：平面上的点</h4><blockquote><p><strong>要求</strong>：定义一个类描述平面上的点，提供计算到另一个点距离的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;平面上的点&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string">        :param x: 横坐标</span><br><span class="hljs-string">        :param y: 纵坐标</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.x, <span class="hljs-variable language_">self</span>.y = x, y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">distance_to</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算与另一个点的距离</span><br><span class="hljs-string">        :param other: 另一个点</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        dx = <span class="hljs-variable language_">self</span>.x - other.x<br>        dy = <span class="hljs-variable language_">self</span>.y - other.y<br>        <span class="hljs-keyword">return</span> (dx * dx + dy * dy) ** <span class="hljs-number">0.5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;(<span class="hljs-subst">&#123;self.x&#125;</span>, <span class="hljs-subst">&#123;self.y&#125;</span>)&#x27;</span><br><br><br>p1 = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>p2 = Point(<span class="hljs-number">6</span>, <span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(p1)  <span class="hljs-comment"># 调用对象的__str__方法</span><br><span class="hljs-built_in">print</span>(p2)<br><span class="hljs-built_in">print</span>(p1.distance_to(p2))<br></code></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>面向对象编程是一种非常流行的编程范式，除此之外还有<strong>指令式编程</strong>、<strong>函数式编程</strong>等编程范式。<br />由于现实世界是由对象构成的，而对象是可以接收消息的实体，所以<strong>面向对象编程更符合人类正常的思维习惯</strong>。<br />类是抽象的，对象是具体的，有了类就能创建对象，有了对象就可以接收消息，这就是面向对象编程的基础。<br />定义类的过程是一个抽象的过程，找到对象公共的属性属于数据抽象，找到对象公共的方法属于行为抽象。<br />抽象的过程是一个仁者见仁智者见智的过程，对同一类对象进行抽象可能会得到不同的结果。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>17.函数高级应用</title>
    <link href="/waterbottle/posts/938c/"/>
    <url>/waterbottle/posts/938c/</url>
    
    <content type="html"><![CDATA[<p>函数的高级使用方法</p><span id="more"></span><h2 id="函数高级应用"><a class="markdownIt-Anchor" href="#函数高级应用"></a> 函数高级应用</h2><p>在上一个章节中，我们探索了 Python 中的高阶函数，相信大家对函数的定义和应用有了更深刻的认知。本章我们继续为大家讲解函数相关的知识，一个是 Python 中的特色语法装饰器，一个是函数的递归调用。</p><h3 id="装饰器"><a class="markdownIt-Anchor" href="#装饰器"></a> 装饰器</h3><p>Python 语言中，装饰器是“<strong>用一个函数装饰另外一个函数并为其提供额外的能力</strong>”的语法现象。<br />装饰器本身是一个函数，它的参数是被装饰的函数，它的返回值是一个带有装饰功能的函数。通过前面的描述，相信大家已经听出来了，装饰器是一个高阶函数，它的参数和返回值都是函数。<br />但是，装饰器的概念对编程语言的初学者来说，还是让人头疼的，下面我们先通过一个简单的例子来说明装饰器的作用。假设有名为<code>downlaod</code>和<code>upload</code>的两个函数，分别用于文件的上传和下载，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;下载文件&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始下载<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.random() * <span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>下载完成.&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;上传文件&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始上传<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.random() * <span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>上传完成.&#x27;</span>)<br><br>    <br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码用休眠一段随机时间的方式模拟了下载和上传文件需要花费一定的时间，并没有真正的联网上传下载文件。</p></blockquote><p>现在有一个新的需求，我们希望知道调用<code>download</code>和<code>upload</code>函数上传下载文件到底用了多少时间，这应该如何实现呢？<br />相信很多小伙伴已经想到了，我们可以在函数开始执行的时候记录一个时间，在函数调用结束后记录一个时间，两个时间相减就可以计算出下载或上传的时间，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">start = time.time()<br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>end = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;花费时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.2</span>f&#125;</span>秒&#x27;</span>)<br>start = time.time()<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br>end = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;花费时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.2</span>f&#125;</span>秒&#x27;</span>)<br></code></pre></td></tr></table></figure><p>通过上面的代码，我们可以在下载和上传文件时记录下耗费的时间，但不知道大家是否注意到，上面记录时间、计算和显示执行时间的代码都是重复代码。<br />有编程经验的人都知道，<strong>重复的代码是万恶之源</strong>，那么有没有办法在不写重复代码的前提下，用一种简单优雅的方式记录下函数的执行时间呢？<br />在 Python 语言中，装饰器就是解决这类问题的最佳选择。通过装饰器语法，我们可以把跟原来的业务（上传和下载）没有关系计时功能的代码封装到一个函数中。<br />如果<code>upload</code>和<code>download</code>函数需要记录时间，我们直接把装饰器作用到这两个函数上即可。既然上面提到了，装饰器是一个高阶函数，它的参数和返回值都是函数，我们将记录时间的装饰器姑且命名为<code>record_time</code>，那么它的整体结构应该如下面的代码所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_time</span>(<span class="hljs-params">func</span>):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <br>        result = func(*args, **kwargs)<br>        <br>        <span class="hljs-keyword">return</span> result<br>    <br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><p>相信大家注意到了，<code>record_time</code>函数的参数<code>func</code>代表了一个被装饰的函数，函数里面定义的<code>wrapper</code>函数是带有装饰功能的函数，它会执行被装饰的函数<code>func</code>，它还需要返回在最后产生函数执行的返回值。<br />上面的代码我在第4行和第6行留下了两个空行，这意味着我们可以这些地方添加代码来实现额外的功能。<br /><code>record_time</code>函数最终会返回这个带有装饰功能的函数<code>wrapper</code>并通过它替代原函数<code>func</code>，当原函数<code>func</code>被<code>record_time</code>函数装饰后，我们调用它时其实调用的是<code>wrapper</code>函数，所以才获得了额外的能力。<br /><code>wrapper</code>函数的参数比较特殊，由于我们要用<code>wrapper</code>替代原函数<code>func</code>，但是我们又不清楚原函数<code>func</code>会接受哪些参数，所以我们就通过可变参数和关键字参数照单全收，然后在调用<code>func</code>的时候，原封不动的全部给它。<br />这里还要强调一下，Python 语言支持函数的嵌套定义，就像上面，我们可以在<code>record_time</code>函数中定义<code>wrapper</code>函数，这个操作在很多编程语言中并不被支持。</p><p>看懂这个结构后，我们就可以把记录时间的功能写到这个装饰器中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_time</span>(<span class="hljs-params">func</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># 在执行被装饰的函数之前记录开始时间</span><br>        start = time.time()<br>        <span class="hljs-comment"># 执行被装饰的函数并获取返回值</span><br>        result = func(*args, **kwargs)<br>        <span class="hljs-comment"># 在执行被装饰的函数之后记录结束时间</span><br>        end = time.time()<br>        <span class="hljs-comment"># 计算和显示被装饰函数的执行时间</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func.__name__&#125;</span>执行时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.2</span>f&#125;</span>秒&#x27;</span>)<br>        <span class="hljs-comment"># 返回被装饰函数的返回值</span><br>        <span class="hljs-keyword">return</span> result<br>    <br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><p>写装饰器虽然颇费周折，但是这是个一劳永逸的骚操作，将来再有记录函数执行时间的需求时，我们只需要添加上面的装饰器即可。<br />使用上面的装饰器函数有两种方式，第一种方式就是直接调用装饰器函数，传入被装饰的函数并获得返回值，我们可以用这个返回值直接替代原来的函数，那么在调用时就已经获得了装饰器提供的额外的能力（记录执行时间），大家试试下面的代码就明白了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">download = record_time(download)<br>upload = record_time(upload)<br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在 Python 中，使用装饰器很有更为便捷的<strong>语法糖</strong>（编程语言中添加的某种语法，这种语法对语言的功能没有影响，但是使用更加方便，代码的可读性也更强，我们将其称之为“语法糖”或“糖衣语法”）。<br />可以用<code>@装饰器函数</code>将装饰器函数直接放在被装饰的函数上，效果跟上面的代码相同。<br />我们把完整的代码为大家罗列出来，大家可以再看看我们是如何定义和使用装饰器的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_time</span>(<span class="hljs-params">func</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        result = func(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func.__name__&#125;</span>执行时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.2</span>f&#125;</span>秒&#x27;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始下载<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.random() * <span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>下载完成.&#x27;</span>)<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始上传<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.random() * <span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>上传完成.&#x27;</span>)<br><br><br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面的代码，我们通过装饰器语法糖为<code>download</code>和<code>upload</code>函数添加了装饰器，被装饰后的<code>download</code>和<code>upload</code>函数其实就是我们在装饰器中返回的<code>wrapper</code>函数，调用它们其实就是在调用<code>wrapper</code>函数，所以才有了记录函数执行时间的功能。<br />如果在代码的某些地方，我们想去掉装饰器的作用执行原函数，那么在定义装饰器函数的时候，需要做一点点额外的工作。<br />Python 标准库<code>functools</code>模块的<code>wraps</code>函数也是一个装饰器，我们将它放在<code>wrapper</code>函数上，这个装饰器可以帮我们保留被装饰之前的函数，这样在需要取消装饰器时，可以通过被装饰函数的<code>__wrapped__</code>属性获得被装饰之前的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_time</span>(<span class="hljs-params">func</span>):<br><br><span class="hljs-meta">    @wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        result = func(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func.__name__&#125;</span>执行时间: <span class="hljs-subst">&#123;end - start:<span class="hljs-number">.2</span>f&#125;</span>秒&#x27;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始下载<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.random() * <span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>下载完成.&#x27;</span>)<br><br><br><span class="hljs-meta">@record_time</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开始上传<span class="hljs-subst">&#123;filename&#125;</span>.&#x27;</span>)<br>    time.sleep(random.random() * <span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>上传完成.&#x27;</span>)<br><br><br><span class="hljs-comment"># 调用装饰后的函数会记录执行时间</span><br>download(<span class="hljs-string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)<br>upload(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br><span class="hljs-comment"># 取消装饰器的作用不记录执行时间</span><br>download.__wrapped__(<span class="hljs-string">&#x27;MySQL必知必会.pdf&#x27;</span>)<br>upload.__wrapped__(<span class="hljs-string">&#x27;Python从新手到大师.pdf&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>装饰器函数本身也可以参数化</strong>，简单的说就是装饰器也是可以通过调用者传入的参数来进行定制的，这个知识点我们在后面用到的时候再为大家讲解。</p><h3 id="递归调用"><a class="markdownIt-Anchor" href="#递归调用"></a> 递归调用</h3><p>Python 中允许函数嵌套定义，也允许函数之间相互调用，而且一个函数还可以直接或间接的调用自身。函数自己调用自己称为递归调用，那么递归调用有什么用处呢？<br />现实中，有很多问题的定义本身就是一个递归定义，例如我们之前讲到的阶乘，非负整数<code>N</code>的阶乘是<code>N</code>乘以<code>N-1</code>的阶乘，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>N</mi><mo stretchy="false">!</mo><mo>=</mo><mi>N</mi><mo>×</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{N! = N \times (N-1)!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span></span> ，定义的左边和右边都出现了阶乘的概念，所以这是一个递归定义。<br />既然如此，我们可以使用递归调用的方式来写一个求阶乘的函数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> num * fac(num - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>上面的代码中，<code>fac</code>函数中又调用了<code>fac</code>函数，这就是所谓的递归调用。代码第2行的<code>if</code>条件叫做递归的收敛条件，简单的说就是什么时候要结束函数的递归调用，在计算阶乘时，如果计算到<code>0</code>或<code>1</code>的阶乘，就停止递归调用，直接返回<code>1</code>；代码第4行的<code>num * fac(num - 1)</code>是递归公式，也就是阶乘的递归定义。</p><p>下面，我们简单的分析下，如果用<code>fac(5)</code>计算<code>5</code>的阶乘，整个过程会是怎样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 递归调用函数入栈</span><br><span class="hljs-comment"># 5 * fac(4)</span><br><span class="hljs-comment"># 5 * (4 * fac(3))</span><br><span class="hljs-comment"># 5 * (4 * (3 * fac(2)))</span><br><span class="hljs-comment"># 5 * (4 * (3 * (2 * fac(1))))</span><br><span class="hljs-comment"># 停止递归函数出栈</span><br><span class="hljs-comment"># 5 * (4 * (3 * (2 * 1)))</span><br><span class="hljs-comment"># 5 * (4 * (3 * 2))</span><br><span class="hljs-comment"># 5 * (4 * 6)</span><br><span class="hljs-comment"># 5 * 24</span><br><span class="hljs-comment"># 120</span><br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">5</span>))    <span class="hljs-comment"># 120</span><br></code></pre></td></tr></table></figure><p>注意，函数调用会通过内存中称为“栈”（stack）的数据结构来保存当前代码的执行现场，函数调用结束后会通过这个栈结构恢复之前的执行现场。<br />栈是一种先进后出的数据结构，这也就意味着最早入栈的函数最后才会返回，而最后入栈的函数会最先返回。<br />例如调用一个名为<code>a</code>的函数，函数<code>a</code>的执行体中又调用了函数<code>b</code>，函数<code>b</code>的执行体中又调用了函数<code>c</code>，那么最先入栈的函数是<code>a</code>，最先出栈的函数是<code>c</code>。每进入一个函数调用，栈就会增加一层栈帧（stack frame），栈帧就是我们刚才提到的保存当前代码执行现场的结构；每当函数调用结束后，栈就会减少一层栈帧。<br />通常，内存中的栈空间很小，因此递归调用的次数如果太多，会导致栈溢出（stack overflow），所以<strong>递归调用一定要确保能够快速收敛</strong>。我们可以尝试执行<code>fac(5000)</code>，看看是不是会提示<code>RecursionError</code>错误，错误消息为：<code>maximum recursion depth exceeded in comparison</code>（超出最大递归深度），其实就是发生了栈溢出。</p><p>如果我们使用官方的 Python 解释器（CPython），默认将函数调用的栈结构最大深度设置为<code>1000</code>层。<br />如果超出这个深度，就会发生上面说的<code>RecursionError</code>。当然，我们可以使用<code>sys</code>模块的<code>setrecursionlimit</code>函数来改变递归调用的最大深度。<br />但是我们不建议这样做，因为让递归快速收敛才是我们应该做的事情，否则就应该考虑使用循环递推而不是递归。</p><p>再举一个之前讲过的生成斐波那契数列的例子，因为斐波那契数列前两个数都是<code>1</code>，从第三个数开始，每个数是前两个数相加的和，可以记为<code>f(n) = f(n - 1) + f(n - 2)</code>，很显然这又是一个递归的定义，所以我们可以用下面的递归调用函数来计算第<code>n</code>个斐波那契数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib1</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> fib1(n - <span class="hljs-number">1</span>) + fib1(n - <span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">21</span>):<br>    <span class="hljs-built_in">print</span>(fib1(i))<br></code></pre></td></tr></table></figure><p>需要提醒大家，上面计算斐波那契数的代码虽然看起来非常简单明了，但执行性能是比较糟糕的。大家可以试一试，把上面代码<code>for</code>循环中<code>range</code>函数的第二个参数修改为<code>51</code>，即输出前50个斐波那契数，看看需要多长时间。<br />至于为什么这么慢，大家可以自己思考一下原因。很显然，直接使用循环递推的方式获得斐波那契数列是更好的选择，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib2</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>    <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p>除此以外，我们还可以使用 Python 标准库中<code>functools</code>模块的<code>lru_cache</code>函数来优化上面的递归代码。<br /><code>lru_cache</code>函数是一个装饰器函数，我们将其置于上面的函数<code>fib1</code>之上，它可以缓存该函数的执行结果从而避免在递归调用的过程中产生大量的重复运算，这样代码的执行性能就有“飞一般”的提升。<br />大家可以尝试输出前50个斐波那契数，看看加上装饰器以后代码需要执行多长时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> lru_cache<br><br><br><span class="hljs-meta">@lru_cache()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib1</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> fib1(n - <span class="hljs-number">1</span>) + fib1(n - <span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">51</span>):<br>    <span class="hljs-built_in">print</span>(i, fib1(i))<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：<code>lru_cache</code>函数是一个带参数的装饰器，所以上面第4行代码使用装饰器语法糖时，<code>lru_cache</code>后面要跟上圆括号。<br /><code>lru_cache</code>函数有一个非常重要的参数叫<code>maxsize</code>，它可以用来定义缓存空间的大小，默认值是128。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>16.函数使用进阶</title>
    <link href="/waterbottle/posts/3ff0/"/>
    <url>/waterbottle/posts/3ff0/</url>
    
    <content type="html"><![CDATA[<p>函数的进阶使用</p><span id="more"></span><h2 id="函数使用进阶"><a class="markdownIt-Anchor" href="#函数使用进阶"></a> 函数使用进阶</h2><p>我们继续探索定义和使用函数的相关知识。通过前面的学习，我们知道了函数有自变量（参数）和因变量（返回值），自变量可以是任意的数据类型，因变量也可以是任意的数据类型，那么这里就有一个小问题，我们能不能用函数作为函数的参数，用函数作为函数的返回值？<br />这里我们先说结论：<strong>Python 中的函数是“一等函数”</strong>，所谓“一等函数”指的就是函数可以赋值给变量，函数可以作为函数的参数，函数也可以作为函数的返回值。把一个函数作为其他函数的参数或返回值的用法，我们通常称之为“高阶函数”。</p><h3 id="高阶函数"><a class="markdownIt-Anchor" href="#高阶函数"></a> 高阶函数</h3><p>我们回到之前讲过的一个例子，设计一个函数，传入任意多个参数，对其中<code>int</code>类型或<code>float</code>类型的元素实现求和操作。我们对之前的代码稍作调整，让整个代码更加紧凑一些，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    items = <span class="hljs-built_in">list</span>(args) + <span class="hljs-built_in">list</span>(kwargs.values())<br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(item) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result += item<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>如果我们希望上面的<code>calc</code>函数不仅仅可以做多个参数的求和，还可以实现更多的甚至是自定义的二元运算，我们该怎么做呢？<br />上面的代码只能求和是因为函数中使用了<code>+=</code>运算符，这使得函数跟加法运算形成了耦合关系，如果能解除这种耦合关系，函数的通用性和灵活性就会更好。<br />解除耦合的办法就是将<code>+</code>运算符变成函数调用，并将其设计为函数的参数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">init_value, op_func, *args, **kwargs</span>):<br>    items = <span class="hljs-built_in">list</span>(args) + <span class="hljs-built_in">list</span>(kwargs.values())<br>    result = init_value<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(item) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            result = op_func(result, item)<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>注意，上面的函数增加了两个参数，其中<code>init_value</code>代表运算的初始值，<code>op_func</code>代表二元运算函数，为了调用修改后的函数，我们先定义做加法和乘法运算的函数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x * y<br></code></pre></td></tr></table></figure><p>如果要做求和的运算，我们可以按照下面的方式调用<code>calc</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">0</span>, add, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 15</span><br></code></pre></td></tr></table></figure><p>如果要做求乘积运算，我们可以按照下面的方式调用<code>calc</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, mul, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 120 </span><br></code></pre></td></tr></table></figure><p>上面的<code>calc</code>函数通过将运算符变成函数的参数，实现了跟加法运算耦合，这是一种非常高明和实用的编程技巧，但对于最初学者来说可能会觉得难以理解，建议大家细品一下。<br />需要注意上面的代码中，将函数作为参数传入其他函数和直接调用函数是有显著的区别的，<strong>调用函数需要在函数名后面跟上圆括号，而把函数作为参数时只需要函数名即可</strong>。</p><p>如果我们没有提前定义好<code>add</code>和<code>mul</code>函数，也可以使用 Python 标准库中的<code>operator</code>模块提供的<code>add</code>和<code>mul</code>函数，它们分别代表了做加法和做乘法的二元运算，我们拿过来直接使用即可，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> operator<br><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">0</span>, operator.add, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 15</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>, operator.mul, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 120</span><br></code></pre></td></tr></table></figure><p>Python 内置函数中有不少高阶函数，我们前面提到过的<code>filter</code>和<code>map</code>函数就是高阶函数，前者可以实现对序列中元素的过滤，后者可以实现对序列中元素的映射，例如我们要去掉一个整数列表中的奇数，并对所有的偶数求平方得到一个新的列表，就可以直接使用这两个函数来做到，具体的做法是如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_even</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断num是不是偶数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;求平方&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> num ** <span class="hljs-number">2</span><br><br><br>old_nums = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>new_nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(square, <span class="hljs-built_in">filter</span>(is_even, old_nums)))<br><span class="hljs-built_in">print</span>(new_nums)  <span class="hljs-comment"># [144, 64, 3600, 2704]</span><br></code></pre></td></tr></table></figure><p>当然，要完成上面代码的功能，也可以使用列表生成式，列表生成式的做法更为简单优雅。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">old_nums = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>new_nums = [num ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> old_nums <span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(new_nums)  <span class="hljs-comment"># [144, 64, 3600, 2704]</span><br></code></pre></td></tr></table></figure><p>我们再来讨论一个内置函数<code>sorted</code>，它可以实现对容器型数据类型（如：列表、字典等）元素的排序。<br />我们之前讲过<code>list</code>类型的<code>sort</code>方法，它实现了对列表元素的排序，<code>sorted</code>函数从功能上来讲跟列表的<code>sort</code>方法没有区别，但它会返回排序后的列表对象，而不是直接修改原来的列表。<br />这一点我们称为<strong>函数的无副作用设计</strong>，也就是说调用函数除了产生返回值以外，不会对程序的状态或外部环境产生任何其他的影响。使用<code>sorted</code>函数排序时，可以通过高阶函数的形式自定义排序的规则，我们通过下面的例子加以说明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">old_strings = [<span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;zoo&#x27;</span>, <span class="hljs-string">&#x27;waxberry&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>]<br>new_strings = <span class="hljs-built_in">sorted</span>(old_strings)<br><span class="hljs-built_in">print</span>(new_strings)  <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;in&#x27;, &#x27;pear&#x27;, waxberry&#x27;, &#x27;zoo&#x27;]</span><br></code></pre></td></tr></table></figure><p>上面的代码对大家来说并不陌生，但是如果希望根据字符串的长度而不是字母表顺序对列表元素排序，我们可以向<code>sorted</code>函数传入一个名为<code>key</code>的参数，将<code>key</code>参数赋值为获取字符串长度的函数<code>len</code>。<br />这个函数我们在之前的课程中讲到过，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">old_strings = [<span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;zoo&#x27;</span>, <span class="hljs-string">&#x27;waxberry&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>]<br>new_strings = <span class="hljs-built_in">sorted</span>(old_strings, key=<span class="hljs-built_in">len</span>)<br><span class="hljs-built_in">print</span>(new_strings)  <span class="hljs-comment"># [&#x27;in&#x27;, &#x27;zoo&#x27;, &#x27;pear&#x27;, &#x27;apple&#x27;, &#x27;waxberry&#x27;]</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：列表类型的<code>sort</code>方法也有同样的<code>key</code>参数，有兴趣的读者可以自行尝试。</p></blockquote><h3 id="lambda函数"><a class="markdownIt-Anchor" href="#lambda函数"></a> Lambda函数</h3><p>在使用高阶函数的时候，如果作为参数或者返回值的函数本身非常简单，一行代码就能够完成，也不需要考虑对函数的复用，那么我们可以使用 lambda 函数。<br />Python 中的 lambda 函数是没有的名字函数，所以很多人也把它叫做<strong>匿名函数</strong>，lambda 函数只能有一行代码，代码中的表达式产生的运算结果就是这个匿名函数的返回值。<br />之前的代码中，我们写的<code>is_even</code>和<code>square</code>函数都只有一行代码，我们可以考虑用 lambda 函数来替换掉它们，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">old_nums = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>new_nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, old_nums)))<br><span class="hljs-built_in">print</span>(new_nums)  <span class="hljs-comment"># [144, 64, 3600, 2704]</span><br></code></pre></td></tr></table></figure><p>通过上面的代码可以看出，定义 lambda 函数的关键字是<code>lambda</code>，后面跟函数的参数，如果有多个参数用逗号进行分隔；<br />冒号后面的部分就是函数的执行体，通常是一个表达式，表达式的运算结果就是 lambda 函数的返回值，不需要写<code>return</code> 关键字。</p><p>前面我们说过，Python 中的函数是“一等函数”，函数是可以直接赋值给变量的。在学习了 lambda 函数之后，前面我们写过的一些函数就可以用一行代码来实现它们了，大家可以看看能否理解下面的求阶乘和判断素数的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> operator<br><br><span class="hljs-comment"># 用一行代码实现计算阶乘的函数</span><br>fac = <span class="hljs-keyword">lambda</span> n: functools.reduce(operator.mul, <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>), <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 用一行代码实现判断素数的函数</span><br>is_prime = <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">all</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f: x % f, <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(x ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>)))<br><br><span class="hljs-comment"># 调用Lambda函数</span><br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">6</span>))        <span class="hljs-comment"># 720</span><br><span class="hljs-built_in">print</span>(is_prime(<span class="hljs-number">37</span>))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>提示1</strong>：上面使用的<code>reduce</code>函数是 Python 标准库<code>functools</code>模块中的函数，它可以实现对一组数据的归约操作，类似于我们之前定义的<code>calc</code>函数，第一个参数是代表运算的函数，第二个参数是运算的数据，第三个参数是运算的初始值。很显然，<code>reduce</code>函数也是高阶函数，它和<code>filter</code>函数、<code>map</code>函数一起构成了处理数据中非常关键的三个动作：<strong>过滤</strong>、<strong>映射</strong>和<strong>归约</strong>。</p><p><strong>提示2</strong>：上面判断素数的 lambda 函数通过<code>range</code>函数构造了从 2 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msqrt><mi>x</mi></msqrt></mstyle></mrow><annotation encoding="application/x-tex">\small{\sqrt{x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9360000000000002em;vertical-align:-0.215748em;"></span><span class="mord sizing reset-size6 size5"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">x</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span></span> 的范围，检查这个范围有没有<code>x</code>的因子。<code>all</code>函数也是 Python 内置函数，如果传入的序列中所有的布尔值都是<code>True</code>，<code>all</code>函数返回<code>True</code>，否则<code>all</code>函数返回<code>False</code>。</p></blockquote><h3 id="偏函数"><a class="markdownIt-Anchor" href="#偏函数"></a> 偏函数</h3><p>偏函数是指固定函数的某些参数，生成一个新的函数，这样就无需在每次调用函数时都传递相同的参数。在 Python 语言中，我们可以使用<code>functools</code>模块的<code>partial</code>函数来创建偏函数。例如，<code>int</code>函数在默认情况下可以将字符串视为十进制整数进行类型转换，如果我们修修改它的<code>base</code>参数，就可以定义出三个新函数，分别用于将二进制、八进制、十六进制字符串转换为整数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><br>int2 = functools.partial(<span class="hljs-built_in">int</span>, base=<span class="hljs-number">2</span>)<br>int8 = functools.partial(<span class="hljs-built_in">int</span>, base=<span class="hljs-number">8</span>)<br>int16 = functools.partial(<span class="hljs-built_in">int</span>, base=<span class="hljs-number">16</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;1001&#x27;</span>))    <span class="hljs-comment"># 1001</span><br><br><span class="hljs-built_in">print</span>(int2(<span class="hljs-string">&#x27;1001&#x27;</span>))   <span class="hljs-comment"># 9</span><br><span class="hljs-built_in">print</span>(int8(<span class="hljs-string">&#x27;1001&#x27;</span>))   <span class="hljs-comment"># 513</span><br><span class="hljs-built_in">print</span>(int16(<span class="hljs-string">&#x27;1001&#x27;</span>))  <span class="hljs-comment"># 4097</span><br></code></pre></td></tr></table></figure><p>不知大家是否注意到，<code>partial</code>函数的第一个参数和返回值都是函数，它将传入的函数处理成一个新的函数返回。通过构造偏函数，我们可以结合实际的使用场景将原函数变成使用起来更为便捷的新函数，不知道大家有没有觉得这波操作很有意思。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>15.函数应用练习</title>
    <link href="/waterbottle/posts/f6dc/"/>
    <url>/waterbottle/posts/f6dc/</url>
    
    <content type="html"><![CDATA[<p>练习函数的构建和使用方法</p><span id="more"></span><h2 id="函数应用实战"><a class="markdownIt-Anchor" href="#函数应用实战"></a> 函数应用实战</h2><h3 id="例子1随机验证码"><a class="markdownIt-Anchor" href="#例子1随机验证码"></a> 例子1：随机验证码</h3><p>设计一个生成随机验证码的函数，验证码由数字和英文大小写字母构成，长度可以通过参数设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br>ALL_CHARS = string.digits + string.ascii_letters<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_code</span>(<span class="hljs-params">*, code_len=<span class="hljs-number">4</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成指定长度的验证码</span><br><span class="hljs-string">    :param code_len: 验证码的长度(默认4个字符)</span><br><span class="hljs-string">    :return: 由大小写英文字母和数字构成的随机验证码字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(ALL_CHARS, k=code_len))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明1</strong>：<code>string</code>模块的<code>digits</code>代表0到9的数字构成的字符串<code>'0123456789'</code>，<code>string</code>模块的<code>ascii_letters</code>代表大小写英文字母构成的字符串<code>'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>。</p><p><strong>说明2</strong>：<code>random</code>模块的<code>sample</code>和<code>choices</code>函数都可以实现随机抽样，<code>sample</code>实现无放回抽样，这意味着抽样取出的元素是不重复的；<code>choices</code>实现有放回抽样，这意味着可能会重复选中某些元素。这两个函数的第一个参数代表抽样的总体，而参数<code>k</code>代表样本容量，需要说明的是<code>choices</code>函数的参数<code>k</code>是一个命名关键字参数，在传参时必须指定参数名。</p></blockquote><p>可以用下面的代码生成5组随机验证码来测试上面的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(generate_code()) <br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">eqTp</span><br>9lnP<br>L3VL<br>xg8o<br>WIK4<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(generate_code(code_len=<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">vLHVkz<br><span class="hljs-number">4</span>Tba<span class="hljs-number">3</span><span class="hljs-keyword">c</span><br><span class="hljs-number">9</span>qXWjp<br>YXQhmz<br>sT<span class="hljs-number">0</span>Bb<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：我们设计的<code>generate_code</code>函数的参数是命名关键字参数，由于它有默认值，可以不给它传值，使用默认值4。如果需要给函数传入参数，必须指定参数名<code>code_len</code>。</p></blockquote><h3 id="例子2判断素数"><a class="markdownIt-Anchor" href="#例子2判断素数"></a> 例子2：判断素数</h3><p>设计一个判断给定的大于1的正整数是不是质数的函数。质数是只能被1和自身整除的正整数（大于1），如果一个大于 1 的正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>N</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.614997em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span> 是质数，那就意味着在 2 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{N-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.689994em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span> 之间都没有它的因子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断一个正整数是不是质数</span><br><span class="hljs-string">    :param num: 大于1的正整数</span><br><span class="hljs-string">    :return: 如果num是质数返回True，否则返回False</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(num ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明1</strong>：上面<code>is_prime</code>函数的参数<code>num</code>后面的<code>: int</code>用来标注参数的类型，虽然它对代码的执行结果不产生任何影响，但是很好的增强了代码的可读性。<br />同理，参数列表后面的<code>-&gt; bool</code>用来标注函数返回值的类型，它也不会对代码的执行结果产生影响，但是却让我们清楚的知道，调用函数会得到一个布尔值，要么是<code>True</code>，要么是<code>False</code>。</p><p><strong>说明2</strong>：上面的循环并不需要从 2 循环到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{N-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.689994em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span> ，因为如果循环进行到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msqrt><mi>N</mi></msqrt></mstyle></mrow><annotation encoding="application/x-tex">\small{\sqrt{N}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936em;vertical-align:-0.10200149999999997em;"></span><span class="mord sizing reset-size6 size5"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span></span> 时，还没有找到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>N</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.614997em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span>的因子，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msqrt><mi>N</mi></msqrt></mstyle></mrow><annotation encoding="application/x-tex">\small{\sqrt{N}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936em;vertical-align:-0.10200149999999997em;"></span><span class="mord sizing reset-size6 size5"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span></span> 之后也不会出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>N</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.614997em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span> 的因子。</p></blockquote><h3 id="例子3最大公约数和最小公倍数"><a class="markdownIt-Anchor" href="#例子3最大公约数和最小公倍数"></a> 例子3：最大公约数和最小公倍数</h3><p>设计计算两个正整数最大公约数和最小公倍数的函数。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 的最大公约数是能够同时整除 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 的最大整数，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 互质，那么它们的最大公约数为 1；<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 的最小公倍数是能够同时被 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 整除的最小正整数，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 互质，那么它们的最小公倍数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>x</mi><mo>×</mo><mi>y</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{x \times y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6999930000000001em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 。<br />需要提醒大家注意的是，计算最大公约数和最小公倍数是两个不同的功能，应该设计成两个函数，而不是把两个功能放到同一个函数中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lcm</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;求最小公倍数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> x * y // gcd(x, y)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;求最大公约数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> y % x != <span class="hljs-number">0</span>:<br>        x, y = y % x, x<br>    <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：函数之间可以相互调用，上面求最小公倍数的<code>lcm</code>函数调用了求最大公约数的<code>gcd</code>函数，通过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>x</mi><mo>×</mo><mi>y</mi></mrow><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{x \times y}{ gcd(x, y)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.374439em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">d</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 来计算最小公倍数。</p></blockquote><h3 id="例子4数据统计"><a class="markdownIt-Anchor" href="#例子4数据统计"></a> 例子4：数据统计</h3><p>假设样本数据保存一个列表中，设计计算样本数据描述性统计信息的函数。描述性统计信息通常包括：算术平均值、中位数、极差（最大值和最小值的差）、方差、标准差、变异系数等，计算公式如下所示。</p><p>样本均值（sample mean）：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub></mrow><mi>n</mi></mfrac><mo>=</mo><mfrac><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\bar{x} = \frac{\sum_{i=1}^{n}x_{i}}{n} = \frac{x_{1}+x_{2}+\cdots +x_{n}}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.180002em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.494002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897100000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>样本方差（sample variance）：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>s</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">s^2 = \frac {\sum_{i=1}^{n}(x_i - \bar{x})^2} {n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.273148em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5038179999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897100000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>样本标准差（sample standard deviation）：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mo>=</mo><msqrt><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></msqrt></mrow><annotation encoding="application/x-tex">s = \sqrt{\frac{\sum_{i=1}^{n}(x_i - \bar{x})^2}{n-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.04em;vertical-align:-1.0437890000000003em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9962109999999997em;"><span class="svg-align" style="top:-5em;"><span class="pstrut" style="height:5em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.494002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897100000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.9562109999999997em;"><span class="pstrut" style="height:5em;"></span><span class="hide-tail" style="min-width:1.02em;height:3.08em;"><svg width='400em' height='3.08em' viewBox='0 0 400000 3240' preserveAspectRatio='xMinYMin slice'><path d='M473,2793c339.3,-1799.3,509.3,-2700,510,-2702 l0 -0c3.3,-7.3,9.3,-11,18,-11 H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606zM1001 80h400000v40H1017.7z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0437890000000003em;"><span></span></span></span></span></span></span></span></span></span></p><p>变异系数（coefficient of sample variation）：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>V</mi><mo>=</mo><mfrac><mi>s</mi><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover></mfrac></mrow><annotation encoding="application/x-tex">CV = \frac{s}{\bar{x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ptp</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;极差（全距）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(data) - <span class="hljs-built_in">min</span>(data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mean</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;算术平均&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(data) / <span class="hljs-built_in">len</span>(data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">median</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;中位数&quot;&quot;&quot;</span><br>    temp, size = <span class="hljs-built_in">sorted</span>(data), <span class="hljs-built_in">len</span>(data)<br>    <span class="hljs-keyword">if</span> size % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> temp[size // <span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> mean(temp[size // <span class="hljs-number">2</span> - <span class="hljs-number">1</span>:size // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">var</span>(<span class="hljs-params">data, ddof=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;方差&quot;&quot;&quot;</span><br>    x_bar = mean(data)<br>    temp = [(num - x_bar) ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> data]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(temp) / (<span class="hljs-built_in">len</span>(temp) - ddof)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">std</span>(<span class="hljs-params">data, ddof=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;标准差&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> var(data, ddof) ** <span class="hljs-number">0.5</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cv</span>(<span class="hljs-params">data, ddof=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;变异系数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> std(data, ddof) / mean(data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;输出描述性统计信息&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;均值: <span class="hljs-subst">&#123;mean(data)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;中位数: <span class="hljs-subst">&#123;median(data)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;极差: <span class="hljs-subst">&#123;ptp(data)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;方差: <span class="hljs-subst">&#123;var(data)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;标准差: <span class="hljs-subst">&#123;std(data)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;变异系数: <span class="hljs-subst">&#123;cv(data)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明1</strong>：中位数是将数据按照升序或降序排列后位于中间的数，它描述了数据的中等水平。中位数的计算分两种情况：当数据体量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>为奇数时，中位数是位于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n + 1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 位置的元素；当数据体量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>n</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span></span></span></span></span> 为偶数时，中位数是位于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2} + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 两个位置元素的均值。</p><p><strong>说明2</strong>：计算方差和标准差的函数中有一个名为<code>ddof</code>的参数，它代表了可以调整的自由度，默认值为 1。在计算样本方差和样本标准差时，需要进行自由度校正；如果要计算总体方差和总体标准差，可以将<code>ddof</code>参数赋值为 0，即不需要进行自由度校正。</p><p><strong>说明3</strong>：<code>describe</code>函数将上面封装好的统计函数组装到一起，用于输出数据的描述性统计信息。事实上，Python 标准库中有一个名为<code>statistics</code>的模块，它已经把获取描述性统计信息的函数封装好了，有兴趣的读者可以自行了解。</p></blockquote><h3 id="例子5双色球随机选号"><a class="markdownIt-Anchor" href="#例子5双色球随机选号"></a> 例子5：双色球随机选号</h3><p>我们用函数重构之前讲过的双色球随机选号的例子（<a href="09.%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%88%97%E8%A1%A8-2.md">09.常用数据结构之列表-2.md</a>），将生成随机号码和输出一组号码的功能分别封装到两个函数中，然后通过调用函数实现机选<code>N</code>注号码的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">双色球随机选号程序</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">Version: 1.3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>RED_BALLS = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">34</span>)]<br>BLUE_BALLS = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>)]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choose</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成一组随机号码</span><br><span class="hljs-string">    :return: 保存随机号码的列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    selected_balls = random.sample(RED_BALLS, <span class="hljs-number">6</span>)<br>    selected_balls.sort()<br>    selected_balls.append(random.choice(BLUE_BALLS))<br>    <span class="hljs-keyword">return</span> selected_balls<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">balls</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    格式输出一组号码</span><br><span class="hljs-string">    :param balls: 保存随机号码的列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> balls[:-<span class="hljs-number">1</span>]:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[031m<span class="hljs-subst">&#123;ball:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[034m<span class="hljs-subst">&#123;balls[-<span class="hljs-number">1</span>]:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>)<br><br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;生成几注号码: &#x27;</span>))<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    display(choose())<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：大家看看<code>display(choose())</code>这行代码，这里我们先通过<code>choose</code>函数获得一组随机号码，然后把<code>choose</code>函数的返回值作为<code>display</code>函数的参数，通过<code>display</code>函数将选中的随机号码显示出来。重构之后的代码逻辑非常清晰，代码的可读性更强了。<br />如果有人为你封装了这两个函数，你仅仅是函数的调用者，其实你根本不用关心<code>choose</code>函数和<code>display</code>函数的内部实现，你只需要知道调用<code>choose</code>函数可以生成一组随机号码，而调用<code>display</code>函数传入一个列表，就可以输出这组号码。<br />将来我们使用各种各样的 Python 三方库时，我们也根本不关注它们的底层实现，我们需要知道的仅仅是调用哪个函数可以解决问题。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>14.函数和模块</title>
    <link href="/waterbottle/posts/1ca4/"/>
    <url>/waterbottle/posts/1ca4/</url>
    
    <content type="html"><![CDATA[<p>了解函数和模块</p><span id="more"></span><h2 id="函数和模块"><a class="markdownIt-Anchor" href="#函数和模块"></a> 函数和模块</h2><p>在讲解本节课的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><msub><mi>x</mi><mn>4</mn></msub><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">x_{1} + x_{2} + x_{3} + x_{4} = 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span></span></p><p>你可能已经想到了，这个问题其实等同于将 8 个苹果分成四组且每组至少一个苹果有多少种方案，也等价于在分隔 8 个苹果的 7 个间隙之间放入三个隔断将苹果分成四组有多少种方案，所以答案是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><msubsup><mi>C</mi><mn>7</mn><mn>3</mn></msubsup><mo>=</mo><mn>35</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{C_{7}^{3} = 35}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.935664em;vertical-align:-0.2223em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.353em;margin-left:-0.07153em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord">5</span></span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msubsup><mi>C</mi><mn>7</mn><mn>3</mn></msubsup></mstyle></mrow><annotation encoding="application/x-tex">\small{C_{7}^{3}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.935664em;vertical-align:-0.2223em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.353em;margin-left:-0.07153em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span> 代表 7 选 3 的组合数，其计算公式如下所示。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>C</mi><mi>m</mi><mi>n</mi></msubsup><mo>=</mo><mfrac><mrow><mi>m</mi><mo stretchy="false">!</mo></mrow><mrow><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">C_m^n = \frac {m!} {n!(m-n)!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9613919999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>根据之前学习的知识，我们可以用循环做累乘的方式分别计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>m</mi><mo stretchy="false">!</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{m!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.624996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">m</span><span class="mclose">!</span></span></span></span></span> 、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{n!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.624996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{(m-n)!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span></span> ，然后再通过除法运算得到组合数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msubsup><mi>C</mi><mi>m</mi><mi>n</mi></msubsup></mstyle></mrow><annotation encoding="application/x-tex">\small{C_{m}^{n}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.837297em;vertical-align:-0.2223em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.65004em;"><span style="top:-2.353em;margin-left:-0.07153em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span> ，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入m和n，计算组合数C(m,n)的值</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br><span class="hljs-comment"># 计算m的阶乘</span><br>fm = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>    fm *= num<br><span class="hljs-comment"># 计算n的阶乘</span><br>fn = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    fn *= num<br><span class="hljs-comment"># 计算m-n的阶乘</span><br>fk = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m - n + <span class="hljs-number">1</span>):<br>    fk *= num<br><span class="hljs-comment"># 计算C(M,N)的值</span><br><span class="hljs-built_in">print</span>(fm // fn // fk)<br></code></pre></td></tr></table></figure><p>输入：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">35<br></code></pre></td></tr></table></figure><p>不知大家是否注意到，上面的代码中我们做了三次求阶乘的操作，虽然 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>m</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">m</span></span></span></span></span> 、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>n</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span></span></span></span></span> 、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>m</mi><mo>−</mo><mi>n</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{m - n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.599994em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 的值各不相同，但是三段代码并没有实质性的区别，属于重复代码。<br />世界级的编程大师<em>Martin Fowler</em>曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”。要写出高质量的代码，首先就要解决重复代码的问题。<br />对于上面的代码来说，我们可以将求阶乘的功能封装到一个称为“函数”的代码块中，在需要计算阶乘的地方，我们只需“调用函数”即可实现对求阶乘功能的复用。</p><h3 id="定义函数"><a class="markdownIt-Anchor" href="#定义函数"></a> 定义函数</h3><p>数学上的函数通常形如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{y = f(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>z</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{z = g(x, y)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span> 这样的形式，在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{y = f(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span> 中， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>f</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.799992em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></span> 是函数的名字， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 是函数的自变量， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 是函数的因变量；而在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>z</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{z = g(x, y)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span> 中， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>g</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span></span> 是函数名， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span> 是函数的自变量， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>z</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span> 是函数的因变量。<br />Python 中的函数跟这个结构是一致的，每个函数都有自己的名字、自变量和因变量。我们通常把 Python 函数的自变量称为函数的参数，而因变量称为函数的返回值。</p><p>Python 中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也应该有一个漂亮的名字，命名规则跟变量的命名规则是一样的。<br />在函数名后面的圆括号中可以设置函数的参数，也就是我们刚才说的函数的自变量，而函数执行完成后，我们会通过<code>return</code>关键字来返回函数的执行结果，这就是我们刚才说的函数的因变量。<br />如果函数中没有<code>return</code>语句，那么函数会返回代表空值的<code>None</code>。另外，函数也可以没有自变量（参数），但是函数名后面的圆括号是必须有的。<br />一个函数要做的事情（要执行的代码），是通过代码缩进的方式放到函数定义行之后，跟之前分支和循环结构的代码块类似，如下图所示。</p><style>.qjlodrumijyw{zoom:45%;}</style><img src="/waterbottle/posts/1ca4/function_definition.png" class="qjlodrumijyw"><p>下面，我们将之前代码中求阶乘的操作放到一个函数中，通过这种方式来重构上面的代码。<strong>所谓重构，是在不影响代码执行结果的前提下对代码的结构进行调整</strong>，重构之后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入m和n，计算组合数C(m,n)的值</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 通过关键字def定义求阶乘的函数</span><br><span class="hljs-comment"># 自变量（参数）num是一个非负整数</span><br><span class="hljs-comment"># 因变量（返回值）是num的阶乘</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">num</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, num + <span class="hljs-number">1</span>):<br>        result *= n<br>    <span class="hljs-keyword">return</span> result<br><br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br><span class="hljs-comment"># 计算阶乘的时候不需要写重复的代码而是直接调用函数</span><br><span class="hljs-comment"># 调用函数的语法是在函数名后面跟上圆括号并传入参数</span><br><span class="hljs-built_in">print</span>(fac(m) // fac(n) // fac(m - n))<br></code></pre></td></tr></table></figure><p>大家可以感受下，上面的代码是不是比之前的版本更加简单优雅。更为重要的是，我们定义的求阶乘函数<code>fac</code>还可以在其他需要求阶乘的代码中重复使用。<br />所以，<strong>使用函数可以帮助我们将功能上相对独立且会被重复使用的代码封装起来</strong>，当我们需要这些的代码，不是把重复的代码再编写一遍，而是<strong>通过调用函数实现对既有代码的复用</strong>。<br />事实上，Python 标准库的<code>math</code>模块中，已经有一个名为<code>factorial</code>的函数实现了求阶乘的功能，我们可以直接用<code>import math</code>导入<code>math</code>模块，然后使用<code>math.factorial</code>来调用求阶乘的函数；<br />我们也可以通过<code>from math import factorial</code>直接导入<code>factorial</code>函数来使用它，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入m和n，计算组合数C(m,n)的值</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.2</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> factorial<br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br><span class="hljs-built_in">print</span>(factorial(m) // factorial(n) // factorial(m - n))<br></code></pre></td></tr></table></figure><p>将来我们使用的函数，要么是自定义的函数，要么是 Python 标准库或者三方库中提供的函数，如果已经有现成的可用的函数，我们就没有必要自己去定义，“<strong>重复发明轮子</strong>”是一件非常糟糕的事情。<br />对于上面的代码，如果你觉得<code>factorial</code>这个名字太长，书写代码的时候不是特别方便，我们在导入函数的时候还可以通过<code>as</code>关键字为其别名。在调用函数的时候，我们可以用函数的别名，而不再使用它之前的名字，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入m和n，计算组合数C(m,n)的值</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.3</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> factorial <span class="hljs-keyword">as</span> f<br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br><span class="hljs-built_in">print</span>(f(m) // f(n) // f(m - n))<br></code></pre></td></tr></table></figure><h3 id="函数的参数"><a class="markdownIt-Anchor" href="#函数的参数"></a> 函数的参数</h3><h4 id="位置参数和关键字参数"><a class="markdownIt-Anchor" href="#位置参数和关键字参数"></a> 位置参数和关键字参数</h4><p>我们再来写一个函数，根据给出的三条边的长度判断是否可以构成三角形，如果可以构成三角形则返回<code>True</code>，否则返回<code>False</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_judgement</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断三条边的长度能否构成三角形&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br></code></pre></td></tr></table></figure><p>上面<code>make_judgement</code>函数有三个参数，这种参数叫做位置参数，在调用函数时通常按照从左到右的顺序依次传入，而且传入参数的数量必须和定义函数时参数的数量相同，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(make_judgement(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(make_judgement(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>如果不想按照从左到右的顺序依次给出<code>a</code>、<code>b</code>、<code>c</code> 三个参数的值，也可以使用关键字参数，通过“参数名=参数值”的形式为函数传入参数，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(make_judgement(b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>, a=<span class="hljs-number">1</span>))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(make_judgement(c=<span class="hljs-number">6</span>, b=<span class="hljs-number">4</span>, a=<span class="hljs-number">5</span>))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>在定义函数时，我们可以在参数列表中用<code>/</code>设置<strong>强制位置参数</strong>（<em>positional-only arguments</em>），用<code>*</code>设置<strong>命名关键字参数</strong>。<br />所谓强制位置参数，就是调用函数时只能按照参数位置来接收参数值的参数；<br />而命名关键字参数只能通过“参数名=参数值”的方式来传递和接收参数，大家可以看看下面的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># /前面的参数是强制位置参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_judgement</span>(<span class="hljs-params">a, b, c, /</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断三条边的长度能否构成三角形&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br><br><span class="hljs-comment"># 下面的代码会产生TypeError错误，错误信息提示“强制位置参数是不允许给出参数名的”</span><br><span class="hljs-comment"># TypeError: make_judgement() got some positional-only arguments passed as keyword arguments</span><br><span class="hljs-comment"># print(make_judgement(b=2, c=3, a=1))</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：强制位置参数是 Python 3.8 引入的新特性，在使用低版本的 Python 解释器时需要注意。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># *后面的参数是命名关键字参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_judgement</span>(<span class="hljs-params">*, a, b, c</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断三条边的长度能否构成三角形&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br><br><span class="hljs-comment"># 下面的代码会产生TypeError错误，错误信息提示“函数没有位置参数但却给了3个位置参数”</span><br><span class="hljs-comment"># TypeError: make_judgement() takes 0 positional arguments but 3 were given</span><br><span class="hljs-comment"># print(make_judgement(1, 2, 3))</span><br></code></pre></td></tr></table></figure><h4 id="参数的默认值"><a class="markdownIt-Anchor" href="#参数的默认值"></a> 参数的默认值</h4><p>Python 中允许函数的参数拥有默认值，我们可以把之前讲过的一个例子“CRAPS赌博游戏”(<a href="07.%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E7%BB%83%E4%B9%A0.md">07.分支和循环结构练习.md</a>)中摇色子获得点数的功能封装到函数中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange<br><br><br><span class="hljs-comment"># 定义摇色子的函数</span><br><span class="hljs-comment"># 函数的自变量（参数）n表示色子的个数，默认值为2</span><br><span class="hljs-comment"># 函数的因变量（返回值）表示摇n颗色子得到的点数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">roll_dice</span>(<span class="hljs-params">n=<span class="hljs-number">2</span></span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        total += randrange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>)<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-comment"># 如果没有指定参数，那么n使用默认值2，表示摇两颗色子</span><br><span class="hljs-built_in">print</span>(roll_dice())<br><span class="hljs-comment"># 传入参数3，变量n被赋值为3，表示摇三颗色子获得点数</span><br><span class="hljs-built_in">print</span>(roll_dice(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>我们再来看一个更为简单的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a=<span class="hljs-number">0</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;三个数相加求和&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br><span class="hljs-comment"># 调用add函数，没有传入参数，那么a、b、c都使用默认值0</span><br><span class="hljs-built_in">print</span>(add())         <span class="hljs-comment"># 0</span><br><span class="hljs-comment"># 调用add函数，传入一个参数，该参数赋值给变量a, 变量b和c使用默认值0</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))        <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 调用add函数，传入两个参数，分别赋值给变量a和b，变量c使用默认值0</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))     <span class="hljs-comment"># 3</span><br><span class="hljs-comment"># 调用add函数，传入三个参数，分别赋值给a、b、c三个变量</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 6</span><br></code></pre></td></tr></table></figure><p>需要注意的是，<strong>带默认值的参数必须放在不带默认值的参数之后</strong>，否则将产生<code>SyntaxError</code>错误，错误消息是：<code>non-default argument follows default argument</code>，翻译成中文的意思是“没有默认值的参数放在了带默认值的参数后面”。</p><h4 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数</h4><p>Python 语言中可以通过星号表达式语法让函数支持可变参数。所谓可变参数指的是在调用函数时，可以向函数传入<code>0</code>个或任意多个参数。<br />将来我们以团队协作的方式开发商业项目时，很有可能要设计函数给其他人使用，但有的时候我们并不知道函数的调用者会向该函数传入多少个参数，这个时候可变参数就能派上用场。</p><p>下面的代码演示了如何使用可变位置参数实现对任意多个数求和的<code>add</code>函数，调用函数时传入的参数会保存到一个元组，通过对该元组的遍历，可以获取传入函数的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用星号表达式来表示args可以接收0个或任意多个参数</span><br><span class="hljs-comment"># 调用函数时传入的n个参数会组装成一个n元组赋给args</span><br><span class="hljs-comment"># 如果一个参数都没有传入，那么args会是一个空元组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*args</span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 对保存可变参数的元组进行循环遍历</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-comment"># 对参数进行了类型检查（数值型的才能求和）</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(val) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>):<br>            total += val<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-comment"># 在调用add函数时可以传入0个或任意多个参数</span><br><span class="hljs-built_in">print</span>(add())         <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))        <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">3.45</span>, <span class="hljs-number">6</span>))  <span class="hljs-comment"># 12.45</span><br></code></pre></td></tr></table></figure><p>如果我们希望通过“参数名=参数值”的形式传入若干个参数，具体有多少个参数也是不确定的，我们还可以给函数添加可变关键字参数，把传入的关键字参数组装到一个字典中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参数列表中的**kwargs可以接收0个或任意多个关键字参数</span><br><span class="hljs-comment"># 调用函数时传入的关键字参数会组装成一个字典（参数名是字典中的键，参数值是字典中的值）</span><br><span class="hljs-comment"># 如果一个关键字参数都没有传入，那么kwargs会是一个空字典</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    <span class="hljs-built_in">print</span>(args)<br>    <span class="hljs-built_in">print</span>(kwargs)<br><br><br>foo(<span class="hljs-number">3</span>, <span class="hljs-number">2.1</span>, <span class="hljs-literal">True</span>, name=<span class="hljs-string">&#x27;瓶子&#x27;</span>, age=<span class="hljs-number">43</span>, gpa=<span class="hljs-number">4.95</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">(<span class="hljs-number">3</span>, <span class="hljs-number">2.1</span>, <span class="hljs-literal">True</span>)<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;瓶子&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;gpa&#x27;</span>: <span class="hljs-number">4.95</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="用模块管理函数"><a class="markdownIt-Anchor" href="#用模块管理函数"></a> 用模块管理函数</h3><p>不管用什么样的编程语言来写代码，给变量、函数起名字都是一个让人头疼的问题，因为我们会遇到<strong>命名冲突</strong>这种尴尬的情况。最简单的场景就是在同一个<code>.py</code>文件中定义了两个同名的函数，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;goodbye, world!&#x27;</span>)<br><br>    <br>foo()  <span class="hljs-comment"># 大家猜猜调用foo函数会输出什么</span><br></code></pre></td></tr></table></figure><p>当然上面的这种情况我们很容易就能避免，但是如果项目是团队协作多人开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，这种情况下怎么解决命名冲突呢？<br />答案其实很简单，Python 中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候，我们通过<code>import</code>关键字导入指定的模块再使用<strong>完全限定名</strong>（<code>模块名.函数名</code>）的调用方式，就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>module2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;goodbye, world!&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> module1<br><span class="hljs-keyword">import</span> module2<br><br><span class="hljs-comment"># 用“模块名.函数名”的方式（完全限定名）调用函数，</span><br>module1.foo()  <span class="hljs-comment"># hello, world!</span><br>module2.foo()  <span class="hljs-comment"># goodbye, world!</span><br></code></pre></td></tr></table></figure><p>在导入模块时，还可以使用<code>as</code>关键字对模块进行别名，这样我们可以使用更为简短的完全限定名。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> module1 <span class="hljs-keyword">as</span> m1<br><span class="hljs-keyword">import</span> module2 <span class="hljs-keyword">as</span> m2<br><br>m1.foo()  <span class="hljs-comment"># hello, world!</span><br>m2.foo()  <span class="hljs-comment"># goodbye, world!</span><br></code></pre></td></tr></table></figure><p>上面两段代码，我们导入的是定义函数的模块，我们也可以使用<code>from...import...</code>语法从模块中直接导入需要使用的函数，代码如下所示。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><br>foo()  <span class="hljs-comment"># hello, world!</span><br><br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><br>foo()  <span class="hljs-comment"># goodbye, world!</span><br></code></pre></td></tr></table></figure><p>但是，如果我们如果从两个不同的模块中导入了同名的函数，后面导入的函数会替换掉之前的导入，就像下面的代码，调用<code>foo</code>会输出<code>goodbye, world!</code>，因为我们先导入了<code>module1</code>的<code>foo</code>，后导入了<code>module2</code>的<code>foo</code> 。<br />如果两个<code>from...import...</code>反过来写，那就是另外一番光景了。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><br>foo()  <span class="hljs-comment"># goodbye, world!</span><br></code></pre></td></tr></table></figure><p>如果想在上面的代码中同时使用来自两个模块的<code>foo</code>函数还是有办法的，大家可能已经猜到了，还是用<code>as</code>关键字对导入的函数进行别名，代码如下所示。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo <span class="hljs-keyword">as</span> f1<br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo <span class="hljs-keyword">as</span> f2<br><br>f1()  <span class="hljs-comment"># hello, world!</span><br>f2()  <span class="hljs-comment"># goodbye, world!</span><br></code></pre></td></tr></table></figure><h3 id="标准库中的模块和函数"><a class="markdownIt-Anchor" href="#标准库中的模块和函数"></a> 标准库中的模块和函数</h3><p>Python 标准库中提供了大量的模块和函数来简化我们的开发工作，我们之前用过的<code>random</code>模块就为我们提供了生成随机数和进行随机抽样的函数；而<code>time</code>模块则提供了和时间操作相关的函数；<br />我们之前用到过的<code>math</code>模块中还包括了计算正弦、余弦、指数、对数等一系列的数学函数。随着我们深入学习 Python 语言，我们还会用到更多的模块和函数。</p><p>Python 标准库中还有一类函数是不需要<code>import</code>就能够直接使用的，我们将其称之为<strong>内置函数</strong>，这些内置函数不仅有用而且还很常用，下面的表格列出了一部分的内置函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abs</code></td><td>返回一个数的绝对值，例如：<code>abs(-1.3)</code>会返回<code>1.3</code>。</td></tr><tr><td><code>bin</code></td><td>把一个整数转换成以<code>'0b'</code>开头的二进制字符串，例如：<code>bin(123)</code>会返回<code>'0b1111011'</code>。</td></tr><tr><td><code>chr</code></td><td>将Unicode编码转换成对应的字符，例如：<code>chr(8364)</code>会返回<code>'€'</code>。</td></tr><tr><td><code>hex</code></td><td>将一个整数转换成以<code>'0x'</code>开头的十六进制字符串，例如：<code>hex(123)</code>会返回<code>'0x7b'</code>。</td></tr><tr><td><code>input</code></td><td>从输入中读取一行，返回读到的字符串。</td></tr><tr><td><code>len</code></td><td>获取字符串、列表等的长度。</td></tr><tr><td><code>max</code></td><td>返回多个参数或一个可迭代对象中的最大值，例如：<code>max(12, 95, 37)</code>会返回<code>95</code>。</td></tr><tr><td><code>min</code></td><td>返回多个参数或一个可迭代对象中的最小值，例如：<code>min(12, 95, 37)</code>会返回<code>12</code>。</td></tr><tr><td><code>oct</code></td><td>把一个整数转换成以<code>'0o'</code>开头的八进制字符串，例如：<code>oct(123)</code>会返回<code>'0o173'</code>。</td></tr><tr><td><code>open</code></td><td>打开一个文件并返回文件对象。</td></tr><tr><td><code>ord</code></td><td>将字符转换成对应的Unicode编码，例如：<code>ord('€')</code>会返回<code>8364</code>。</td></tr><tr><td><code>pow</code></td><td>求幂运算，例如：<code>pow(2, 3)</code>会返回<code>8</code>；<code>pow(2, 0.5)</code>会返回<code>1.4142135623730951</code>。</td></tr><tr><td><code>print</code></td><td>打印输出。</td></tr><tr><td><code>range</code></td><td>构造一个范围序列，例如：<code>range(100)</code>会产生<code>0</code>到<code>99</code>的整数序列。</td></tr><tr><td><code>round</code></td><td>按照指定的精度对数值进行四舍五入，例如：<code>round(1.23456, 4)</code>会返回<code>1.2346</code>。</td></tr><tr><td><code>sum</code></td><td>对一个序列中的项从左到右进行求和运算，例如：<code>sum(range(1, 101))</code>会返回<code>5050</code>。</td></tr><tr><td><code>type</code></td><td>返回对象的类型，例如：<code>type(10)</code>会返回<code>int</code>；而<code> type('hello')</code>会返回<code>str</code>。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>13.常用数据结构之字典</title>
    <link href="/waterbottle/posts/c71f/"/>
    <url>/waterbottle/posts/c71f/</url>
    
    <content type="html"><![CDATA[<p>了解字典的特性和应用场景</p><span id="more"></span><h2 id="常用数据结构之字典"><a class="markdownIt-Anchor" href="#常用数据结构之字典"></a> 常用数据结构之字典</h2><p>迄今为止，我们已经为大家介绍了 Python 中的三种容器型数据类型（列表、元组、集合），但是这些数据类型仍然不足以帮助我们解决所有的问题。<br />例如，我们需要一个变量来保存一个人的多项信息，包括：姓名、年龄、身高、体重、家庭住址、本人手机号、紧急联系人手机号，此时你会发现，我们之前学过的列表、元组和集合类型都不够好使。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">person1 = [<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">55</span>, <span class="hljs-number">168</span>, <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>, <span class="hljs-string">&#x27;13122334455&#x27;</span>, <span class="hljs-string">&#x27;13800998877&#x27;</span>]<br>person2 = (<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">55</span>, <span class="hljs-number">168</span>, <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>, <span class="hljs-string">&#x27;13122334455&#x27;</span>, <span class="hljs-string">&#x27;13800998877&#x27;</span>)<br>person3 = &#123;<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">55</span>, <span class="hljs-number">168</span>, <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>, <span class="hljs-string">&#x27;13122334455&#x27;</span>, <span class="hljs-string">&#x27;13800998877&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>集合肯定是最不合适的，因为集合中不能有重复元素，如果一个人的年龄和体重刚好相同，那么集合中就会少一项信息；<br />同理，如果这个人的手机号和紧急联系人手机号是相同的，那么集合中又会少一项信息。<br />另一方面，虽然列表和元组可以把一个人的所有信息都保存下来，但是当你想要获取这个人的手机号或家庭住址时，你得先知道他的手机号是列表或元组中的第几个元素。<br />总之，在遇到上述的场景时，列表、元组、集合都不是最合适的选择，此时我们需要字典（dictionary）类型，这种数据类型最适合把相关联的信息组装到一起，可以帮助我们解决 Python 程序中为真实事物建模的问题。</p><p>说到字典这个词，大家一定不陌生，读小学的时候，每个人手头基本上都有一本《新华字典》</p><p>Python 程序中的字典跟现实生活中的字典很像，它以键值对（键和值的组合）的方式把数据组织到一起，我们可以通过键找到与之对应的值并进行操作。<br />就像《新华字典》中，每个字（键）都有与它对应的解释（值）一样，每个字和它的解释合在一起就是字典中的一个条目，而字典中通常包含了很多个这样的条目。</p><h3 id="创建和使用字典"><a class="markdownIt-Anchor" href="#创建和使用字典"></a> 创建和使用字典</h3><p>Python 中创建字典可以使用<code>&#123;&#125;</code>字面量语法，这一点跟上一节课讲的集合是一样的。但是字典的<code>&#123;&#125;</code>中的元素是以键值对的形式存在的，每个元素由<code>:</code>分隔的两个值构成，<code>:</code>前面是键，<code>:</code>后面是值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">xinhua = &#123;<br>    <span class="hljs-string">&#x27;麓&#x27;</span>: <span class="hljs-string">&#x27;山脚下&#x27;</span>,<br>    <span class="hljs-string">&#x27;路&#x27;</span>: <span class="hljs-string">&#x27;道，往来通行的地方；方面，地区：南～货，外～货；种类：他俩是一～人&#x27;</span>,<br>    <span class="hljs-string">&#x27;蕗&#x27;</span>: <span class="hljs-string">&#x27;甘草的别名&#x27;</span>,<br>    <span class="hljs-string">&#x27;潞&#x27;</span>: <span class="hljs-string">&#x27;潞水，水名，即今山西省的浊漳河；潞江，水名，即云南省的怒江&#x27;</span><br>&#125;<br><span class="hljs-built_in">print</span>(xinhua)<br>person = &#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>,<br>    <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">55</span>,<br>    <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">168</span>,<br>    <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>, <br>    <span class="hljs-string">&#x27;tel&#x27;</span>: <span class="hljs-string">&#x27;13122334455&#x27;</span>,<br>    <span class="hljs-string">&#x27;emergence contact&#x27;</span>: <span class="hljs-string">&#x27;13800998877&#x27;</span><br>&#125;<br><span class="hljs-built_in">print</span>(person)<br></code></pre></td></tr></table></figure><p>通过上面的代码，相信大家已经看出来了，用字典来保存一个人的信息远远优于使用列表或元组，因为我们可以用<code>:</code>前面的键来表示条目的含义，而<code>:</code>后面就是这个条目所对应的值。</p><p>当然，如果愿意，我们也可以使用内置函数<code>dict</code>或者是字典的生成式语法来创建字典，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># dict函数(构造器)中的每一组参数就是字典中的一组键值对</span><br>person = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;王大锤&#x27;</span>, age=<span class="hljs-number">55</span>, height=<span class="hljs-number">168</span>, weight=<span class="hljs-number">60</span>, addr=<span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>)<br><span class="hljs-built_in">print</span>(person)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;王大锤&#x27;, &#x27;age&#x27;: 55, &#x27;height&#x27;: 168, &#x27;weight&#x27;: 60, &#x27;addr&#x27;: &#x27;成都市武侯区科华北路62号1栋101&#x27;&#125;</span><br><br><span class="hljs-comment"># 可以通过Python内置函数zip压缩两个序列并创建字典</span><br>items1 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(<span class="hljs-string">&#x27;ABCDE&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>))<br><span class="hljs-built_in">print</span>(items1)  <span class="hljs-comment"># &#123;&#x27;A&#x27;: &#x27;1&#x27;, &#x27;B&#x27;: &#x27;2&#x27;, &#x27;C&#x27;: &#x27;3&#x27;, &#x27;D&#x27;: &#x27;4&#x27;, &#x27;E&#x27;: &#x27;5&#x27;&#125;</span><br>items2 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(<span class="hljs-string">&#x27;ABCDE&#x27;</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)))<br><span class="hljs-built_in">print</span>(items2)  <span class="hljs-comment"># &#123;&#x27;A&#x27;: 1, &#x27;B&#x27;: 2, &#x27;C&#x27;: 3, &#x27;D&#x27;: 4, &#x27;E&#x27;: 5&#125;</span><br><br><span class="hljs-comment"># 用字典生成式语法创建字典</span><br>items3 = &#123;x: x ** <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)&#125;<br><span class="hljs-built_in">print</span>(items3)  <span class="hljs-comment"># &#123;1: 1, 2: 8, 3: 27, 4: 64, 5: 125&#125;</span><br></code></pre></td></tr></table></figure><p>想知道字典中一共有多少组键值对，仍然是使用<code>len</code>函数；如果想对字典进行遍历，可以用<code>for</code>循环，但是需要注意，<code>for</code>循环只是对字典的键进行了遍历，不过没关系，在学习了字典的索引运算后，我们可以通过字典的键访问它对应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>,<br>    <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">55</span>,<br>    <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">168</span>,<br>    <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span><br>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(person))  <span class="hljs-comment"># 5</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> person:<br>    <span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure><h3 id="字典的运算"><a class="markdownIt-Anchor" href="#字典的运算"></a> 字典的运算</h3><p>对于字典类型来说，成员运算和索引运算肯定是很重要的，前者可以判定指定的键在不在字典中，后者可以通过键访问对应的值或者向字典中添加新的键值对。<br />值得注意的是，字典的索引不同于列表的索引，列表中的元素因为有属于自己有序号，所以列表的索引是一个整数；字典中因为保存的是键值对，所以字典需要用键去索引对应的值。<br />需要<strong>特别提醒</strong>大家注意的是，<strong>字典中的键必须是不可变类型</strong>，例如整数（<code>int</code>）、浮点数（<code>float</code>）、字符串（<code>str</code>）、元组（<code>tuple</code>）等类型，这一点跟集合类型对元素的要求是一样的；<br />很显然，之前我们讲的列表（<code>list</code>）和集合（<code>set</code>）不能作为字典中的键，字典类型本身也不能再作为字典中的键，因为字典也是可变类型，但是列表、集合、字典都可以作为字典中的值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>,<br>    <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">55</span>,<br>    <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">168</span>,<br>    <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-string">&#x27;addr&#x27;</span>: [<span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>, <span class="hljs-string">&#x27;北京市西城区百万庄大街1号&#x27;</span>],<br>    <span class="hljs-string">&#x27;car&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;BMW X7&#x27;</span>,<br>        <span class="hljs-string">&#x27;maxSpeed&#x27;</span>: <span class="hljs-string">&#x27;250&#x27;</span>,<br>        <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">5170</span>,<br>        <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">2000</span>,<br>        <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">1835</span>,<br>        <span class="hljs-string">&#x27;displacement&#x27;</span>: <span class="hljs-number">3.0</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(person)<br></code></pre></td></tr></table></figure><p>大家可以看看下面的代码，了解一下字典的成员运算和索引运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">168</span>, <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>&#125;<br><br><span class="hljs-comment"># 成员运算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span> person)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;tel&#x27;</span> <span class="hljs-keyword">in</span> person)   <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 索引运算</span><br><span class="hljs-built_in">print</span>(person[<span class="hljs-string">&#x27;name&#x27;</span>])   <span class="hljs-comment">#王大锤</span><br><span class="hljs-built_in">print</span>(person[<span class="hljs-string">&#x27;addr&#x27;</span>])   <span class="hljs-comment">#成都市武侯区科华北路62号1栋101</span><br>person[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">25</span><br>person[<span class="hljs-string">&#x27;height&#x27;</span>] = <span class="hljs-number">178</span><br>person[<span class="hljs-string">&#x27;tel&#x27;</span>] = <span class="hljs-string">&#x27;13122334455&#x27;</span><br>person[<span class="hljs-string">&#x27;signature&#x27;</span>] = <span class="hljs-string">&#x27;你的男朋友是一个盖世垃圾，他会踏着五彩祥云去迎娶你的闺蜜&#x27;</span><br><span class="hljs-built_in">print</span>(person)<br><br><span class="hljs-comment"># 循环遍历</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> person:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>:\t<span class="hljs-subst">&#123;person[key]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>需要注意，在通过索引运算获取字典中的值时，如指定的键没有在字典中，将会引发<code>KeyError</code>异常。</p><h3 id="字典的方法"><a class="markdownIt-Anchor" href="#字典的方法"></a> 字典的方法</h3><p>字典类型的方法基本上都跟字典的键值对操作相关，其中<code>get</code>方法可以通过键来获取对应的值。跟索引运算不同的是，<code>get</code>方法在字典中没有指定的键时不会产生异常，而是返回<code>None</code>或指定的默认值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">178</span>, <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(person.get(<span class="hljs-string">&#x27;name&#x27;</span>))       <span class="hljs-comment"># 王大锤</span><br><span class="hljs-built_in">print</span>(person.get(<span class="hljs-string">&#x27;sex&#x27;</span>))        <span class="hljs-comment"># None</span><br><span class="hljs-built_in">print</span>(person.get(<span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-literal">True</span>))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>如果需要获取字典中所有的键，可以使用<code>keys</code>方法；如果需要获取字典中所有的值，可以使用<code>values</code>方法。字典还有一个名为<code>items</code>的方法，它会将键和值组装成二元组，通过该方法来遍历字典中的元素也是非常方便的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">178</span>&#125;<br><span class="hljs-built_in">print</span>(person.keys())    <span class="hljs-comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;height&#x27;])</span><br><span class="hljs-built_in">print</span>(person.values())  <span class="hljs-comment"># dict_values([&#x27;王大锤&#x27;, 25, 178])</span><br><span class="hljs-built_in">print</span>(person.items())   <span class="hljs-comment"># dict_items([(&#x27;name&#x27;, &#x27;王大锤&#x27;), (&#x27;age&#x27;, 25), (&#x27;height&#x27;, 178)])</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> person.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>:\t<span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>字典的<code>update</code>方法实现两个字典的合并操作。例如，有两个字典<code>x</code>和<code>y</code>，当执行<code>x.update(y)</code>操作时，<code>x</code>跟<code>y</code>相同的键对应的值会被<code>y</code>中的值更新，而<code>y</code>中有但<code>x</code>中没有的键值对会直接添加到<code>x</code>中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">person1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">178</span>&#125;<br>person2 = &#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>&#125;<br>person1.update(person2)<br><span class="hljs-built_in">print</span>(person1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;王大锤&#x27;, &#x27;age&#x27;: 25, &#x27;height&#x27;: 178, &#x27;addr&#x27;: &#x27;成都市武侯区科华北路62号1栋101&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>如果使用 Python 3.9 及以上的版本，也可以使用<code>|</code>运算符来完成同样的操作，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">person1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">178</span>&#125;<br>person2 = &#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>&#125;<br>person1 |= person2<br><span class="hljs-built_in">print</span>(person1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;王大锤&#x27;, &#x27;age&#x27;: 25, &#x27;height&#x27;: 178, &#x27;addr&#x27;: &#x27;成都市武侯区科华北路62号1栋101&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>可以通过<code>pop</code>或<code>popitem</code>方法从字典中删除元素，前者会返回（获得）键对应的值，但是如果字典中不存在指定的键，会引发<code>KeyError</code>错误；后者在删除元素时，会返回（获得）键和值组成的二元组。<br />字典的<code>clear</code>方法会清空字典中所有的键值对，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">178</span>, <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(person.pop(<span class="hljs-string">&#x27;age&#x27;</span>))  <span class="hljs-comment"># 25</span><br><span class="hljs-built_in">print</span>(person)             <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;王大锤&#x27;, &#x27;height&#x27;: 178, &#x27;addr&#x27;: &#x27;成都市武侯区科华北路62号1栋101&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(person.popitem())   <span class="hljs-comment"># (&#x27;addr&#x27;, &#x27;成都市武侯区科华北路62号1栋101&#x27;)</span><br><span class="hljs-built_in">print</span>(person)             <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;王大锤&#x27;, &#x27;height&#x27;: 178&#125;</span><br>person.clear()<br><span class="hljs-built_in">print</span>(person)             <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>跟列表一样，从字典中删除元素也可以使用<code>del</code>关键字，在删除元素的时候如果指定的键索引不到对应的值，一样会引发<code>KeyError</code>错误，具体的做法如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">178</span>, <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-string">&#x27;成都市武侯区科华北路62号1栋101&#x27;</span>&#125;<br><span class="hljs-keyword">del</span> person[<span class="hljs-string">&#x27;age&#x27;</span>]<br><span class="hljs-keyword">del</span> person[<span class="hljs-string">&#x27;addr&#x27;</span>]<br><span class="hljs-built_in">print</span>(person)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;王大锤&#x27;, &#x27;height&#x27;: 178&#125;</span><br></code></pre></td></tr></table></figure><h3 id="字典的应用"><a class="markdownIt-Anchor" href="#字典的应用"></a> 字典的应用</h3><p>我们通过几个简单的例子来看看如何使用字典类型解决一些实际的问题。</p><p><strong>例子1</strong>：输入一段话，统计每个英文字母出现的次数，按出现次数从高到低输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">sentence = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一段话: &#x27;</span>)<br>counter = &#123;&#125;<br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> sentence:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt;= ch &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= ch &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:<br>        counter[ch] = counter.get(ch, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>sorted_keys = <span class="hljs-built_in">sorted</span>(counter, key=counter.get, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span> 出现了 <span class="hljs-subst">&#123;counter[key]&#125;</span> 次.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输入：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Man is distinguished, <span class="hljs-keyword">not</span> only <span class="hljs-keyword">by</span> his reason, but <span class="hljs-keyword">by</span> this singular passion <span class="hljs-built_in">from</span> other animals, which is <span class="hljs-keyword">a</span> lust <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> mind, that <span class="hljs-keyword">by</span> <span class="hljs-keyword">a</span> perseverance <span class="hljs-keyword">of</span> delight <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> continued <span class="hljs-keyword">and</span> indefatigable generation <span class="hljs-keyword">of</span> knowledge, exceeds <span class="hljs-keyword">the</span> <span class="hljs-keyword">short</span> vehemence <span class="hljs-keyword">of</span> <span class="hljs-keyword">any</span> carnal pleasure.<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">e</span> 出现了 <span class="hljs-number">27</span> 次.<br><span class="hljs-attribute">n</span> 出现了 <span class="hljs-number">21</span> 次.<br><span class="hljs-attribute">a</span> 出现了 <span class="hljs-number">18</span> 次.<br><span class="hljs-attribute">i</span> 出现了 <span class="hljs-number">18</span> 次.<br><span class="hljs-attribute">s</span> 出现了 <span class="hljs-number">16</span> 次.<br><span class="hljs-attribute">t</span> 出现了 <span class="hljs-number">16</span> 次.<br><span class="hljs-attribute">o</span> 出现了 <span class="hljs-number">14</span> 次.<br><span class="hljs-attribute">h</span> 出现了 <span class="hljs-number">13</span> 次.<br><span class="hljs-attribute">r</span> 出现了 <span class="hljs-number">10</span> 次.<br><span class="hljs-attribute">d</span> 出现了 <span class="hljs-number">9</span> 次.<br><span class="hljs-attribute">l</span> 出现了 <span class="hljs-number">9</span> 次.<br><span class="hljs-attribute">g</span> 出现了 <span class="hljs-number">6</span> 次.<br><span class="hljs-attribute">u</span> 出现了 <span class="hljs-number">6</span> 次.<br><span class="hljs-attribute">f</span> 出现了 <span class="hljs-number">6</span> 次.<br><span class="hljs-attribute">c</span> 出现了 <span class="hljs-number">6</span> 次.<br><span class="hljs-attribute">y</span> 出现了 <span class="hljs-number">5</span> 次.<br><span class="hljs-attribute">b</span> 出现了 <span class="hljs-number">5</span> 次.<br><span class="hljs-attribute">m</span> 出现了 <span class="hljs-number">4</span> 次.<br><span class="hljs-attribute">p</span> 出现了 <span class="hljs-number">3</span> 次.<br><span class="hljs-attribute">w</span> 出现了 <span class="hljs-number">2</span> 次.<br><span class="hljs-attribute">v</span> 出现了 <span class="hljs-number">2</span> 次.<br><span class="hljs-attribute">M</span> 出现了 <span class="hljs-number">1</span> 次.<br><span class="hljs-attribute">k</span> 出现了 <span class="hljs-number">1</span> 次.<br><span class="hljs-attribute">x</span> 出现了 <span class="hljs-number">1</span> 次.<br></code></pre></td></tr></table></figure><p><strong>例子2</strong>：在一个字典中保存了股票的代码和价格，找出股价大于100元的股票并创建一个新的字典。</p><blockquote><p><strong>说明</strong>：可以用字典的生成式语法来创建这个新字典。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">stocks = &#123;<br>    <span class="hljs-string">&#x27;AAPL&#x27;</span>: <span class="hljs-number">191.88</span>,<br>    <span class="hljs-string">&#x27;GOOG&#x27;</span>: <span class="hljs-number">1186.96</span>,<br>    <span class="hljs-string">&#x27;IBM&#x27;</span>: <span class="hljs-number">149.24</span>,<br>    <span class="hljs-string">&#x27;ORCL&#x27;</span>: <span class="hljs-number">48.44</span>,<br>    <span class="hljs-string">&#x27;ACN&#x27;</span>: <span class="hljs-number">166.89</span>,<br>    <span class="hljs-string">&#x27;FB&#x27;</span>: <span class="hljs-number">208.09</span>,<br>    <span class="hljs-string">&#x27;SYMC&#x27;</span>: <span class="hljs-number">21.29</span><br>&#125;<br>stocks2 = &#123;key: value <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> stocks.items() <span class="hljs-keyword">if</span> value &gt; <span class="hljs-number">100</span>&#125;<br><span class="hljs-built_in">print</span>(stocks2)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<span class="hljs-attr">&#x27;AAPL&#x27;:</span> <span class="hljs-number">191.88</span>, <span class="hljs-attr">&#x27;GOOG&#x27;:</span> <span class="hljs-number">1186.96</span>, <span class="hljs-attr">&#x27;IBM&#x27;:</span> <span class="hljs-number">149.24</span>, <span class="hljs-attr">&#x27;ACN&#x27;:</span> <span class="hljs-number">166.89</span>, <span class="hljs-attr">&#x27;FB&#x27;:</span> <span class="hljs-number">208.09</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12.常用数据结构之集合</title>
    <link href="/waterbottle/posts/b61c/"/>
    <url>/waterbottle/posts/b61c/</url>
    
    <content type="html"><![CDATA[<p>了解集合的特性和应用场景</p><span id="more"></span><h2 id="常用数据结构之集合"><a class="markdownIt-Anchor" href="#常用数据结构之集合"></a> 常用数据结构之集合</h2><p>在学习了列表和元组之后，我们再来学习一种容器型的数据类型，它的名字叫集合（set）。<br />说到集合这个词大家一定不会陌生，在数学课本上就有这个概念。如果我们<strong>把一定范围的、确定的、可以区别的事物当作一个整体来看待</strong>，那么这个整体就是集合，集合中的各个事物称为集合的<strong>元素</strong>。通常，集合需要满足以下要求：</p><ol><li><strong>无序性</strong>：一个集合中，每个元素的地位都是相同的，元素之间是无序的。</li><li><strong>互异性</strong>：一个集合中，任何两个元素都是不相同的，即元素在集合中只能出现一次。</li><li><strong>确定性</strong>：给定一个集合和一个任意元素，该元素要么属这个集合，要么不属于这个集合，二者必居其一，不允许有模棱两可的情况出现。</li></ol><p>Python 程序中的集合跟数学上的集合没有什么本质区别，需要强调的是上面所说的无序性和互异性。无序性说明集合中的元素并不像列中的元素那样存在某种次序，可以通过索引运算就能访问任意元素，<strong>集合并不支持索引运算</strong>。<br />另外，集合的互异性决定了<strong>集合中不能有重复元素</strong>，这一点也是集合区别于列表的地方，我们无法将重复的元素添加到一个集合中。<br />集合类型必然是支持<code>in</code>和<code>not in</code>成员运算的，这样就可以确定一个元素是否属于集合，也就是上面所说的集合的确定性。<br /><strong>集合的成员运算在性能上要优于列表的成员运算</strong>，这是集合的底层存储特性决定的，此处我们暂时不做讨论，大家记住这个结论即可。</p><blockquote><p><strong>说明</strong>：集合底层使用了哈希存储（散列存储），对哈希存储不了解的读者可以先看看“Hello 算法”网站对<a href="https://www.hello-algo.com/chapter_hashing/">哈希表</a>的讲解，感谢作者的开源精神。</p></blockquote><h3 id="创建集合"><a class="markdownIt-Anchor" href="#创建集合"></a> 创建集合</h3><p>在 Python 中，创建集合可以使用<code>&#123;&#125;</code>字面量语法，<code>&#123;&#125;</code>中需要至少有一个元素，因为没有元素的<code>&#123;&#125;</code>并不是空集合而是一个空字典，字典类型我们会在下一节课中为大家介绍。<br />当然，也可以使用 Python 内置函数<code>set</code>来创建一个集合，准确的说<code>set</code>并不是一个函数，而是创建集合对象的构造器，这个知识点会在后面讲解面向对象编程的地方为大家介绍。<br />我们可以使用<code>set</code>函数创建一个空集合，也可以用它将其他序列转换成集合，例如：<code>set('hello')</code>会得到一个包含了<code>4</code>个字符的集合（重复的字符<code>l</code>只会在集合中出现一次）。<br />除了这两种方式，还可以使用生成式语法来创建集合，就像我们之前用生成式语法创建列表那样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(set1)<br><br>set2 = &#123;<span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;pitaya&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;grape&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(set2)<br><br>set3 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-built_in">print</span>(set3)<br><br>set4 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(set4)<br><br>set5 = &#123;num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>) <span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>&#125;<br><span class="hljs-built_in">print</span>(set5)<br></code></pre></td></tr></table></figure><p>需要提醒大家，集合中的元素必须是<code>hashable</code>类型，所谓<code>hashable</code>类型指的是能够计算出哈希码的数据类型，通常不可变类型都是<code>hashable</code>类型，如整数（<code>int</code>）、浮点小数（<code>float</code>）、布尔值（<code>bool</code>）、字符串（<code>str</code>）、元组（<code>tuple</code>）等。<br />可变类型都不是<code>hashable</code>类型，因为可变类型无法计算出确定的哈希码，所以它们不能放到集合中。例如：我们不能将列表作为集合中的元素；同理，由于集合本身也是可变类型，所以集合也不能作为集合中的元素。<br />我们可以创建出嵌套列表（列表的元素也是列表），但是我们不能创建出嵌套的集合，这一点在使用集合的时候一定要引起注意。</p><blockquote><p><strong>温馨提示</strong>：如果不理解上面提到的哈希码、哈希存储这些概念，可以先放放，因为它并不影响你继续学习和使用 Python 语言。当然，如果是计算机专业的小伙伴，不理解哈希存储是很难被原谅的，要赶紧去补课了。</p></blockquote><h3 id="元素的遍历"><a class="markdownIt-Anchor" href="#元素的遍历"></a> 元素的遍历</h3><p>我们可以通过<code>len</code>函数来获得集合中有多少个元素，但是我们不能通过索引运算来遍历集合中的元素，因为集合元素并没有特定的顺序。当然，要实现对集合元素的遍历，我们仍然可以使用<code>for-in</code>循环，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Kotlin&#x27;</span>, <span class="hljs-string">&#x27;Swift&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> set1:<br>    <span class="hljs-built_in">print</span>(elem)<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：大家看看上面代码的运行结果，通过单词输出的顺序体会一下集合的无序性。</p></blockquote><h3 id="集合的运算"><a class="markdownIt-Anchor" href="#集合的运算"></a> 集合的运算</h3><p>Python 为集合类型提供了非常丰富的运算，主要包括：成员运算、交集运算、并集运算、差集运算、比较运算（相等性、子集、超集）等。</p><h4 id="成员运算"><a class="markdownIt-Anchor" href="#成员运算"></a> 成员运算</h4><p>可以通过成员运算<code>in</code>和<code>not in </code>检查元素是否在集合中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> set1)      <span class="hljs-comment"># False </span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">15</span> <span class="hljs-keyword">in</span> set1)      <span class="hljs-comment"># True</span><br>set2 = &#123;<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Swift&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Ruby&#x27;</span> <span class="hljs-keyword">in</span> set2)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Java&#x27;</span> <span class="hljs-keyword">in</span> set2)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h4 id="二元运算"><a class="markdownIt-Anchor" href="#二元运算"></a> 二元运算</h4><p>集合的二元运算主要指集合的交集、并集、差集、对称差等运算，这些运算可以通过运算符来实现，也可以通过集合类型的方法来实现，代码如下所示。</p><style>.zfyclkimihfk{zoom:50%;}</style><img src="/waterbottle/posts/b61c/set_operations.png" class="zfyclkimihfk"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>set2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;<br><br><span class="hljs-comment"># 交集</span><br><span class="hljs-built_in">print</span>(set1 &amp; set2)                      <span class="hljs-comment"># &#123;2, 4, 6&#125;</span><br><span class="hljs-built_in">print</span>(set1.intersection(set2))          <span class="hljs-comment"># &#123;2, 4, 6&#125;</span><br><br><span class="hljs-comment"># 并集</span><br><span class="hljs-built_in">print</span>(set1 | set2)                      <span class="hljs-comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span><br><span class="hljs-built_in">print</span>(set1.union(set2))                 <span class="hljs-comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span><br><br><span class="hljs-comment"># 差集</span><br><span class="hljs-built_in">print</span>(set1 - set2)                      <span class="hljs-comment"># &#123;1, 3, 5, 7&#125;</span><br><span class="hljs-built_in">print</span>(set1.difference(set2))            <span class="hljs-comment"># &#123;1, 3, 5, 7&#125;</span><br><br><span class="hljs-comment"># 对称差</span><br><span class="hljs-built_in">print</span>(set1 ^ set2)                      <span class="hljs-comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span><br><span class="hljs-built_in">print</span>(set1.symmetric_difference(set2))  <span class="hljs-comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span><br></code></pre></td></tr></table></figure><p>通过上面的代码可以看出，对两个集合求交集，<code>&amp;</code>运算符和<code>intersection</code>方法的作用是完全相同的，使用运算符的方式显然更直观且代码也更简短。<br />需要说明的是，集合的二元运算还可以跟赋值运算一起构成复合赋值运算。<br />例如：<code>set1 |= set2</code>相当于<code>set1 = set1 | set2</code>，跟<code>|=</code>作用相同的方法是<code>update</code>；<code>set1 &amp;= set2</code>相当于<code>set1 = set1 &amp; set2</code>，跟<code>&amp;=</code>作用相同的方法是<code>intersection_update</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;<br>set2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;<br>set1 |= set2<br><span class="hljs-comment"># set1.update(set2)</span><br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;1, 2, 3, 4, 5, 6, 7&#125;</span><br>set3 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;<br>set1 &amp;= set3<br><span class="hljs-comment"># set1.intersection_update(set3)</span><br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;3, 6&#125;</span><br>set2 -= set1<br><span class="hljs-comment"># set2.difference_update(set1)</span><br><span class="hljs-built_in">print</span>(set2)  <span class="hljs-comment"># &#123;2, 4&#125;</span><br></code></pre></td></tr></table></figure><h4 id="比较运算"><a class="markdownIt-Anchor" href="#比较运算"></a> 比较运算</h4><p>两个集合可以用<code>==</code>和<code>!=</code>进行相等性判断，如果两个集合中的元素完全相同，那么<code>==</code>比较的结果就是<code>True</code>，否则就是<code>False</code>。<br />如果集合<code>A</code>的任意一个元素都是集合<code>B</code>的元素，那么集合<code>A</code>称为集合<code>B</code>的子集，即对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi mathvariant="normal">∀</mi><mi>a</mi><mo>∈</mo><mi>A</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{\forall{a} \in {A} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.660186em;vertical-align:-0.035190000000000006em;"></span><span class="mord sizing reset-size6 size5"><span class="mord">∀</span><span class="mord"><span class="mord mathnormal">a</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span></span></span></span> ，均有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>a</mi><mo>∈</mo><mi>B</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{ {a} \in {B} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6501870000000001em;vertical-align:-0.035190000000000006em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">a</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></span></span> ，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{ {A} \subseteq {B} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7373700000000001em;vertical-align:-0.12237300000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">A</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></span></span> ，<code>A</code>是<code>B</code>的子集，反过来也可以称<code>B</code>是<code>A</code>的超集。 如果<code>A</code>是<code>B</code>的子集且<code>A</code>不等于<code>B</code>，那么<code>A</code>就是<code>B</code>的真子集。<br />Python 为集合类型提供了判断子集和超集的运算符，其实就是我们非常熟悉的<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>这些运算符。<br />当然，我们也可以通过集合类型的方法<code>issubset</code>和<code>issuperset</code>来判断集合之间的关系，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>set3 = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-built_in">print</span>(set1 &lt; set2)   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(set1 &lt;= set2)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(set2 &lt; set3)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(set2 &lt;= set3)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(set2 &gt; set1)   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(set2 == set3)  <span class="hljs-comment"># True</span><br><br><span class="hljs-built_in">print</span>(set1.issubset(set2))    <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(set2.issuperset(set1))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码中，<code>set1 &lt; set2</code>判断<code>set1</code>是不是<code>set2</code>的真子集，<code>set1 &lt;= set2</code>判断<code>set1</code>是不是<code>set2</code>的子集，<code>set2 &gt; set1</code>判断<code>set2</code>是不是<code>set1</code>的超集。当然，我们也可以通过<code>set1.issubset(set2)</code>判断<code>set1</code>是不是<code>set2</code>的子集；通过<code>set2.issuperset(set1)</code>判断<code>set2</code>是不是<code>set1</code>的超集。</p></blockquote><h3 id="集合的方法"><a class="markdownIt-Anchor" href="#集合的方法"></a> 集合的方法</h3><p>刚才我们说过，Python 中的集合是可变类型，我们可以通过集合的方法向集合添加元素或从集合中删除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>&#125;<br><br><span class="hljs-comment"># 添加元素</span><br>set1.add(<span class="hljs-number">1000</span>)<br>set1.add(<span class="hljs-number">10000</span>)<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;1, 100, 1000, 10, 10000&#125;</span><br><br><span class="hljs-comment"># 删除元素</span><br>set1.discard(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">100</span> <span class="hljs-keyword">in</span> set1:<br>    set1.remove(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;1, 1000, 10000&#125;</span><br><br><span class="hljs-comment"># 清空元素</span><br>set1.clear()<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># set()</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：删除元素的<code>remove</code>方法在元素不存在时会引发<code>KeyError</code>错误，所以上面的代码中我们先通过成员运算判断元素是否在集合中。<br />集合类型还有一个<code>pop</code>方法可以从集合中随机删除一个元素，该方法在删除元素的同时会返回（获得）被删除的元素，而<code>remove</code>和<code>discard</code>方法仅仅是删除元素，不会返回（获得）被删除的元素。</p></blockquote><p>集合类型还有一个名为<code>isdisjoint</code>的方法可以判断两个集合有没有相同的元素，如果没有相同元素，该方法返回<code>True</code>，否则该方法返回<code>False</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Kotlin&#x27;</span>&#125;<br>set2 = &#123;<span class="hljs-string">&#x27;Kotlin&#x27;</span>, <span class="hljs-string">&#x27;Swift&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Dart&#x27;</span>&#125;<br>set3 = &#123;<span class="hljs-string">&#x27;HTML&#x27;</span>, <span class="hljs-string">&#x27;CSS&#x27;</span>, <span class="hljs-string">&#x27;JavaScript&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(set1.isdisjoint(set2))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(set1.isdisjoint(set3))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="不可变集合"><a class="markdownIt-Anchor" href="#不可变集合"></a> 不可变集合</h3><p>Python 中还有一种不可变类型的集合，名字叫<code>frozenset</code>。<code>set</code>跟<code>frozenset</code>的区别就如同<code>list</code>跟<code>tuple</code>的区别，<code>frozenset</code>由于是不可变类型，能够计算出哈希码，因此它可以作为<code>set</code>中的元素。<br />除了不能添加和删除元素，<code>frozenset</code>在其他方面跟<code>set</code>是一样的，下面的代码简单的展示了<code>frozenset</code>的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">fset1 = <span class="hljs-built_in">frozenset</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;)<br>fset2 = <span class="hljs-built_in">frozenset</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(fset1)          <span class="hljs-comment"># frozenset(&#123;1, 3, 5, 7&#125;)</span><br><span class="hljs-built_in">print</span>(fset2)          <span class="hljs-comment"># frozenset(&#123;1, 2, 3, 4, 5&#125;)</span><br><span class="hljs-built_in">print</span>(fset1 &amp; fset2)  <span class="hljs-comment"># frozenset(&#123;1, 3, 5&#125;)</span><br><span class="hljs-built_in">print</span>(fset1 | fset2)  <span class="hljs-comment"># frozenset(&#123;1, 2, 3, 4, 5, 7&#125;)</span><br><span class="hljs-built_in">print</span>(fset1 - fset2)  <span class="hljs-comment"># frozenset(&#123;7&#125;)</span><br><span class="hljs-built_in">print</span>(fset1 &lt; fset2)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10.常用数据结构之元组</title>
    <link href="/waterbottle/posts/828b/"/>
    <url>/waterbottle/posts/828b/</url>
    
    <content type="html"><![CDATA[<p>认识元组和其特性</p><span id="more"></span><h2 id="常用数据结构之元组"><a class="markdownIt-Anchor" href="#常用数据结构之元组"></a> 常用数据结构之元组</h2><p>前面的两节课，我们为大家讲解了 Python 中的列表，它是一种容器型的数据类型，通过列表类型的变量，我们可以保存多个数据并通过循环实现对数据的批量操作。<br />当然，Python 中还有其他容器型的数据类型，接下来我们就为大家讲解另一种容器型的数据类型，它的名字叫元组（tuple）。</p><h3 id="元组的定义和运算"><a class="markdownIt-Anchor" href="#元组的定义和运算"></a> 元组的定义和运算</h3><p>在 Python 语言中，元组也是多个元素按照一定顺序构成的序列。<br />元组和列表的不同之处在于，<strong>元组是不可变类型</strong>，这就意味着元组类型的变量一旦定义，其中的元素不能再添加或删除，而且元素的值也不能修改。<br />如果试图修改元组中的元素，将引发<code>TypeError</code>错误，导致程序崩溃。定义元组通常使用形如<code>(x, y, z)</code>的字面量语法，元组类型支持的运算符跟列表是一样的，我们可以看看下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个三元组</span><br>t1 = (<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">98</span>)<br><span class="hljs-comment"># 定义一个四元组</span><br>t2 = (<span class="hljs-string">&#x27;瓶子&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;江苏南京&#x27;</span>)<br><br><span class="hljs-comment"># 查看变量的类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t1))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t2))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><br><span class="hljs-comment"># 查看元组中元素的数量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(t1))  <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(t2))  <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># 索引运算</span><br><span class="hljs-built_in">print</span>(t1[<span class="hljs-number">0</span>])    <span class="hljs-comment"># 35</span><br><span class="hljs-built_in">print</span>(t1[<span class="hljs-number">2</span>])    <span class="hljs-comment"># 98</span><br><span class="hljs-built_in">print</span>(t2[-<span class="hljs-number">1</span>])   <span class="hljs-comment"># 江苏南京</span><br><br><span class="hljs-comment"># 切片运算</span><br><span class="hljs-built_in">print</span>(t2[:<span class="hljs-number">2</span>])   <span class="hljs-comment"># (&#x27;瓶子&#x27;, 20)</span><br><span class="hljs-built_in">print</span>(t2[::<span class="hljs-number">3</span>])  <span class="hljs-comment"># (&#x27;瓶子&#x27;, &#x27;江苏南京&#x27;)</span><br><br><span class="hljs-comment"># 循环遍历元组中的元素</span><br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> t1:<br>    <span class="hljs-built_in">print</span>(elem)<br><br><span class="hljs-comment"># 成员运算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">12</span> <span class="hljs-keyword">in</span> t1)         <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">99</span> <span class="hljs-keyword">in</span> t1)         <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hao&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> t2)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 拼接运算</span><br>t3 = t1 + t2<br><span class="hljs-built_in">print</span>(t3)  <span class="hljs-comment"># (35, 12, 98, &#x27;瓶子&#x27;, 43, True, &#x27;江苏南京&#x27;)</span><br><br><span class="hljs-comment"># 比较运算</span><br><span class="hljs-built_in">print</span>(t1 == t3)            <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(t1 &gt;= t3)            <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(t1 &lt;= (<span class="hljs-number">35</span>, <span class="hljs-number">11</span>, <span class="hljs-number">99</span>))  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><p>一个元组中如果有两个元素，我们就称之为二元组；一个元组中如果五个元素，我们就称之为五元组。<br />需要提醒大家注意的是，<code>()</code>表示空元组，但是如果元组中只有一个元素，需要加上一个逗号，否则<code>()</code>就不是代表元组的字面量语法，而是改变运算优先级的圆括号，所以<code>('hello', )</code>和<code>(100, )</code>才是一元组。<br />而<code>('hello')</code>和<code>(100)</code>只是字符串和整数。我们可以通过下面的代码来加以验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = ()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br>b = (<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))  <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br>c = (<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))  <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br>d = (<span class="hljs-string">&#x27;hello&#x27;</span>, )<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br>e = (<span class="hljs-number">100</span>, )<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="打包和解包操作"><a class="markdownIt-Anchor" href="#打包和解包操作"></a> 打包和解包操作</h3><p>当我们把多个用逗号分隔的值赋给一个变量时，多个值会打包成一个元组类型；当我们把一个元组赋值给多个变量时，元组会解包成多个值然后分别赋给对应的变量，如下面的代码所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打包操作</span><br>a = <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(a)        <span class="hljs-comment"># (1, 10, 100)</span><br><span class="hljs-comment"># 解包操作</span><br>i, j, k = a<br><span class="hljs-built_in">print</span>(i, j, k)  <span class="hljs-comment"># 1 10 100</span><br></code></pre></td></tr></table></figure><p>在解包时，如果解包出来的元素个数和变量个数不对应，会引发<code>ValueError</code>异常，错误信息为：<code>too many values to unpack</code>（解包的值太多）或<code>not enough values to unpack</code>（解包的值不足）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span><br><span class="hljs-comment"># i, j, k = a             # ValueError: too many values to unpack (expected 3)</span><br><span class="hljs-comment"># i, j, k, l, m, n = a    # ValueError: not enough values to unpack (expected 6, got 4)</span><br></code></pre></td></tr></table></figure><p>有一种解决变量个数少于元素的个数方法，就是使用星号表达式。通过星号表达式，我们可以让一个变量接收多个值，代码如下所示。<br />需要注意两点：首先，用星号表达式修饰的变量会变成一个列表，列表中有0个或多个元素；其次，在解包语法中，星号表达式只能出现一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span><br>i, j, *k = a<br><span class="hljs-built_in">print</span>(i, j, k)        <span class="hljs-comment"># 1 10 [100, 1000]</span><br>i, *j, k = a<br><span class="hljs-built_in">print</span>(i, j, k)        <span class="hljs-comment"># 1 [10, 100] 1000</span><br>*i, j, k = a<br><span class="hljs-built_in">print</span>(i, j, k)        <span class="hljs-comment"># [1, 10] 100 1000</span><br>*i, j = a<br><span class="hljs-built_in">print</span>(i, j)           <span class="hljs-comment"># [1, 10, 100] 1000</span><br>i, *j = a<br><span class="hljs-built_in">print</span>(i, j)           <span class="hljs-comment"># 1 [10, 100, 1000]</span><br>i, j, k, *l = a<br><span class="hljs-built_in">print</span>(i, j, k, l)     <span class="hljs-comment"># 1 10 100 [1000]</span><br>i, j, k, l, *m = a<br><span class="hljs-built_in">print</span>(i, j, k, l, m)  <span class="hljs-comment"># 1 10 100 1000 []</span><br></code></pre></td></tr></table></figure><p>需要说明一点，解包语法对所有的序列都成立，这就意味着我们之前讲的列表、<code>range</code>函数构造的范围序列甚至字符串都可以使用解包语法。大家可以尝试运行下面的代码，看看会出现怎样的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b, *c = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(a, b, c)<br>a, b, c = [<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>]<br><span class="hljs-built_in">print</span>(a, b, c)<br>a, *b, c = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(a, b, c)<br></code></pre></td></tr></table></figure><h3 id="交换变量的值"><a class="markdownIt-Anchor" href="#交换变量的值"></a> 交换变量的值</h3><p>交换变量的值是写代码时经常用到的一个操作，但是在很多编程语言中，交换两个变量的值都需要借助一个中间变量才能做到，如果不用中间变量就需要使用比较晦涩的位运算来实现。<br />在 Python 中，交换两个变量<code>a</code>和<code>b</code>的值只需要使用如下所示的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = b, a<br></code></pre></td></tr></table></figure><p>同理，如果要将三个变量<code>a</code>、<code>b</code>、<code>c</code>的值互换，即<code>b</code>的值赋给<code>a</code>，<code>c</code>的值赋给<code>b</code>，<code>a</code>的值赋给<code>c</code>，也可以如法炮制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b, c = b, c, a<br></code></pre></td></tr></table></figure><p>需要说明的是，上面的操作并没有用到打包和解包语法，Python 的字节码指令中有<code>ROT_TWO</code>和<code>ROT_THREE</code>这样的指令可以直接实现这个操作，效率是非常高的。<br />但是如果有多于三个变量的值要依次互换，这个时候是没有直接可用的字节码指令的，需要通过打包解包的方式来完成变量之间值的交换。</p><h3 id="元组和列表的比较"><a class="markdownIt-Anchor" href="#元组和列表的比较"></a> 元组和列表的比较</h3><p>这里还有一个非常值得探讨的问题，Python 中已经有了列表类型，为什么还需要元组这样的类型呢？这个问题对于初学者来说似乎有点困难，不过没有关系，我们先抛出观点，大家可以一边学习一边慢慢体会。</p><ol><li><p>元组是不可变类型，<strong>不可变类型更适合多线程环境</strong>，因为它降低了并发访问变量的同步化开销。关于这一点，我们会在后面讲解并发编程的时候跟大家一起探讨。</p></li><li><p>元组是不可变类型，通常<strong>不可变类型在创建时间上优于对应的可变类型</strong>。我们可以使用<code>timeit</code>模块的<code>timeit</code>函数来看看创建保存相同元素的元组和列表各自花费的时间，<code>timeit</code>函数的<code>number</code>参数表示代码执行的次数。下面的代码中，我们分别创建了保存<code>1</code>到<code>9</code>的整数的列表和元组，每个操作执行<code>10000000</code>次，统计运行时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> timeit<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.3f 秒&#x27;</span> % timeit.timeit(<span class="hljs-string">&#x27;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#x27;</span>, number=<span class="hljs-number">10000000</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.3f 秒&#x27;</span> % timeit.timeit(<span class="hljs-string">&#x27;(1, 2, 3, 4, 5, 6, 7, 8, 9)&#x27;</span>, number=<span class="hljs-number">10000000</span>))<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">310</span> 秒<br><span class="hljs-attribute">0</span>.<span class="hljs-number">063</span> 秒<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面代码的执行结果因软硬件系统而异。</p></blockquote></li></ol><p>当然，Python 中的元组和列表类型是可以相互转换的，我们可以通过下面的代码来完成该操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">infos = (<span class="hljs-string">&#x27;瓶子&#x27;</span>, <span class="hljs-number">43</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;江苏南京&#x27;</span>)<br><span class="hljs-comment"># 将元组转换成列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(infos))  <span class="hljs-comment"># [&#x27;瓶子&#x27;, 43, True, &#x27;江苏南京&#x27;]</span><br><br>frts = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-comment"># 将列表转换成元组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(frts))  <span class="hljs-comment"># (&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;)</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p><strong>列表和元组都是容器型的数据类型</strong>，即一个变量可以保存多个数据，而且它们都是按一定顺序组织元素的有序容器。<strong>列表是可变数据类型</strong>，<strong>元组是不可变数据类型</strong>，所以列表可以添加元素、删除元素、清空元素、排序反转，但这些操作对元组来说是不成立的。列表和元组都可以支持<strong>拼接运算</strong>、<strong>成员运算</strong>、<strong>索引运算</strong>、<strong>切片运算</strong>等操作，后面我们要讲到的字符串类型也支持这些运算，因为字符串就是字符按一定顺序构成的序列，在这一点上三者并没有什么区别。我们<strong>推荐大家使用列表的生成式语法来创建列表</strong>，它不仅好用而且效率很高，是 Python 语言中非常有特色的语法。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11.常用数据结构之字符串</title>
    <link href="/waterbottle/posts/a08a/"/>
    <url>/waterbottle/posts/a08a/</url>
    
    <content type="html"><![CDATA[<p>认识字符串</p><span id="more"></span><h2 id="常用数据结构之字符串"><a class="markdownIt-Anchor" href="#常用数据结构之字符串"></a> 常用数据结构之字符串</h2><p>第二次世界大战促使了现代电子计算机的诞生，世界上的第一台通用电子计算机名叫 ENIAC（电子数值积分计算机）。<br />诞生于美国的宾夕法尼亚大学，占地167平米，重量约27吨，每秒钟大约能够完成约5000次浮点运算。<br />ENIAC 诞生之后被应用于导弹弹道的计算，而数值计算也是现代电子计算机最为重要的一项功能。</p><p>随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的组成部分，但是今天的计算机还要处理大量的以文本形式存在的信息。<br />如果我们希望通过 Python 程序来操作本这些文本信息，就必须要先了解字符串这种数据类型以及与它相关的运算和方法。</p><h3 id="字符串的定义"><a class="markdownIt-Anchor" href="#字符串的定义"></a> 字符串的定义</h3><p>所谓<strong>字符串</strong>，就是<strong>由零个或多个字符组成的有限序列</strong></p><p>在 Python 程序中，我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。字符串中的字符可以是特殊符号、英文字母、中文字符、日文的平假名或片假名、希腊字母、Emoji 字符（如：💩、🐷、🀄️）等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br>s2 = <span class="hljs-string">&quot;你好，世界！❤️&quot;</span><br>s3 = <span class="hljs-string">&#x27;&#x27;&#x27;hello,</span><br><span class="hljs-string">wonderful</span><br><span class="hljs-string">world!&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s3)<br></code></pre></td></tr></table></figure><h4 id="转义字符"><a class="markdownIt-Anchor" href="#转义字符"></a> 转义字符</h4><p>我们可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，<br />例如：<code>\n</code>不是代表字符<code>\</code>和字符<code>n</code>，而是表示换行；<code>\t</code>也不是代表字符<code>\</code>和字符<code>t</code>，而是表示制表符。<br />所以如果字符串本身又包含了<code>'</code>、<code>&quot;</code>、<code>\</code>这些特殊的字符，必须要通过<code>\</code>进行转义处理。例如要输出一个带单引号或反斜杠的字符串，需要用如下所示的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span><br>s2 = <span class="hljs-string">&#x27;\\hello, world!\\&#x27;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure><h4 id="原始字符串"><a class="markdownIt-Anchor" href="#原始字符串"></a> 原始字符串</h4><p>Python 中有一种以<code>r</code>或<code>R</code>开头的字符串，这种字符串被称为原始字符串，意思是字符串中的每个字符都是它本来的含义，没有所谓的转义字符。<br />例如，在字符串<code>'hello\n'</code>中，<code>\n</code>表示换行；而在<code>r'hello\n'</code>中，<code>\n</code>不再表示换行，就是字符<code>\</code>和字符<code>n</code>。大家可以运行下面的代码，看看会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;\it \is \time \to \read \now&#x27;</span><br>s2 = <span class="hljs-string">r&#x27;\it \is \time \to \read \now&#x27;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的变量<code>s1</code>中，<code>\t</code>、<code>\r</code>和<code>\n</code>都是转义字符。<code>\t</code>是制表符（table），<code>\n</code>是换行符（new line），<code>\r</code>是回车符（carriage return）相当于让输出回到了行首。<br />对比一下两个<code>print</code>函数的输出，看看到底有什么区别！</p></blockquote><h4 id="字符的特殊表示"><a class="markdownIt-Anchor" href="#字符的特殊表示"></a> 字符的特殊表示</h4><p>Python 中还允许在<code>\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\141</code>和<code>\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。<br />另外一种表示字符的方式是在<code>\u</code>后面跟 Unicode 字符编码，例如<code>\u9a86\u660a</code>代表的是中文“瓶子”。运行下面的代码，看看输出了什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;\141\142\143\x61\x62\x63&#x27;</span><br>s2 = <span class="hljs-string">&#x27;\u74f6\u5b50&#x27;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure><h3 id="字符串的运算"><a class="markdownIt-Anchor" href="#字符串的运算"></a> 字符串的运算</h3><p>Python 语言为字符串类型提供了非常丰富的运算符，有很多运算符跟列表类型的运算符作用类似。<br />例如，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串。<br />我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符。</p><h4 id="拼接和重复"><a class="markdownIt-Anchor" href="#拼接和重复"></a> 拼接和重复</h4><p>下面的例子演示了使用<code>+</code>和<code>*</code>运算符来实现字符串的拼接和重复操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-built_in">print</span>(s1)    <span class="hljs-comment"># hello, world</span><br>s2 = <span class="hljs-string">&#x27;!&#x27;</span> * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(s2)    <span class="hljs-comment"># !!!</span><br>s1 += s2<br><span class="hljs-built_in">print</span>(s1)    <span class="hljs-comment"># hello, world!!!</span><br>s1 *= <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(s1)    <span class="hljs-comment"># hello, world!!!hello, world!!!</span><br></code></pre></td></tr></table></figure><p>用<code>*</code>实现字符串的重复是非常有意思的一个运算符，在很多编程语言中，要表示一个有10个<code>a</code>的字符串，你只能写成<code>'aaaaaaaaaa'</code>，但是在 Python 中，你可以写成<code>'a' * 10</code>。<br />你可能觉得<code>'aaaaaaaaaa'</code>这种写法也没有什么不方便的，但是请想一想，如果字符<code>a</code>要重复100次或者1000次又会如何呢？</p><h4 id="比较运算"><a class="markdownIt-Anchor" href="#比较运算"></a> 比较运算</h4><p>对于两个字符串类型的变量，可以直接使用比较运算符来判断两个字符串的相等性或比较大小。需要说明的是，因为字符串在计算机内存中也是以二进制形式存在的，那么字符串的大小比较比的是每个字符对应的编码的大小。<br />例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>'A' &lt; 'a'</code>的结果相当于就是<code>65 &lt; 97</code>的结果，这里很显然是<code>True</code>；而<code>'boy' &lt; 'bad'</code>，因为第一个字符都是<code>'b'</code>比不出大小，所以实际比较的是第二个字符的大小。显然<code>'o' &lt; 'a'</code>的结果是<code>False</code>，所以<code>'boy' &lt; 'bad'</code>的结果是<code>False</code>。<br />如果不清楚两个字符对应的编码到底是多少，可以使用<code>ord</code>函数来获得，之前我们有提到过这个函数。<br />例如<code>ord('A')</code>的值是<code>65</code>，而<code>ord('子')</code>的值是<code>23376</code>。下面的代码展示了字符串的比较运算，请大家仔细看看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;a whole new world&#x27;</span><br>s2 = <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-built_in">print</span>(s1 == s2)             <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(s1 &lt; s2)              <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s1 == <span class="hljs-string">&#x27;hello world&#x27;</span>)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(s2 == <span class="hljs-string">&#x27;hello world&#x27;</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s2 != <span class="hljs-string">&#x27;Hello world&#x27;</span>)  <span class="hljs-comment"># True</span><br>s3 = <span class="hljs-string">&#x27;瓶子&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;瓶&#x27;</span>))            <span class="hljs-comment"># 29942</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;子&#x27;</span>))            <span class="hljs-comment"># 23376</span><br>s4 = <span class="hljs-string">&#x27;王大锤&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;王&#x27;</span>))            <span class="hljs-comment"># 29579</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;大&#x27;</span>))            <span class="hljs-comment"># 22823</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;锤&#x27;</span>))            <span class="hljs-comment"># 38180</span><br><span class="hljs-built_in">print</span>(s3 &gt;= s4)             <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s3 != s4)             <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h4 id="成员运算"><a class="markdownIt-Anchor" href="#成员运算"></a> 成员运算</h4><p>Python 中可以用<code>in</code>和<code>not in</code>判断一个字符串中是否包含另外一个字符或字符串，跟列表类型一样，<code>in</code>和<code>not in</code>称为成员运算符，会产生布尔值<code>True</code>或<code>False</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>s2 = <span class="hljs-string">&#x27;goodbye, world&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wo&#x27;</span> <span class="hljs-keyword">in</span> s1)      <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wo&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s2)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(s2 <span class="hljs-keyword">in</span> s1)        <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h4 id="获取字符串长度"><a class="markdownIt-Anchor" href="#获取字符串长度"></a> 获取字符串长度</h4><p>获取字符串长度跟获取列表元素个数一样，使用内置函数<code>len</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello, world&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))                 <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;goodbye, world&#x27;</span>))  <span class="hljs-comment"># 14</span><br></code></pre></td></tr></table></figure><h4 id="索引和切片"><a class="markdownIt-Anchor" href="#索引和切片"></a> 索引和切片</h4><p>字符串的索引和切片操作跟列表、元组几乎没有区别，因为字符串也是一种有序序列，可以通过正向或反向的整数索引访问其中的元素。但是有一点需要注意，因为<strong>字符串是不可变类型</strong>，所以<strong>不能通过索引运算修改字符串中的字符</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;abc123456&#x27;</span><br>n = <span class="hljs-built_in">len</span>(s)<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>], s[-n])    <span class="hljs-comment"># a a</span><br><span class="hljs-built_in">print</span>(s[n-<span class="hljs-number">1</span>], s[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 6 6</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">2</span>], s[-<span class="hljs-number">7</span>])    <span class="hljs-comment"># c c</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">5</span>], s[-<span class="hljs-number">4</span>])    <span class="hljs-comment"># 3 3</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])         <span class="hljs-comment"># c12</span><br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">7</span>:-<span class="hljs-number">4</span>])       <span class="hljs-comment"># c12</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">2</span>:])          <span class="hljs-comment"># c123456</span><br><span class="hljs-built_in">print</span>(s[:<span class="hljs-number">2</span>])          <span class="hljs-comment"># ab</span><br><span class="hljs-built_in">print</span>(s[::<span class="hljs-number">2</span>])         <span class="hljs-comment"># ac246</span><br><span class="hljs-built_in">print</span>(s[::-<span class="hljs-number">1</span>])        <span class="hljs-comment"># 654321cba</span><br></code></pre></td></tr></table></figure><p>需要再次提醒大家注意的是，在进行索引运算时，如果索引越界，会引发<code>IndexError</code>异常，错误提示信息为：<code>string index out of range</code>（字符串索引超出范围）。</p><h3 id="字符的遍历"><a class="markdownIt-Anchor" href="#字符的遍历"></a> 字符的遍历</h3><p>如果希望遍历字符串中的每个字符，可以使用<code>for-in</code>循环，有如下所示的两种方式。</p><p>方式一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    <span class="hljs-built_in">print</span>(s[i])<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(elem)<br></code></pre></td></tr></table></figure><h3 id="字符串的方法"><a class="markdownIt-Anchor" href="#字符串的方法"></a> 字符串的方法</h3><p>在 Python 中，我们可以通过字符串类型自带的方法对字符串进行操作和处理，假设我们有名为<code>foo</code>的字符串，字符串有名为<code>bar</code>的方法，那么使用字符串方法的语法是：<code>foo.bar()</code>，这是一种通过对象引用调用对象方法的语法，跟前面使用列表方法的语法是一样的。</p><h4 id="大小写相关操作"><a class="markdownIt-Anchor" href="#大小写相关操作"></a> 大小写相关操作</h4><p>下面的代码演示了和字符串大小写变换相关的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br><span class="hljs-comment"># 字符串首字母大写</span><br><span class="hljs-built_in">print</span>(s1.capitalize())  <span class="hljs-comment"># Hello, world!</span><br><span class="hljs-comment"># 字符串每个单词首字母大写</span><br><span class="hljs-built_in">print</span>(s1.title())       <span class="hljs-comment"># Hello, World!</span><br><span class="hljs-comment"># 字符串变大写</span><br><span class="hljs-built_in">print</span>(s1.upper())       <span class="hljs-comment"># HELLO, WORLD!</span><br>s2 = <span class="hljs-string">&#x27;GOODBYE&#x27;</span><br><span class="hljs-comment"># 字符串变小写</span><br><span class="hljs-built_in">print</span>(s2.lower())       <span class="hljs-comment"># goodbye</span><br><span class="hljs-comment"># 检查s1和s2的值</span><br><span class="hljs-built_in">print</span>(s1)               <span class="hljs-comment"># hello, world</span><br><span class="hljs-built_in">print</span>(s2)               <span class="hljs-comment"># GOODBYE</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：由于字符串是不可变类型，使用字符串的方法对字符串进行操作会产生新的字符串，但是原来变量的值并没有发生变化。所以上面的代码中，当我们最后检查<code>s1</code>和<code>s2</code>两个变量的值时，<code>s1</code>和<code>s2</code> 的值并没有发生变化。</p></blockquote><h4 id="查找操作"><a class="markdownIt-Anchor" href="#查找操作"></a> 查找操作</h4><p>如果想在一个字符串中从前向后查找有没有另外一个字符串，可以使用字符串的<code>find</code>或<code>index</code>方法。在使用<code>find</code>和<code>index</code>方法时还可以通过方法的参数来指定查找的范围，也就是查找不必从索引为<code>0</code>的位置开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;or&#x27;</span>))      <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-number">9</span>))   <span class="hljs-comment"># -1</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;of&#x27;</span>))      <span class="hljs-comment"># -1</span><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-string">&#x27;or&#x27;</span>))     <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-number">9</span>))  <span class="hljs-comment"># ValueError: substring not found</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>find</code>方法找不到指定的字符串会返回<code>-1</code>，<code>index</code>方法找不到指定的字符串会引发<code>ValueError</code>错误。</p></blockquote><p><code>find</code>和<code>index</code>方法还有逆向查找（从后向前查找）的版本，分别是<code>rfind</code>和<code>rindex</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello world!&#x27;</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;o&#x27;</span>))       <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(s.rfind(<span class="hljs-string">&#x27;o&#x27;</span>))      <span class="hljs-comment"># 7</span><br><span class="hljs-built_in">print</span>(s.rindex(<span class="hljs-string">&#x27;o&#x27;</span>))     <span class="hljs-comment"># 7</span><br><span class="hljs-comment"># print(s.rindex(&#x27;o&#x27;, 8))  # ValueError: substring not found</span><br></code></pre></td></tr></table></figure><h4 id="性质判断"><a class="markdownIt-Anchor" href="#性质判断"></a> 性质判断</h4><p>可以通过字符串的<code>startswith</code>、<code>endswith</code>来判断字符串是否以某个字符串开头和结尾；还可以用<code>is</code>开头的方法判断字符串的特征，这些方法都返回布尔值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br><span class="hljs-built_in">print</span>(s1.startswith(<span class="hljs-string">&#x27;He&#x27;</span>))   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(s1.startswith(<span class="hljs-string">&#x27;hel&#x27;</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s1.endswith(<span class="hljs-string">&#x27;!&#x27;</span>))      <span class="hljs-comment"># True</span><br>s2 = <span class="hljs-string">&#x27;abc123456&#x27;</span><br><span class="hljs-built_in">print</span>(s2.isdigit())  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(s2.isalpha())  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(s2.isalnum())  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的<code>isdigit</code>用来判断字符串是不是完全由数字构成的，<code>isalpha</code>用来判断字符串是不是完全由字母构成的，这里的字母指的是 Unicode 字符但不包含 Emoji 字符，<code>isalnum</code>用来判断字符串是不是由字母和数字构成的。</p></blockquote><h4 id="格式化"><a class="markdownIt-Anchor" href="#格式化"></a> 格式化</h4><p>在 Python 中，字符串类型可以通过<code>center</code>、<code>ljust</code>、<code>rjust</code>方法做居中、左对齐和右对齐的处理。如果要在字符串的左侧补零，也可以使用<code>zfill</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello, world&#x27;</span><br><span class="hljs-built_in">print</span>(s.center(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;*&#x27;</span>))  <span class="hljs-comment"># ****hello, world****</span><br><span class="hljs-built_in">print</span>(s.rjust(<span class="hljs-number">20</span>))        <span class="hljs-comment">#         hello, world</span><br><span class="hljs-built_in">print</span>(s.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;~&#x27;</span>))   <span class="hljs-comment"># hello, world~~~~~~~~</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;33&#x27;</span>.zfill(<span class="hljs-number">5</span>))      <span class="hljs-comment"># 00033</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-33&#x27;</span>.zfill(<span class="hljs-number">5</span>))     <span class="hljs-comment"># -0033</span><br></code></pre></td></tr></table></figure><p>我们之前讲过，在用<code>print</code>函数输出字符串时，可以用下面的方式对字符串进行格式化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">321</span><br>b = <span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br></code></pre></td></tr></table></figure><p>当然，我们也可以用字符串的<code>format</code>方法来完成字符串的格式，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">321</span><br>b = <span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br></code></pre></td></tr></table></figure><p>从 Python 3.6 开始，格式化字符串还有更为简洁的书写方式，就是在字符串前加上<code>f</code>来格式化字符串，在这种以<code>f</code>打头的字符串中，<code>&#123;变量名&#125;</code>是一个占位符，会被变量对应的值将其替换掉，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">321</span><br>b = <span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = <span class="hljs-subst">&#123;a * b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果需要进一步控制格式化语法中变量值的形式，可以参照下面的表格来进行字符串格式化操作。</p><table><thead><tr><th>变量值</th><th>占位符</th><th>格式化结果</th><th>说明</th></tr></thead><tbody><tr><td><code>3.1415926</code></td><td><code>&#123;:.2f&#125;</code></td><td><code>'3.14'</code></td><td>保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>&#123;:+.2f&#125;</code></td><td><code>'+3.14'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>-1</code></td><td><code>&#123;:+.2f&#125;</code></td><td><code>'-1.00'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>&#123;:.0f&#125;</code></td><td><code>'3'</code></td><td>不带小数</td></tr><tr><td><code>123</code></td><td><code>&#123;:0&gt;10d&#125;</code></td><td><code>'0000000123'</code></td><td>左边补<code>0</code>，补够10位</td></tr><tr><td><code>123</code></td><td><code>&#123;:x&lt;10d&#125;</code></td><td><code>'123xxxxxxx'</code></td><td>右边补<code>x</code> ，补够10位</td></tr><tr><td><code>123</code></td><td><code>&#123;:&gt;10d&#125;</code></td><td><code>'       123'</code></td><td>左边补空格，补够10位</td></tr><tr><td><code>123</code></td><td><code>&#123;:&lt;10d&#125;</code></td><td><code>'123       '</code></td><td>右边补空格，补够10位</td></tr><tr><td><code>123456789</code></td><td><code>&#123;:,&#125;</code></td><td><code>'123,456,789'</code></td><td>逗号分隔格式</td></tr><tr><td><code>0.123</code></td><td><code>&#123;:.2%&#125;</code></td><td><code>'12.30%'</code></td><td>百分比格式</td></tr><tr><td><code>123456789</code></td><td><code>&#123;:.2e&#125;</code></td><td><code>'1.23e+08'</code></td><td>科学计数法格式</td></tr></tbody></table><h4 id="修剪操作"><a class="markdownIt-Anchor" href="#修剪操作"></a> 修剪操作</h4><p>字符串的<code>strip</code>方法可以帮我们获得将原字符串修剪掉左右两端指定字符之后的字符串，默认是修剪空格字符。<br />这个方法非常有实用价值，可以用来将用户输入时不小心键入的头尾空格等去掉，<code>strip</code>方法还有<code>lstrip</code>和<code>rstrip</code>两个版本，相信从名字大家已经猜出来这两个方法是做什么用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;   jackfrued@126.com  &#x27;</span><br><span class="hljs-built_in">print</span>(s1.strip())      <span class="hljs-comment"># jackfrued@126.com</span><br>s2 = <span class="hljs-string">&#x27;~你好，世界~&#x27;</span><br><span class="hljs-built_in">print</span>(s2.lstrip(<span class="hljs-string">&#x27;~&#x27;</span>))  <span class="hljs-comment"># 你好，世界~</span><br><span class="hljs-built_in">print</span>(s2.rstrip(<span class="hljs-string">&#x27;~&#x27;</span>))  <span class="hljs-comment"># ~你好，世界</span><br></code></pre></td></tr></table></figure><h4 id="替换操作"><a class="markdownIt-Anchor" href="#替换操作"></a> 替换操作</h4><p>如果希望用新的内容替换字符串中指定的内容，可以使用<code>replace</code>方法，代码如下所示。<code>replace</code>方法的第一个参数是被替换的内容，第二个参数是替换后的内容，还可以通过第三个参数指定替换的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello, good world&#x27;</span><br><span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>))     <span class="hljs-comment"># hell@, g@@d w@rld</span><br><span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># hell@, good world</span><br></code></pre></td></tr></table></figure><h4 id="拆分与合并"><a class="markdownIt-Anchor" href="#拆分与合并"></a> 拆分与合并</h4><p>可以使用字符串的<code>split</code>方法将一个字符串拆分为多个字符串（放在一个列表中），也可以使用字符串的<code>join</code>方法将列表中的多个字符串连接成一个字符串，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;I love you&#x27;</span><br>words = s.split()<br><span class="hljs-built_in">print</span>(words)            <span class="hljs-comment"># [&#x27;I&#x27;, &#x27;love&#x27;, &#x27;you&#x27;]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;~&#x27;</span>.join(words))  <span class="hljs-comment"># I~love~you</span><br></code></pre></td></tr></table></figure><p>需要说明的是，<code>split</code>方法默认使用空格进行拆分，我们也可以指定其他的字符来拆分字符串，而且还可以指定最大拆分次数来控制拆分的效果，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;I#love#you#so#much&#x27;</span><br>words = s.split(<span class="hljs-string">&#x27;#&#x27;</span>)<br><span class="hljs-built_in">print</span>(words)  <span class="hljs-comment"># [&#x27;I&#x27;, &#x27;love&#x27;, &#x27;you&#x27;, &#x27;so&#x27;, &#x27;much&#x27;]</span><br>words = s.split(<span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(words)  <span class="hljs-comment"># [&#x27;I&#x27;, &#x27;love&#x27;, &#x27;you#so#much&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="编码和解码"><a class="markdownIt-Anchor" href="#编码和解码"></a> 编码和解码</h4><p>Python 中除了字符串<code>str</code>类型外，还有一种表示二进制数据的字节串类型（<code>bytes</code>）。所谓字节串，就是<strong>由零个或多个字节组成的有限序列</strong>。<br />通过字符串的<code>encode</code>方法，我们可以按照某种编码方式将字符串编码为字节串，我们也可以使用字节串的<code>decode</code>方法，将字节串解码为字符串，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;瓶子&#x27;</span><br>b = a.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>c = a.encode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br><span class="hljs-built_in">print</span>(b)                  <span class="hljs-comment"># b&#x27;\xe7\x93\xb6\xe5\xad\x90&#x27;</span><br><span class="hljs-built_in">print</span>(c)                  <span class="hljs-comment"># b&#x27;\xc6\xbf\xd7\xd3&#x27;</span><br><span class="hljs-built_in">print</span>(b.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># 瓶子</span><br><span class="hljs-built_in">print</span>(c.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>))    <span class="hljs-comment"># 瓶子</span><br></code></pre></td></tr></table></figure><p>注意，如果编码和解码的方式不一致，会导致乱码问题（无法再现原始的内容）或引发<code>UnicodeDecodeError</code>错误，导致程序崩溃。</p><h4 id="其他方法"><a class="markdownIt-Anchor" href="#其他方法"></a> 其他方法</h4><p>对于字符串类型来说，还有一个常用的操作是对字符串进行匹配检查，即检查字符串是否满足某种特定的模式。<br />例如，一个网站对用户注册信息中用户名和邮箱的检查，就属于模式匹配检查。实现模式匹配检查的工具叫做正则表达式，Python 语言通过标准库中的<code>re</code>模块提供了对正则表达式的支持，我们会在后续的课程中为大家讲解这个知识点。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>09.常用数据结构之列表-2</title>
    <link href="/waterbottle/posts/b826/"/>
    <url>/waterbottle/posts/b826/</url>
    
    <content type="html"><![CDATA[<p>列表的增删改查</p><span id="more"></span><h2 id="常用数据结构之列表-2"><a class="markdownIt-Anchor" href="#常用数据结构之列表-2"></a> 常用数据结构之列表-2</h2><h3 id="列表的方法"><a class="markdownIt-Anchor" href="#列表的方法"></a> 列表的方法</h3><p>列表类型的变量拥有很多方法可以帮助我们操作一个列表，假设我们有名为<code>foos</code>的列表，列表有名为<code>bar</code>的方法，那么使用列表方法的语法是：<code>foos.bar()</code>，这是一种通过对象引用调用对象方法的语法。<br />后面我们讲面向对象编程的时候，还会对这种语法进行详细的讲解，这种语法也称为给对象发消息。</p><h4 id="添加和删除元素"><a class="markdownIt-Anchor" href="#添加和删除元素"></a> 添加和删除元素</h4><p>列表是一种可变容器，可变容器指的是我们可以向容器中添加元素、可以从容器移除元素，也可以修改现有容器中的元素。<br />我们可以使用列表的<code>append</code>方法向列表中追加元素，使用<code>insert</code>方法向列表中插入元素。<br />追加指的是将元素添加到列表的末尾，而插入则是在指定的位置添加新元素，大家可以看看下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">languages = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]<br>languages.append(<span class="hljs-string">&#x27;JavaScript&#x27;</span>)<br><span class="hljs-built_in">print</span>(languages)  <span class="hljs-comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;C++&#x27;, &#x27;JavaScript&#x27;]</span><br>languages.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;SQL&#x27;</span>)<br><span class="hljs-built_in">print</span>(languages)  <span class="hljs-comment"># [&#x27;Python&#x27;, &#x27;SQL&#x27;, &#x27;Java&#x27;, &#x27;C++&#x27;, &#x27;JavaScript&#x27;]</span><br></code></pre></td></tr></table></figure><p>我们可以用列表的<code>remove</code>方法从列表中删除指定元素，需要注意的是，如果要删除的元素并不在列表中，会引发<code>ValueError</code>错误导致程序崩溃，所以建议大家在删除元素时，先用之前讲过的成员运算做一个判断。<br />我们还可以使用<code>pop</code>方法从列表中删除元素，<code>pop</code>方法默认删除列表中的最后一个元素，当然也可以给一个位置，删除指定位置的元素。<br />在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，导致程序崩溃。<br />除此之外，列表还有一个<code>clear</code>方法，可以清空列表中的元素，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">languages = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;SQL&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;JavaScript&#x27;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Java&#x27;</span> <span class="hljs-keyword">in</span> languages:<br>    languages.remove(<span class="hljs-string">&#x27;Java&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Swift&#x27;</span> <span class="hljs-keyword">in</span> languages:<br>    languages.remove(<span class="hljs-string">&#x27;Swift&#x27;</span>)<br><span class="hljs-built_in">print</span>(languages)  <span class="hljs-comment"># [&#x27;Python&#x27;, &#x27;SQL&#x27;, C++&#x27;, &#x27;JavaScript&#x27;]</span><br>languages.pop()<br>temp = languages.pop(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(temp)       <span class="hljs-comment"># SQL</span><br>languages.append(temp)<br><span class="hljs-built_in">print</span>(languages)  <span class="hljs-comment"># [&#x27;Python&#x27;, C++&#x27;, &#x27;SQL&#x27;]</span><br>languages.clear()<br><span class="hljs-built_in">print</span>(languages)  <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>pop</code>方法删除元素时会得到被删除的元素，上面的代码中，我们将<code>pop</code>方法删除的元素赋值给了名为<code>temp</code>的变量。<br />当然如果你愿意，还可以把这个元素再次加入到列表中，正如上面的代码<code>languages.append(temp)</code>所做的那样。</p></blockquote><p>这里还有一个小问题，例如<code>languages</code>列表中有多个<code>'Python'</code>，那么我们用<code>languages.remove('Python')</code>是删除所有的<code>'Python'</code>，还是删除第一个<code>'Python'</code>，大家可以先猜一猜，然后再自己动手尝试一下。</p><p>从列表中删除元素其实还有一种方式，就是使用 Python 中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">items = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]<br><span class="hljs-keyword">del</span> items[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(items)  <span class="hljs-comment"># [&#x27;Python&#x27;, &#x27;C++&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="元素位置和频次"><a class="markdownIt-Anchor" href="#元素位置和频次"></a> 元素位置和频次</h4><p>列表的<code>index</code>方法可以查找某个元素在列表中的索引位置，如果找不到指定的元素，<code>index</code>方法会引发<code>ValueError</code>错误；列表的<code>count</code>方法可以统计一个元素在列表中出现的次数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">items = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Kotlin&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>]<br><span class="hljs-built_in">print</span>(items.index(<span class="hljs-string">&#x27;Python&#x27;</span>))     <span class="hljs-comment"># 0</span><br><span class="hljs-comment"># 从索引位置1开始查找&#x27;Python&#x27;</span><br><span class="hljs-built_in">print</span>(items.index(<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 5</span><br><span class="hljs-built_in">print</span>(items.count(<span class="hljs-string">&#x27;Python&#x27;</span>))     <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(items.count(<span class="hljs-string">&#x27;Kotlin&#x27;</span>))     <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(items.count(<span class="hljs-string">&#x27;Swfit&#x27;</span>))      <span class="hljs-comment"># 0</span><br><span class="hljs-comment"># 从索引位置3开始查找&#x27;Java&#x27;</span><br><span class="hljs-built_in">print</span>(items.index(<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-number">3</span>))    <span class="hljs-comment"># ValueError: &#x27;Java&#x27; is not in list</span><br></code></pre></td></tr></table></figure><h4 id="元素排序和反转"><a class="markdownIt-Anchor" href="#元素排序和反转"></a> 元素排序和反转</h4><p>列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reverse</code>操作可以实现元素的反转，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">items = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Kotlin&#x27;</span>, <span class="hljs-string">&#x27;Swift&#x27;</span>]<br>items.sort()<br><span class="hljs-built_in">print</span>(items)  <span class="hljs-comment"># [&#x27;C++&#x27;, &#x27;Java&#x27;, &#x27;Kotlin&#x27;, &#x27;Python&#x27;, &#x27;Swift&#x27;]</span><br>items.reverse()<br><span class="hljs-built_in">print</span>(items)  <span class="hljs-comment"># [&#x27;Swift&#x27;, &#x27;Python&#x27;, &#x27;Kotlin&#x27;, &#x27;Java&#x27;, &#x27;C++&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="列表生成式"><a class="markdownIt-Anchor" href="#列表生成式"></a> 列表生成式</h3><p>在 Python 中，列表还可以通过一种特殊的字面量语法来创建，这种语法叫做生成式。下面，我们通过例子来说明使用列表生成式创建列表到底有什么好处。</p><p>场景一：创建一个取值范围在<code>1</code>到<code>99</code>且能被<code>3</code>或者<code>5</code>整除的数字构成的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">items = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>        items.append(i)<br><span class="hljs-built_in">print</span>(items)<br></code></pre></td></tr></table></figure><p>使用列表生成式做同样的事情，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">items = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(items)<br></code></pre></td></tr></table></figure><p>场景二：有一个整数列表<code>nums1</code>，创建一个新的列表<code>nums2</code>，<code>nums2</code>中的元素是<code>nums1</code>中对应元素的平方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">97</span>, <span class="hljs-number">64</span>, <span class="hljs-number">55</span>]<br>nums2 = []<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums1:<br>    nums2.append(num ** <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(nums2)<br></code></pre></td></tr></table></figure><p>使用列表生成式做同样的事情，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">97</span>, <span class="hljs-number">64</span>, <span class="hljs-number">55</span>]<br>nums2 = [num ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums1]<br><span class="hljs-built_in">print</span>(nums2)<br></code></pre></td></tr></table></figure><p>场景三： 有一个整数列表<code>nums1</code>，创建一个新的列表<code>nums2</code>，将<code>nums1</code>中大于<code>50</code>的元素放到<code>nums2</code>中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">97</span>, <span class="hljs-number">64</span>, <span class="hljs-number">55</span>]<br>nums2 = []<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums1:<br>    <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">50</span>:<br>        nums2.append(num)<br><span class="hljs-built_in">print</span>(nums2)<br></code></pre></td></tr></table></figure><p>使用列表生成式做同样的事情，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">97</span>, <span class="hljs-number">64</span>, <span class="hljs-number">55</span>]<br>nums2 = [num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums1 <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">50</span>]<br><span class="hljs-built_in">print</span>(nums2)<br></code></pre></td></tr></table></figure><p>使用列表生成式创建列表不仅代码简单优雅，而且性能上也优于使用<code>for-in</code>循环和<code>append</code>方法向空列表中追加元素的方式。<br />为什么说生成式有更好的性能呢，那是因为 Python 解释器的字节码指令中有专门针对生成式的指令（<code>LIST_APPEND</code>指令）；<br />而<code>for</code>循环是通过方法调用（<code>LOAD_METHOD</code>和<code>CALL_METHOD</code>指令）的方式为列表添加元素，方法调用本身就是一个相对比较耗时的操作。<br />对这一点不理解也没有关系，记住“<strong>强烈建议用生成式语法来创建列表</strong>”这个结论就可以了。</p><h3 id="嵌套列表"><a class="markdownIt-Anchor" href="#嵌套列表"></a> 嵌套列表</h3><p>Python 语言没有限定列表中的元素必须是相同的数据类型，也就是说一个列表中的元素可以任意的数据类型，当然也包括列表本身。<br />如果列表中的元素也是列表，那么我们可以称之为嵌套的列表。嵌套的列表可以用来表示表格或数学上的矩阵，例如：我们想保存5个学生3门课程的成绩，可以用如下所示的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = [[<span class="hljs-number">95</span>, <span class="hljs-number">83</span>, <span class="hljs-number">92</span>], [<span class="hljs-number">80</span>, <span class="hljs-number">75</span>, <span class="hljs-number">82</span>], [<span class="hljs-number">92</span>, <span class="hljs-number">97</span>, <span class="hljs-number">90</span>], [<span class="hljs-number">80</span>, <span class="hljs-number">78</span>, <span class="hljs-number">69</span>], [<span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">89</span>]]<br><span class="hljs-built_in">print</span>(scores[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(scores[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>对于上面的嵌套列表，每个元素相当于就是一个学生3门课程的成绩，例如<code>[95, 83, 92]</code>，而这个列表中的<code>83</code>代表了这个学生某一门课的成绩，如果想访问这个值，可以使用两次索引运算<code>scores[0][1]</code>，其中<code>scores[0]</code>可以得到<code>[95, 83, 92]</code>这个列表，再次使用索引运算<code>[1]</code>就可以获得该列表中的第二个元素。</p><p>如果想通过键盘输入的方式来录入5个学生3门课程的成绩并保存在列表中，可以使用如下所示的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    temp = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        score = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入: &#x27;</span>))<br>        temp.append(score)<br>    scores.append(temp)<br><span class="hljs-built_in">print</span>(scores)<br></code></pre></td></tr></table></figure><p>如果想通过产生随机数的方式来生成5个学生3门课程的成绩并保存在列表中，我们可以使用列表生成式，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>scores = [[random.randrange(<span class="hljs-number">60</span>, <span class="hljs-number">101</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(scores)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码<code>[random.randrange(60, 101) for _ in range(3)] </code>可以产生由3个随机整数构成的列表，我们把这段代码又放在了另一个列表生成式中作为列表的元素，这样的元素一共生成5个，最终得到了一个嵌套列表。</p></blockquote><h3 id="列表的应用"><a class="markdownIt-Anchor" href="#列表的应用"></a> 列表的应用</h3><p>下面我们通过一个双色球随机选号的例子为大家讲解列表的应用。<br />双色球是由中国福利彩票发行管理中心发售的乐透型彩票，每注投注号码由<code>6</code>个红色球和<code>1</code>个蓝色球组成。红色球号码从<code>1</code>到<code>33</code>中选择，蓝色球号码从<code>1</code>到<code>16</code>中选择。<br />每注需要选择<code>6</code>个红色球号码和<code>1</code>个蓝色球号码，如下所示。</p><style>.brshtbddfsjp{zoom:85%;}</style><img src="/waterbottle/posts/b826/lottery.png" class="brshtbddfsjp"><p>下面，我们通过 Python 程序来生成一组随机号码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">双色球随机选号程序</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>red_balls = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">34</span>))<br>selected_balls = []<br><span class="hljs-comment"># 添加6个红色球到选中列表</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-comment"># 生成随机整数代表选中的红色球的索引位置</span><br>    index = random.randrange(<span class="hljs-built_in">len</span>(red_balls))<br>    <span class="hljs-comment"># 将选中的球从红色球列表中移除并添加到选中列表</span><br>    selected_balls.append(red_balls.pop(index))<br><span class="hljs-comment"># 对选中的红色球排序</span><br>selected_balls.sort()<br><span class="hljs-comment"># 输出选中的红色球</span><br><span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> selected_balls:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[031m<span class="hljs-subst">&#123;ball:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-comment"># 随机选择1个蓝色球</span><br>blue_ball = random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>)<br><span class="hljs-comment"># 输出选中的蓝色球</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[034m<span class="hljs-subst">&#123;blue_ball:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面代码中<code>print(f'\033[0m...\033[0m')</code>是为了控制输出内容的颜色，红色球输出成红色，蓝色球输出成蓝色。其中省略号代表我们要输出的内容。<br /><code>\033[0m</code>是一个控制码，表示关闭所有属性，也就是说之前的控制码将会失效，你也可以将其简单的理解为一个定界符。<br /><code>m</code>前面的<code>0</code>表示控制台的显示方式为默认值，<code>0</code>可以省略，<code>1</code>表示高亮，<code>5</code>表示闪烁，<code>7</code>表示反显等。<br />在<code>0</code>和<code>m</code>的中间，我们可以写上代表颜色的数字，比如<code>30</code>代表黑色，<code>31</code>代表红色，<code>32</code>代表绿色，<code>33</code>代表黄色，<code>34</code>代表蓝色等。</p></blockquote><p>我们还可以利用<code>random</code>模块提供的<code>sample</code>和<code>choice</code>函数来简化上面的代码，前者可以实现无放回随机抽样，后者可以实现随机抽取一个元素，修改后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">双色球随机选号程序</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>red_balls = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">34</span>)]<br>blue_balls = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>)]<br><span class="hljs-comment"># 从红色球列表中随机抽出6个红色球（无放回抽样）</span><br>selected_balls = random.sample(red_balls, <span class="hljs-number">6</span>)<br><span class="hljs-comment"># 对选中的红色球排序</span><br>selected_balls.sort()<br><span class="hljs-comment"># 输出选中的红色球</span><br><span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> selected_balls:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[031m<span class="hljs-subst">&#123;ball:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-comment"># 从蓝色球列表中随机抽出1个蓝色球</span><br>blue_ball = random.choice(blue_balls)<br><span class="hljs-comment"># 输出选中的蓝色球</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[034m<span class="hljs-subst">&#123;blue_ball:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果要实现随机生成<code>N</code>注号码，我们只需要将上面的代码放到一个<code>N</code>次的循环中，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">双色球随机选号程序</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">Version: 1.2</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;生成几注号码: &#x27;</span>))<br>red_balls = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">34</span>)]<br>blue_balls = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-comment"># 从红色球列表中随机抽出6个红色球（无放回抽样）</span><br>    selected_balls = random.sample(red_balls, <span class="hljs-number">6</span>)<br>    <span class="hljs-comment"># 对选中的红色球排序</span><br>    selected_balls.sort()<br>    <span class="hljs-comment"># 输出选中的红色球</span><br>    <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> selected_balls:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[031m<span class="hljs-subst">&#123;ball:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-comment"># 从蓝色球列表中随机抽出1个蓝色球</span><br>    blue_ball = random.choice(blue_balls)<br>    <span class="hljs-comment"># 输出选中的蓝色球</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[034m<span class="hljs-subst">&#123;blue_ball:<span class="hljs-number">0</span>&gt;2d&#125;</span>\033[0m&#x27;</span>)<br></code></pre></td></tr></table></figure><p>我们在 PyCharm 中运行上面的代码，输入<code>5</code>，运行效果如下图所示。</p><style>.gonfxgiuroka{zoom:35%;}</style><img src="/waterbottle/posts/b826/lottery_run_result.png" class="gonfxgiuroka">]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>08.常用数据结构之列表-1</title>
    <link href="/waterbottle/posts/79f7/"/>
    <url>/waterbottle/posts/79f7/</url>
    
    <content type="html"><![CDATA[<p>python列表的认识与基本规则</p><span id="more"></span><h2 id="常用数据结构之列表-1"><a class="markdownIt-Anchor" href="#常用数据结构之列表-1"></a> 常用数据结构之列表-1</h2><p>在开始本节课的内容之前，我们先给大家一个编程任务，将一颗色子掷 6000 次，统计每种点数出现的次数。<br />这个任务对大家来说应该是非常简单的，我们可以用 1 到 6 均匀分布的随机数来模拟掷色子，然后用 6 个变量分别记录每个点数出现的次数，相信通过前面的学习，大家都能比较顺利的写出下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将一颗色子掷6000次，统计每种点数出现的次数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 骆昊</span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>f1 = <span class="hljs-number">0</span><br>f2 = <span class="hljs-number">0</span><br>f3 = <span class="hljs-number">0</span><br>f4 = <span class="hljs-number">0</span><br>f5 = <span class="hljs-number">0</span><br>f6 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6000</span>):<br>    face = random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>)<br>    <span class="hljs-keyword">if</span> face == <span class="hljs-number">1</span>:<br>        f1 += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> face == <span class="hljs-number">2</span>:<br>        f2 += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> face == <span class="hljs-number">3</span>:<br>        f3 += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> face == <span class="hljs-number">4</span>:<br>        f4 += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> face == <span class="hljs-number">5</span>:<br>        f5 += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        f6 += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;1点出现了<span class="hljs-subst">&#123;f1&#125;</span>次&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;2点出现了<span class="hljs-subst">&#123;f2&#125;</span>次&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;3点出现了<span class="hljs-subst">&#123;f3&#125;</span>次&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;4点出现了<span class="hljs-subst">&#123;f4&#125;</span>次&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;5点出现了<span class="hljs-subst">&#123;f5&#125;</span>次&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;6点出现了<span class="hljs-subst">&#123;f6&#125;</span>次&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面的代码非常有多么“丑陋”相信就不用我多说了。当然，更为可怕的是，如果我们要掷两颗或者掷更多的色子，然后统计每种点数出现的次数，那就需要定义更多的变量，写更多的分支结构，大家想想都会感到恶心。<br />讲到这里，相信大家心中已经有一个疑问了：有没有办法用一个变量来保存多个数据，有没有办法用统一的代码对多个数据进行操作？<br />答案是肯定的，在 Python 语言中我们可以通过容器型变量来保存和操作多个数据，我们首先为大家介绍列表（<code>list</code>）这种新的数据类型。</p><h3 id="创建列表"><a class="markdownIt-Anchor" href="#创建列表"></a> 创建列表</h3><p>在 Python 中，<strong>列表是由一系元素按特定顺序构成的数据序列</strong>，这就意味着如果我们定义一个列表类型的变量，<strong>可以用它来保存多个数据</strong>。<br />在 Python 中，可以使用<code>[]</code>字面量语法来定义列表，列表中的多个元素用逗号进行分隔，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">items1 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">99</span>, <span class="hljs-number">68</span>, <span class="hljs-number">55</span>, <span class="hljs-number">35</span>, <span class="hljs-number">87</span>]<br>items2 = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Go&#x27;</span>, <span class="hljs-string">&#x27;Kotlin&#x27;</span>]<br>items3 = [<span class="hljs-number">100</span>, <span class="hljs-number">12.3</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-literal">True</span>]<br><span class="hljs-built_in">print</span>(items1)  <span class="hljs-comment"># [35, 12, 99, 68, 55, 35, 87]</span><br><span class="hljs-built_in">print</span>(items2)  <span class="hljs-comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;]</span><br><span class="hljs-built_in">print</span>(items3)  <span class="hljs-comment"># [100, 12.3, &#x27;Python&#x27;, True]</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：列表中可以有重复元素，例如<code>items1</code>中的<code>35</code>；列表中可以有不同类型的元素，例如<code>items3</code>中有<code>int</code>类型、<code>float</code>类型、<code>str</code>类型和<code>bool</code>类型的元素.<br />但是我们通常并不建议将不同类型的元素放在同一个列表中，主要是操作起来极为不便。</p></blockquote><p>我们可以使用<code>type</code>函数来查看变量的类型，有兴趣的小伙伴可以自行查看上面的变量<code>items1</code>到底是什么类型。<br />因为列表可以保存多个元素，它是一种容器型的数据类型，所以我们在给列表类型的变量起名字时，变量名通常用复数形式的单词。</p><p>除此以外，还可以通过 Python 内置的<code>list</code>函数将其他序列变成列表。准确的说，<code>list</code>并不是一个普通的函数，它是创建列表对象的构造器，后面的课程会为大家介绍对象和构造器这些概念。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">items4 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br>items5 = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-built_in">print</span>(items4)  <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="hljs-built_in">print</span>(items5)  <span class="hljs-comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>range(1, 10)</code>会产生<code>1</code>到<code>9</code>的整数序列，给到<code>list</code>构造器中，会创建出由<code>1</code>到<code>9</code>的整数构成的列表。<br />字符串是字符构成的序列，上面的<code>list('hello')</code>用字符串<code>hello</code>的字符作为列表元素，创建了列表对象。</p></blockquote><h3 id="列表的运算"><a class="markdownIt-Anchor" href="#列表的运算"></a> 列表的运算</h3><p>我们可以使用<code>+</code>运算符实现两个列表的拼接，拼接运算会将两个列表中的元素连接起来放到一个列表中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">items5 = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">99</span>, <span class="hljs-number">45</span>, <span class="hljs-number">66</span>]<br>items6 = [<span class="hljs-number">45</span>, <span class="hljs-number">58</span>, <span class="hljs-number">29</span>]<br>items7 = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;JavaScript&#x27;</span>]<br><span class="hljs-built_in">print</span>(items5 + items6)  <span class="hljs-comment"># [35, 12, 99, 45, 66, 45, 58, 29]</span><br><span class="hljs-built_in">print</span>(items6 + items7)  <span class="hljs-comment"># [45, 58, 29, &#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;JavaScript&#x27;]</span><br>items5 += items6<br><span class="hljs-built_in">print</span>(items5)  <span class="hljs-comment"># [35, 12, 99, 45, 66, 45, 58, 29]</span><br></code></pre></td></tr></table></figure><p>我们可以使用<code>*</code>运算符实现列表的重复运算，<code>*</code>运算符会将列表元素重复指定的次数，我们在上面的代码中增加两行，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(items6 * <span class="hljs-number">3</span>)  <span class="hljs-comment"># [45, 58, 29, 45, 58, 29, 45, 58, 29]</span><br><span class="hljs-built_in">print</span>(items7 * <span class="hljs-number">2</span>)  <span class="hljs-comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;JavaScript&#x27;, &#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;JavaScript&#x27;]</span><br></code></pre></td></tr></table></figure><p>我们可以使用<code>in</code>或<code>not in</code>运算符判断一个元素在不在列表中，我们在上面的代码代码中再增加两行，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">29</span> <span class="hljs-keyword">in</span> items6)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">99</span> <span class="hljs-keyword">in</span> items6)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C++&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> items7)     <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Python&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> items7)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><p>由于列表中有多个元素，而且元素是按照特定顺序放在列表中的，所以当我们想操作列表中的某个元素时，可以使用<code>[]</code>运算符，通过在<code>[]</code>中指定元素的位置来访问该元素，这种运算称为索引运算。<br />需要说明的是，<code>[]</code>的元素位置可以是<code>0</code>到<code>N - 1</code>的整数，也可以是<code>-1</code>到<code>-N</code>的整数，分别称为正向索引和反向索引，其中<code>N</code>代表列表元素的个数。<br />对于正向索引，<code>[0]</code>可以访问列表中的第一个元素，<code>[N - 1]</code>可以访问最后一个元素；对于反向索引，<code>[-1]</code>可以访问列表中的最后一个元素，<code>[-N]</code>可以访问第一个元素，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">items8 = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;waxberry&#x27;</span>, <span class="hljs-string">&#x27;pitaya&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>, <span class="hljs-string">&#x27;watermelon&#x27;</span>]<br><span class="hljs-built_in">print</span>(items8[<span class="hljs-number">0</span>])   <span class="hljs-comment"># apple</span><br><span class="hljs-built_in">print</span>(items8[<span class="hljs-number">2</span>])   <span class="hljs-comment"># pitaya</span><br><span class="hljs-built_in">print</span>(items8[<span class="hljs-number">4</span>])   <span class="hljs-comment"># watermelon</span><br>items8[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;durian&#x27;</span><br><span class="hljs-built_in">print</span>(items8)      <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;waxberry&#x27;, &#x27;durian&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[-<span class="hljs-number">5</span>])  <span class="hljs-comment"># &#x27;apple&#x27;</span><br><span class="hljs-built_in">print</span>(items8[-<span class="hljs-number">4</span>])  <span class="hljs-comment"># &#x27;waxberry&#x27;</span><br><span class="hljs-built_in">print</span>(items8[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># watermelon</span><br>items8[-<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;strawberry&#x27;</span><br><span class="hljs-built_in">print</span>(items8)      <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;durian&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;]</span><br></code></pre></td></tr></table></figure><p>在使用索引运算的时候要避免出现索引越界的情况，对于上面的<code>items8</code>，如果我们访问<code>items8[5]</code>或<code>items8[-6]</code>，就会引发<code>IndexError</code>错误，导致程序崩溃。<br />对应的错误信息是：<em>list index out of range</em>，翻译成中文就是“数组索引超出范围”。因为对于只有五个元素的列表<code>items8</code>，有效的正向索引是<code>0</code>到<code>4</code>，有效的反向索引是<code>-1</code>到<code>-5</code>。</p><p>如果希望一次性访问列表中的多个元素，我们可以使用切片运算。切片运算是形如<code>[start:end:stride]</code>的运算符，其中<code>start</code>代表访问列表元素的起始位置，<code>end</code>代表访问列表元素的终止位置（终止位置的元素无法访问）。<br />而<code>stride</code>则代表了跨度，简单的说就是位置的增量，比如我们访问的第一个元素在<code>start</code>位置，那么第二个元素就在<code>start + stride</code>位置，当然<code>start + stride</code>要小于<code>end</code>。<br />我们给上面的代码增加下面的语句，来使用切片运算符访问列表元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(items8[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>:<span class="hljs-number">1</span>])     <span class="hljs-comment"># [&#x27;strawberry&#x27;, &#x27;durian&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">1</span>])     <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;durian&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;durian&#x27;, &#x27;watermelon&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[-<span class="hljs-number">4</span>:-<span class="hljs-number">2</span>:<span class="hljs-number">1</span>])   <span class="hljs-comment"># [&#x27;strawberry&#x27;, &#x27;durian&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[-<span class="hljs-number">2</span>:-<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># [&#x27;peach&#x27;, &#x27;durian&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;]</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>提醒</strong>：大家可以看看上面代码中的最后一行，想一想当跨度为负数时，切片运算是如何访问元素的。</p></blockquote><p>如果<code>start</code>值等于<code>0</code>，那么在使用切片运算符时可以将其省略；如果<code>end</code>值等于<code>N</code>，<code>N</code>代表列表元素的个数，那么在使用切片运算符时可以将其省略；<br />如果<code>stride</code>值等于<code>1</code>，那么在使用切片运算符时也可以将其省略。所以，下面的代码跟上面的代码作用完全相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(items8[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])     <span class="hljs-comment"># [&#x27;strawberry&#x27;, &#x27;durian&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[:<span class="hljs-number">3</span>:<span class="hljs-number">1</span>])    <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;durian&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[::<span class="hljs-number">2</span>])     <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;durian&#x27;, &#x27;watermelon&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[-<span class="hljs-number">4</span>:-<span class="hljs-number">2</span>])   <span class="hljs-comment"># [&#x27;strawberry&#x27;, &#x27;durian&#x27;]</span><br><span class="hljs-built_in">print</span>(items8[-<span class="hljs-number">2</span>::-<span class="hljs-number">1</span>])  <span class="hljs-comment"># [&#x27;peach&#x27;, &#x27;durian&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;]</span><br></code></pre></td></tr></table></figure><p>事实上，我们还可以通过切片操作修改列表中的元素，例如我们给上面的代码再加上一行，大家可以看看这里的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">items8[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] = [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>]<br><span class="hljs-built_in">print</span>(items8)  <span class="hljs-comment"># [&#x27;apple&#x27;, &#x27;x&#x27;, &#x27;o&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;]</span><br></code></pre></td></tr></table></figure><p>两个列表还可以做关系运算，我们可以比较两个列表是否相等，也可以给两个列表比大小，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>nums2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>))<br>nums3 = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(nums1 == nums2)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(nums1 != nums2)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(nums1 &lt;= nums3)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(nums2 &gt;= nums3)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的<code>nums1</code>和<code>nums2</code>对应元素完全相同，所以<code>==</code>运算的结果是<code>True</code>。<code>nums2</code>和<code>nums3</code>的比较，由于<code>nums2</code>的第一个元素<code>1</code>小于<code>nums3</code>的第一个元素<code>3</code>，所以<code>nums2 &gt;= nums3</code>比较的结果是<code>False</code>。<br />两个列表的关系运算在实际工作并不那么常用，如果实在不理解就跳过吧，不用纠结。</p></blockquote><h3 id="元素的遍历"><a class="markdownIt-Anchor" href="#元素的遍历"></a> 元素的遍历</h3><p>如果想逐个取出列表中的元素，可以使用<code>for-in</code>循环的，有以下两种做法。</p><p>方法一：在循环结构中通过索引运算，遍历列表元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">languages = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Kotlin&#x27;</span>]<br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(languages)):<br>    <span class="hljs-built_in">print</span>(languages[index])<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">Python</span><br><span class="hljs-comment">Java</span><br><span class="hljs-comment">C</span><span class="hljs-literal">++</span><br><span class="hljs-comment">Kotlin</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的<code>len</code>函数可以获取列表元素的个数<code>N</code>，而<code>range(N)</code>则构成了从<code>0</code>到<code>N-1</code>的范围，刚好可以作为列表元素的索引。</p></blockquote><p>方法二：直接对列表做循环，循环变量就是列表元素的代表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">languages = [<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Kotlin&#x27;</span>]<br><span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> languages:<br>    <span class="hljs-built_in">print</span>(language)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">Python</span><br><span class="hljs-comment">Java</span><br><span class="hljs-comment">C</span><span class="hljs-literal">++</span><br><span class="hljs-comment">Kotlin</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>讲到这里，我们可以用列表的知识来重构上面“掷色子统计每种点数出现次数”的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将一颗色子掷6000次，统计每种点数出现的次数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 骆昊</span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>counters = [<span class="hljs-number">0</span>] * <span class="hljs-number">6</span><br><span class="hljs-comment"># 模拟掷色子记录每种点数出现的次数</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6000</span>):<br>    face = random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>)<br>    counters[face - <span class="hljs-number">1</span>] += <span class="hljs-number">1</span><br><span class="hljs-comment"># 输出每种点数出现的次数</span><br><span class="hljs-keyword">for</span> face <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;face&#125;</span>点出现了<span class="hljs-subst">&#123;counters[face - <span class="hljs-number">1</span>]&#125;</span>次&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面的代码中，我们用<code>counters</code>列表中的六个元素分别表示 1 到 6 点出现的次数，最开始的时候六个元素的值都是 0。<br />接下来，我们用 1 到 6 均匀分布的随机数模拟掷色子，如果摇出 1 点，<code>counters[0]</code>的值加 1，如果摇出 2 点，<code>counters[1]</code>的值加 1，以此类推。<br />大家感受一下，由于使用了列表类型加上循环结构，我们对数据的处理是批量性的，这就使得修改后的代码比之前的代码要简单优雅得多。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>07.分支和循环结构练习</title>
    <link href="/waterbottle/posts/2497/"/>
    <url>/waterbottle/posts/2497/</url>
    
    <content type="html"><![CDATA[<p>循环结构和分支结构练习</p><span id="more"></span><h2 id="分支和循环结构实战"><a class="markdownIt-Anchor" href="#分支和循环结构实战"></a> 分支和循环结构实战</h2><p>通过前面两节课的学习，大家对 Python 中的分支结构和循环结构已经有了初步的认知。<br /><strong>分支结构和循环结构是构造程序逻辑的基础</strong>，它们的重要性不言而喻，但是对于初学者来说这也是比较困难的部分。<br />很多人对分支结构和循环结构的语法是能够理解的，但是遇到实际问题的时候又无法下手；<strong>看懂别人的代码很容易，但是要自己写出类似的代码却又很难</strong>。<br />如果你也有同样的问题和困惑，千万不要沮丧，这只是因为你的编程之旅才刚刚开始，<strong>你的练习量还没有达到让你可以随心所欲写出代码的程度</strong>，只要加强编程练习，通过量的积累来产生质的变化，这个问题迟早都会解决的。</p><h3 id="例子1100以内的素数"><a class="markdownIt-Anchor" href="#例子1100以内的素数"></a> 例子1：100以内的素数</h3><blockquote><p><strong>说明</strong>：素数指的是只能被 1 和自身整除的正整数（不包括 1），之前我们写过判断素数的代码，这里相当于是一个升级版本。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出100以内的素数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>number_list=[]<br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(number**<span class="hljs-number">0.5</span>+<span class="hljs-number">1</span>)):<br>        <span class="hljs-keyword">if</span> number%i==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        number_list.append(number)<br><br><span class="hljs-built_in">print</span>(number_list)<br></code></pre></td></tr></table></figure><h3 id="例子2斐波那契数列"><a class="markdownIt-Anchor" href="#例子2斐波那契数列"></a> 例子2：斐波那契数列</h3><p>要求：输出斐波那契数列中的前 20 个数。</p><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），通常也被称作黄金分割数列。<br />斐波那契数列的特点是数列的前两个数都是 1，从第三个数开始，每个数都是它前面两个数的和。<br />按照这个规律，斐波那契数列的前 10 个数是：<code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55</code>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出斐波那契数列中的前20个数</span><br><span class="hljs-string"></span><br><span class="hljs-string">分析：我们需要两个变量a,b用来存储当前的两个数字，然后计算两个变量的和记为c。</span><br><span class="hljs-string">计算完成后，我们需要保存的是b和c中的值，原先a的值不需要保存了。</span><br><span class="hljs-string">也就是每次计算完后，都需要更新a和b的值，而每次c的值都是来自a+b</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a=<span class="hljs-number">0</span><br>b=<span class="hljs-number">1</span><br>number_list=[]<br><span class="hljs-keyword">for</span> count <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    c=a+b<br>    a=b<br>    b=c<br>    number_list.append(a)<br><span class="hljs-built_in">print</span>(number_list)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面循环中的<code>c=a+b,a=b，b=c</code>表示将变量<code>a+b</code>的值赋给<code>c</code>，把<code>a + b</code>的值赋给<code>c</code>。通过这个递推公式，我们可以依次获得斐波那契数列中的数。</p></blockquote><h3 id="例子3寻找水仙花数"><a class="markdownIt-Anchor" href="#例子3寻找水仙花数"></a> 例子3：寻找水仙花数</h3><p>要求：找出 100 到 999 范围内的所有水仙花数。</p><blockquote><p><strong>提示</strong>：水仙花数（Narcissistic number）是指一个三位数，其各位数字的立方和等于该数本身。<br />它是一个3位非负整数，其各位数字的3次方和刚好等于该数本身。<br />例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>153</mn><mo>=</mo><msup><mn>1</mn><mn>3</mn></msup><mo>+</mo><msup><mn>5</mn><mn>3</mn></msup><mo>+</mo><msup><mn>3</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">153=1^3 + 5^3 + 3^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>，所以 153 是一个水仙花数；<br />对于三位数，解题的关键是将它拆分为个位、十位、百位，再判断是否满足水仙花数的要求，这一点利用 Python 中的<code>//</code>和<code>%</code>运算符其实很容易做到。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">找出100到999范围内的水仙花数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>number_list = []<br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>,<span class="hljs-number">999</span>):<br>    single_digit=number%<span class="hljs-number">10</span><br>    ten_digit=number//<span class="hljs-number">10</span>%<span class="hljs-number">10</span><br>    hundred_digit=number//<span class="hljs-number">100</span><br>    <span class="hljs-keyword">if</span> number == single_digit**<span class="hljs-number">3</span>+ten_digit**<span class="hljs-number">3</span>+hundred_digit**<span class="hljs-number">3</span>:<br>        number_list.append(number)<br><span class="hljs-built_in">print</span>(number_list)<br></code></pre></td></tr></table></figure><p>上面利用<code>//</code>和<code>%</code>拆分一个数的小技巧在写代码的时候还是很常用的。我们要将一个不知道有多少位的正整数进行反转，例如将 123456789 变成 987654321，也可以利用这两个运算来实现，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">正整数的反转</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>number = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个随机数字：&quot;</span>)<br>number_length=<span class="hljs-built_in">len</span>(number) <span class="hljs-comment">#获取数字长度</span><br>int_number=<span class="hljs-built_in">int</span>(number)    <span class="hljs-comment">#转换为int类型</span><br>new_number = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number_length):<br>    new_number = new_number*<span class="hljs-number">10</span>+int_number%<span class="hljs-number">10</span><br>    int_number=int_number//<span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(new_number)<br></code></pre></td></tr></table></figure><h3 id="例子4百钱百鸡问题"><a class="markdownIt-Anchor" href="#例子4百钱百鸡问题"></a> 例子4：百钱百鸡问题</h3><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？<br />翻译成现代文是：公鸡 5 元一只，母鸡 3 元一只，小鸡 1 元三只，用 100 块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">百钱百鸡问题</span><br><span class="hljs-string"></span><br><span class="hljs-string">思路，100块钱分别可以最多买20只公鸡，33.3只母鸡，300只小鸡。</span><br><span class="hljs-string">但是题目最多买100只鸡，所以小鸡最多只有100只。同时小鸡每次一买就是3只，其他鸡每次一买是一只</span><br><span class="hljs-string">分别用a,b,c代表三种鸡，那我们可以得出。</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>answers = []<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">21</span>):<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">34</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">if</span> a + b + c == <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span> * a + <span class="hljs-number">3</span> * b + c // <span class="hljs-number">3</span> == <span class="hljs-number">100</span>:<br>                answer = <span class="hljs-string">f&quot;可以买公鸡<span class="hljs-subst">&#123;a&#125;</span>只，母鸡<span class="hljs-subst">&#123;b&#125;</span>只，小鸡<span class="hljs-subst">&#123;c&#125;</span>只&quot;</span><br>                answers.append(answer)<br><span class="hljs-built_in">print</span>(answers)<br></code></pre></td></tr></table></figure><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项，并检查每个候选项是否符合问题的描述，最终得到问题的解。<br />上面的代码中，我们使用了嵌套的循环结构，假设公鸡有<code>a</code>只，显然<code>a</code>的取值范围是 0 到 20，假设母鸡有<code>b</code>只，它的取值范围是 0 到 33，假设小鸡有<code>c</code>只，它的取值范围是 0 到 99 且取值是 3 的倍数。<br />这样，我们设置好 100 只鸡的条件<code>a + b + c == 100</code>，设置好 100 块钱的条件<code>5 * a + 3 * b + c // 3 == 100</code>，当两个条件同时满足时，就是问题的正确答案，我们把他加到列表里用<code>print</code>函数输出它，也可以直接的打印出来<br />这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，只要问题的解存在就能够找到它。</p><p>事实上，上面的代码还有更好的写法，既然我们已经假设公鸡有<code>a</code>只，母鸡有<code>b</code>只，那么小鸡的数量就应该是<code>100 - a - b</code>，这样减少一个条件，我们就可以把上面三层嵌套的<code>for-in</code>循环改写为两层嵌套的<code>for-in</code>循环。<br />循环次数减少了，代码的执行效率就有了显著的提升，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">百钱百鸡问题</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">21</span>):<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">34</span>):<br>        c = <span class="hljs-number">100</span> - a - b<br>        <span class="hljs-comment"># 需要注意，小鸡的数量是3的倍数，这里需要增加一个条件</span><br>        <span class="hljs-keyword">if</span> c % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span> * a + <span class="hljs-number">3</span> * b + c // <span class="hljs-number">3</span> == <span class="hljs-number">100</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;可以买公鸡<span class="hljs-subst">&#123;a&#125;</span>只，母鸡<span class="hljs-subst">&#123;b&#125;</span>只，小鸡<span class="hljs-subst">&#123;c&#125;</span>只&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面代码中的<code>z % 3 == 0</code>是为了确保小鸡的数量是 3 的倍数。</p></blockquote><h3 id="例子5craps赌博游戏"><a class="markdownIt-Anchor" href="#例子5craps赌博游戏"></a> 例子5：CRAPS赌博游戏</h3><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。<br />简化后的规则是：玩家第一次摇骰子如果摇出了 7 点或 11 点，玩家胜；玩家第一次如果摇出 2 点、3 点或 12 点，庄家胜； 玩家如果摇出其他点数则游戏继续。<br />玩家重新摇骰子，如果玩家摇出了 7 点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数玩家继续摇骰子，直到分出胜负。<br />为了增加代码的趣味性，我们设定游戏开始时玩家有 1000 元的赌注，每局游戏开始之前，玩家先下注，如果玩家获胜就可以获得对应下注金额的奖励，如果庄家获胜，玩家就会输掉自己下注的金额。<br />游戏结束的条件是玩家破产（输光所有的赌注）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Craps赌博游戏</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>money = <span class="hljs-number">1000</span><br><span class="hljs-keyword">while</span> money &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;你的总资产为: <span class="hljs-subst">&#123;money&#125;</span>元&#x27;</span>)<br>    <span class="hljs-comment"># 下注金额必须大于0且小于等于玩家的总资产</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        debt = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请下注: &#x27;</span>))<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; debt &lt;= money:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 用两个1到6均匀分布的随机数相加模拟摇两颗色子得到的点数</span><br>    first_point = random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>) + random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\n玩家摇出了<span class="hljs-subst">&#123;first_point&#125;</span>点&#x27;</span>)<br>    <span class="hljs-keyword">if</span> first_point == <span class="hljs-number">7</span> <span class="hljs-keyword">or</span> first_point == <span class="hljs-number">11</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家胜!\n&#x27;</span>)<br>        money += debt<br>    <span class="hljs-keyword">elif</span> first_point == <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> first_point == <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> first_point == <span class="hljs-number">12</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;庄家胜!\n&#x27;</span>)<br>        money -= debt<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 如果第一次摇色子没有分出胜负，玩家需要重新摇色子</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            current_point = random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>) + random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;玩家摇出了<span class="hljs-subst">&#123;current_point&#125;</span>点&#x27;</span>)<br>            <span class="hljs-keyword">if</span> current_point == <span class="hljs-number">7</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;庄家胜!\n&#x27;</span>)<br>                money -= debt<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> current_point == first_point:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家胜!\n&#x27;</span>)<br>                money += debt<br>                <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你破产了, 游戏结束!&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>06.循环结构</title>
    <link href="/waterbottle/posts/d8cb/"/>
    <url>/waterbottle/posts/d8cb/</url>
    
    <content type="html"><![CDATA[<p>了解python中的循环控制结构</p><span id="more"></span><h2 id="循环结构"><a class="markdownIt-Anchor" href="#循环结构"></a> 循环结构</h2><p>我们在写程序的时候，极有可能遇到需要重复执行某条或某些指令的场景，例如我们需要每隔1秒钟在屏幕上输出一次“hello, world”并持续输出一个小时。<br />如下所示的代码可以完成一次这样的操作，如果要持续输出一个小时，我们就需要把这段代码写3600遍，你愿意这么做吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>)<br>time.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：Python 内置<code>time</code>模块的<code>sleep</code>函数可以实现程序的休眠，参数<code>1</code>表示休眠的秒数，可以使用<code>int</code>或<code>float</code>类型，例如<code>0.05</code>表示<code>50</code>毫秒。关于函数和模块的知识，我们在后续的课程中会为大家讲解。</p></blockquote><p>为了应对上述场景中的问题，我们可以在 Python 程序中使用循环结构。所谓循环结构，就是程序中控制某条或某些指令重复执行的结构。<br />有了这样的结构，刚才的代码就不需要写 3600 遍，而是写一遍然后放到循环结构中重复 3600 次。<br />在 Python 语言中构造循环结构有两种做法，一种是<code>for-in</code>循环，另一种是<code>while</code>循环。</p><h3 id="for-in循环"><a class="markdownIt-Anchor" href="#for-in循环"></a> for-in循环</h3><p>如果<strong>明确知道循环执行的次数</strong>，我们推荐使用<code>for-in</code>循环，例如上面说的那个重复 3600 次的场景，我们可以用下面的代码来实现。<br />注意，被<code>for-in</code>循环控制的代码块也是通过缩进的方式来构造，这一点跟分支结构中构造代码块的做法是一样的。<br />我们被<code>for-in</code>循环控制的代码块称为循环体，通常循环体中的语句会根据循环的设定被重复执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">每隔1秒输出一次“hello, world”，持续1小时</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3600</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>需要说明的是，上面代码中的<code>range(3600)</code>可以构造出一个从<code>0</code>到<code>3599</code>的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>i</code>依次取出从<code>0</code>到<code>3599</code>的整数，这就会让<code>for-in</code>代码块中的语句重复 3600 次。<br />当然，<code>range</code>的用法非常灵活，下面的清单给出了使用<code>range</code>函数的例子：</p><ul><li><code>range(101)</code>：可以用来产生<code>0</code>到<code>100</code>范围的整数，需要注意的是取不到<code>101</code>。</li><li><code>range(1, 101)</code>：可以用来产生<code>1</code>到<code>100</code>范围的整数，相当于是左闭右开的设定，即<code>[1, 101)</code>。</li><li><code>range(1, 101, 2)</code>：可以用来产生<code>1</code>到<code>100</code>的奇数，其中<code>2</code>是步长（跨度），即每次递增的值，<code>101</code>取不到。</li><li><code>range(100, 0, -2)</code>：可以用来产生<code>100</code>到<code>1</code>的偶数，其中<code>-2</code>是步长（跨度），即每次递减的值，<code>0</code>取不到。</li></ul><p>大家可能已经注意到了，上面代码的输出操作和休眠操作都没有用到循环变量<code>i</code>，对于不需要用到循环变量的<code>for-in</code>循环结构，按照 Python 的编程惯例，我们通常把循环变量命名为<code>_</code>，修改后的代码如下所示。<br />虽然结果没什么变化，但是这样写显得你更加专业，逼格瞬间拉满。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">每隔1秒输出一次“hello, world”，持续1小时</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3600</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>上面的代码要执行一个小时，如果想提前结束程序，在 PyCharm 中可以点击运行窗口上的停止按钮，如下图所示。如果在命令提示符或终端中运行代码，可以使用组合键<code>ctrl+c</code>来终止程序。</p><style>.hdbhyuswroub{zoom:40%;}</style><img src="/waterbottle/posts/d8cb/terminate_program.png" class="hdbhyuswroub"><p>下面，我们用<code>for-in</code>循环实现从 1 到 100 的整数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的整数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    total += i<br><span class="hljs-built_in">print</span>(total)<br></code></pre></td></tr></table></figure><p>上面的代码中，变量<code>total</code>的作用是保存累加的结果。在循环的过程中，循环变量<code>i</code>的值会从 1 一直取到 100。<br />对于变量<code>i</code>的每个取值，我们都执行了<code>total += i</code>，它相当于<code>total = total + i</code>，这条语句实现了累加操作。<br />所以，当循环结束，我们输出变量<code>total</code> 的值，它的值就是从 1 累加到 100 的结果 5050。<br />注意，<code>print(total)</code>这条语句前是没有缩进的，它不受<code>for-in</code>循环的控制，不会重复执行。</p><p>我们再来写一个从1到100偶数求和的代码，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        total += i<br><span class="hljs-built_in">print</span>(total)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的<code>for-in</code>循环中我们使用了分支结构来判断循环变量<code>i</code>是不是偶数。</p></blockquote><p>我们也可以修改<code>range</code>函数的参数，将起始值和跨度修改为<code>2</code>，用更为简单的代码实现从 1 到 100 的偶数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>):<br>    total += i<br><span class="hljs-built_in">print</span>(total)<br></code></pre></td></tr></table></figure><p>当然， 更为简单的办法是使用 Python 内置的<code>sum</code>函数求和，这样我们连循环结构都省掉了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.2</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>)))<br></code></pre></td></tr></table></figure><h3 id="while循环"><a class="markdownIt-Anchor" href="#while循环"></a> while循环</h3><p>如果<strong>要构造循环结构但是又不能确定循环重复的次数</strong>，我们推荐使用<code>while</code>循环。<br /><code>while</code>循环通过布尔值或能产生布尔值的表达式来控制循环，当布尔值或表达式的值为<code>True</code>时，循环体（<code>while</code>语句下方保持相同缩进的代码块）中的语句就会被重复执行，当表达式的值为<code>False</code>时，结束循环。</p><p>下面我们用<code>while</code>循环来实现从 1 到 100 的整数求和，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的整数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>total = <span class="hljs-number">0</span><br>i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    total += i<br>    i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(total)<br></code></pre></td></tr></table></figure><p>相较于<code>for-in</code>循环，上面的代码我们在循环开始前增加了一个变量<code>i</code>，我们使用这个变量来控制循环，所以<code>while</code>后面给出了<code>i &lt;= 100</code>的条件。<br />在<code>while</code>的循环体中，我们除了做累加，还需要让变量<code>i</code>的值递增，所以我们添加了<code>i += 1</code>这条语句，这样<code>i</code>的值就会依次取到1、2、3、……，直到 101。<br />当<code>i</code>变成 101 时，<code>while</code>循环的条件不再成立，代码会离开<code>while</code>循环，此时我们输出变量<code>total</code>的值，它就是从 1 到 100 求和的结果 5050。</p><p>如果要实现从 1 到 100 的偶数求和，我们可以对上面的代码稍作修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.3</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>total = <span class="hljs-number">0</span><br>i = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    total += i<br>    i += <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(total)<br></code></pre></td></tr></table></figure><h3 id="break和continue"><a class="markdownIt-Anchor" href="#break和continue"></a> break和continue</h3><p>如果把<code>while</code>循环的条件设置为<code>True</code>，即让条件恒成立会怎么样呢？我们看看下面的代码，还是使用<code>while</code>构造循环结构，计算 1 到 100 的偶数和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.4</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>total = <span class="hljs-number">0</span><br>i = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    total += i<br>    i += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">100</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(total) <br></code></pre></td></tr></table></figure><p>上面的代码中使用<code>while True</code>构造了一个条件恒成立的循环，也就意味着如果不做特殊处理，循环是不会结束的，这就是我们常说的“<strong>死循环</strong>”。<br />为了在<code>i</code>的值超过 100 后让循环停下来，我们使用了<code>break</code>关键字，它的作用是终止循环结构的执行。<br />需要注意的是，<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套循环结构时需要引起注意，后面我们会讲到什么是嵌套的循环结构。<br />除了<code>break</code>之外，还有另一个在循环结构中可以使用的关键字<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从1到100的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.5</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    total += i<br><span class="hljs-built_in">print</span>(total)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码使用<code>continue</code>关键字跳过了<code>i</code>是奇数的情况，只有在<code>i</code>是偶数的前提下，才会执行到<code>total += i</code>。</p></blockquote><h3 id="嵌套的循环结构"><a class="markdownIt-Anchor" href="#嵌套的循环结构"></a> 嵌套的循环结构</h3><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环结构中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个乘法口诀表（九九表）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">打印乘法口诀表</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;九九乘法表&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(j, <span class="hljs-string">&quot;*&quot;</span>, i, <span class="hljs-string">&quot;=&quot;</span>, i * j, end=<span class="hljs-string">&quot;    &quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><p>上面的代码中，<code>for-in</code>循环的循环体中又用到了<code>for-in</code>循环，外面的循环用来控制产生<code>i</code>行的输出，而里面的循环则用来控制在一行中输出<code>j</code>列。<br />显然，里面的<code>for-in</code>循环的输出就是乘法口诀表中的一整行。所以在里面的循环完成时，我们用了一个<code>print()</code>来实现换行的效果，让下面的输出重新另起一行，最后的输出如下所示。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">九九乘法表<br>1 *<span class="hljs-number"> 1 </span>=<span class="hljs-number"> 1 </span>    <br>1 *<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 2 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 4 </span>    <br>1 *<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 3 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 6 </span>  <span class="hljs-number"> 3 </span>*<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 9 </span>    <br>1 *<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 4 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 8 </span>  <span class="hljs-number"> 3 </span>*<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 12 </span>  <span class="hljs-number"> 4 </span>*<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 16 </span>    <br>1 *<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 5 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 10 </span>  <span class="hljs-number"> 3 </span>*<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 15 </span>  <span class="hljs-number"> 4 </span>*<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 20 </span>  <span class="hljs-number"> 5 </span>*<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 25 </span>    <br>1 *<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 6 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 12 </span>  <span class="hljs-number"> 3 </span>*<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 18 </span>  <span class="hljs-number"> 4 </span>*<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 24 </span>  <span class="hljs-number"> 5 </span>*<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 30 </span>  <span class="hljs-number"> 6 </span>*<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 36 </span>    <br>1 *<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 7 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 14 </span>  <span class="hljs-number"> 3 </span>*<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 21 </span>  <span class="hljs-number"> 4 </span>*<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 28 </span>  <span class="hljs-number"> 5 </span>*<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 35 </span>  <span class="hljs-number"> 6 </span>*<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 42 </span>  <span class="hljs-number"> 7 </span>*<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 49 </span>    <br>1 *<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 8 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 16 </span>  <span class="hljs-number"> 3 </span>*<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 24 </span>  <span class="hljs-number"> 4 </span>*<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 32 </span>  <span class="hljs-number"> 5 </span>*<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 40 </span>  <span class="hljs-number"> 6 </span>*<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 48 </span>  <span class="hljs-number"> 7 </span>*<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 56 </span>  <span class="hljs-number"> 8 </span>*<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 64 </span>    <br>1 *<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 9 </span>  <span class="hljs-number"> 2 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 18 </span>  <span class="hljs-number"> 3 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 27 </span>  <span class="hljs-number"> 4 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 36 </span>  <span class="hljs-number"> 5 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 45 </span>  <span class="hljs-number"> 6 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 54 </span>  <span class="hljs-number"> 7 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 63 </span>  <span class="hljs-number"> 8 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 72 </span>  <span class="hljs-number"> 9 </span>*<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 81 </span><br></code></pre></td></tr></table></figure><h3 id="循环结构的应用"><a class="markdownIt-Anchor" href="#循环结构的应用"></a> 循环结构的应用</h3><h4 id="例子1判断素数"><a class="markdownIt-Anchor" href="#例子1判断素数"></a> 例子1：判断素数</h4><p>要求：输入一个大于 1 的正整数，判断它是不是素数。</p><blockquote><p><strong>提示</strong>：素数指的是只能被 1 和自身整除的大于 1 的整数。例如对于正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>n</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span></span></span></span></span>，我们可以通过在 2 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{n - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.654993em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span> 之间寻找有没有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>n</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span></span></span></span></span> 的因子，来判断它到底是不是一个素数。<br />当然，循环不用从 2 开始到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{n - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.654993em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span> 结束，因为对于大于 1 的正整数，因子应该都是成对出现的，所以循环到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msqrt><mi>n</mi></msqrt></mstyle></mrow><annotation encoding="application/x-tex">\small{\sqrt{n}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9360000000000002em;vertical-align:-0.215748em;"></span><span class="mord sizing reset-size6 size5"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span></span> 就可以结束了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入一个大于1的正整数判断它是不是素数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个正整数: &#x27;</span>))<br>end = <span class="hljs-built_in">int</span>(num ** <span class="hljs-number">0.5</span>)<br>is_prime = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, end + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> num % i == <span class="hljs-number">0</span>:<br>        is_prime = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> is_prime:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;num&#125;</span>是素数&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;num&#125;</span>不是素数&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码中我们用了布尔型的变量<code>is_prime</code>，我们先将它赋值为<code>True</code>，假设<code>num</code>是一个素数；<br />接下来，我们在 2 到<code>num ** 0.5</code>的范围寻找<code>num</code>的因子，如果找到了<code>num</code>的因子，那么它一定不是素数，此时我们将<code>is_prime</code>赋值为<code>False</code>，同时使用<code>break</code>关键字终止循环结构；<br />最后，我们根据<code>is_prime</code>的值是<code>True</code>还是<code>False</code>来给出不同的输出。</p></blockquote><h4 id="例子2最大公约数"><a class="markdownIt-Anchor" href="#例子2最大公约数"></a> 例子2：最大公约数</h4><p>要求：输入两个大于 0 的正整数，求两个数的最大公约数。</p><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入两个正整数求它们的最大公约数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br>y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;y = &#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y % i == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;最大公约数: <span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面代码中<code>for-in</code>循环的循环变量值是从大到小的，这样我们找到的能够同时整除<code>x</code>和<code>y</code>的因子<code>i</code>，就是<code>x</code>和<code>y</code>的最大公约数，此时我们用<code>break</code>终止循环。<br />如果<code>x</code>和<code>y</code>互质，那么循环会执行到<code>i</code>变成 1，因为 1 是所有正整数的因子，此时<code>x</code>和<code>y</code>的最大公约数就是 1。</p></blockquote><p>用上面代码的找最大公约数在执行效率是有问题的。假如<code>x</code>的值是<code>999999999998</code>，<code>y</code>的值是<code>999999999999</code>，很显然两个数是互质的，最大公约数为 1。<br />但是我们使用上面的代码，循环会重复<code>999999999998</code>次，这通常是难以接受的。我们可以使用欧几里得算法来找最大公约数，它能帮我们更快的得到想要的结果，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入两个正整数求它们的最大公约数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br>y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;y = &#x27;</span>))<br><span class="hljs-keyword">while</span> y % x != <span class="hljs-number">0</span>:<br>    x, y = y % x, x<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;最大公约数: <span class="hljs-subst">&#123;x&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：解决问题的方法和步骤可以称之为算法，对于同一个问题，我们可以设计出不同的算法，不同的算法在存储空间的占用和执行效率上都会存在差别，而这些差别就代表了算法的优劣。<br />大家可以对比上面的两段代码，体会一下为什么我们说欧几里得算法是更好的选择。上面的代码中<code>x, y = y % x, x</code>语句表示将<code>y % x</code>的值赋给<code>x</code>，将<code>x</code> 原来的值赋给<code>y</code>。</p></blockquote><h4 id="例子3猜数字游戏"><a class="markdownIt-Anchor" href="#例子3猜数字游戏"></a> 例子3：猜数字游戏</h4><p>要求：计算机出一个 1 到 100 之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息“大一点”、“小一点”或“猜对了”，如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">猜数字小游戏</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>target = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment"># 计算机随机生成一个 1 到 100 的数</span><br>guess_count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 猜测次数计数器</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我已经想好了一个 1 到 100 之间的整数，请开始猜测吧！&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    user_input = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你猜的数字：&quot;</span>))  <span class="hljs-comment"># 获取用户输入</span><br>    guess_count += <span class="hljs-number">1</span>  <span class="hljs-comment"># 每次猜测次数加一</span><br>    <br>    <span class="hljs-keyword">if</span> user_input &lt; target:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大一点&quot;</span>)<br>    <span class="hljs-keyword">elif</span> user_input &gt; target:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小一点&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;猜对了！你一共猜了 <span class="hljs-subst">&#123;guess_count&#125;</span> 次。&quot;</span>)<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 猜中后结束循环</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码使用<code>import random</code>导入了 Python 标准库的<code>random</code>模块，该模块的<code>randrange</code>函数帮助我们生成了 1 到 100 范围的随机数（不包括 100）。<br />变量<code>guess_count</code>用来记录循环执行的次数，也就是用户一共猜了几次，每循环一次<code>guess_count</code>的值都会加 1。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>05.分支结构</title>
    <link href="/waterbottle/posts/e564/"/>
    <url>/waterbottle/posts/e564/</url>
    
    <content type="html"><![CDATA[<p>了解python中的分支控制结构</p><span id="more"></span><h2 id="分支结构"><a class="markdownIt-Anchor" href="#分支结构"></a> 分支结构</h2><p>迄今为止，我们写的 Python 程序都是一条一条语句按顺序向下执行的，这种代码结构叫做顺序结构。然而仅有顺序结构并不能解决所有的问题.<br />比如我们设计一个游戏，游戏第一关的过关条件是玩家获得1000 分，那么在第一关完成后，我们要根据玩家得到的分数来决定是进入第二关，还是告诉玩家“GameOver”（游戏结束）。<br />在这种场景下，我们的代码就会产生两个分支，而且只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。<br />给大家一分钟的时间，你应该可以想到至少5 个以上类似的例子，赶紧试一试吧！</p><h3 id="使用if和else构造分支结构"><a class="markdownIt-Anchor" href="#使用if和else构造分支结构"></a> 使用if和else构造分支结构</h3><p>在 Python 中，构造分支结构最常用的是<code>if</code>、<code>elif</code>和<code>else</code>三个关键字。所谓<strong>关键字</strong>就是编程语言中有特殊含义的单词，很显然你不能够使用它作为变量名。<br />当然，我们并不是每次构造分支结构都会把三个关键字全部用上，我们通过例子加以说明。<br />例如我们要写一个身体质量指数（BMI）的计算器。身体质量质数也叫体质指数，是国际上常用的衡量人体胖瘦程度以及是否健康的一个指标，计算公式如下所示。通常认为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mn>18.5</mn><mo>≤</mo><mi>B</mi><mi>M</mi><mi>I</mi><mo>&lt;</mo><mn>24</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{18.5 \le BMI &lt; 24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7373700000000001em;vertical-align:-0.12237300000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord">1</span><span class="mord">8</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">4</span></span></span></span></span>是正常范围<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>B</mi><mi>M</mi><mi>I</mi><mo>&lt;</mo><mn>18.5</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{BMI &lt; 18.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6501870000000001em;vertical-align:-0.035190000000000006em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord">.</span><span class="mord">5</span></span></span></span></span> 说明体重过轻， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>B</mi><mi>M</mi><mi>I</mi><mo>≥</mo><mn>24</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{BMI \ge 24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7373700000000001em;vertical-align:-0.12237300000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">4</span></span></span></span></span> 说明体重过重， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>B</mi><mi>M</mi><mi>I</mi><mo>≥</mo><mn>27</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{BMI \ge 27}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7373700000000001em;vertical-align:-0.12237300000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">7</span></span></span></span></span> 就属于肥胖的范畴了。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>B</mi><mi>M</mi><mi>I</mi><mo>=</mo><mfrac><mtext>体重</mtext><mrow><mtext>身</mtext><msup><mtext>高</mtext><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">BMI = \frac{体重}{身高^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">身</span><span class="mord"><span class="mord cjk_fallback">高</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">体</span><span class="mord cjk_fallback">重</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p><strong>说明</strong>：上面公式中的体重以千克（kg）为单位，身高以米（m）为单位。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">BMI计算器</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>height = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;身高(m)：&#x27;</span>))<br>weight = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;体重(kg)：&#x27;</span>))<br>bmi = weight / (height * height)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;bmi = :<span class="hljs-number">0.1</span>f&#125;</span>&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt; <span class="hljs-number">24</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的身材很标准了，再接再厉&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：<code>if</code>语句的最后面有一个<code>:</code>，它是用英文输入法输入的冒号；程序中输入的<code>'</code>、<code>&quot;</code>、<code>=</code>、<code>(</code>、<code>)</code>&gt; 等特殊字符，都是在英文输入法状态下输入的，这一点之前已经提醒过大家了。<br />很多初学者经常会忽略这一点，等到执行代码时，就会看到一大堆错误提示。当然，认真读一下错误提示还是很容易发现哪里出了问题<br />但是<strong>强烈建议</strong>大家在写代码的时候<strong>切换到英文输入法</strong>，这样可以避免很多不必要的麻烦。</p></blockquote><p>上面的代码中，我们在计算和输出 BMI 之后，加上了一段分支结构，如果满足 <code>18.5 &lt;= BMI &lt; 24</code>，程序会输出“你的身材很标准了，再接再厉”，但是如果不满足条件，这段输出就没有了。这就是刚才提到的，代码可以有不同的执行路径，有些代码不一定会执行到。<br />我们在<code>if</code>关键字的后面给出了一个表达式<code>18.5 &lt;= bmi &lt; 24</code>，之前我们说过，关系运算会产生布尔值，如果<code>if</code>后面的布尔值为<code>True</code>，那么<code>if</code>语句下方，有四个空格缩进的<code>print(&quot;你的身材很标准了，再接再厉&quot;)</code>就会被执行。</p><p>需要说明的是，Python 中<strong>使用缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。<br />换句话说，若干行连续的语句如果保持了相同的缩进，那么它们就属于同一个<strong>代码块</strong>，相当于是一个执行的整体。<br />缩进可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，强烈建议大家<strong>不要使用制表键（Tab键）来缩进代码</strong>，如果你已经习惯了这么做，可以设置你的代码编辑器自动将 1 个制表键变成 4 个空格，很多代码编辑器都支持这项功能<br />PyCharm中默认也是这样设定的。还有一点，在 C、C++、Java 等编程语言中，<code>18.5 &lt;= bmi &lt; 24</code>要写成两个条件<code>bmi &gt;= 18.5</code>和<code>bmi &lt; 24</code>，然后把两个条件用与运算符连接起来<br />Python 中也可以这么做，例如刚才的<code>if</code>语句也可以写成<code>if bmi &gt;= 18.5 and bmi &lt; 24:</code>，但是没有必要，而且pycharm会自动识别冗余语句做出提示，建议你使用简写。</p><p>下面用 Java 代码做了同样的事情，看不懂 Java 代码没关系，感受一下它和 Python 语法的区别就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">double</span> weight, height, BMI;<br>        System.out.println(<span class="hljs-string">&quot;请输入体重，单位KG：&quot;</span>);<br>        weight = scanner.nextDouble();<br>        System.out.println(<span class="hljs-string">&quot;请输入身高，单位米：&quot;</span>);<br>        height = scanner.nextDouble();<br><br>        <span class="hljs-comment">//计算BMI</span><br>        BMI = weight / (height * height);<br>        <span class="hljs-keyword">if</span> (BMI &gt;= <span class="hljs-number">18.5</span> &amp;&amp; BMI &lt; <span class="hljs-number">25.0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您的BMI值为&quot;</span> + BMI + <span class="hljs-string">&quot;BMI值正常，请保持&quot;</span>);<br>        &#125; <br><br>        scanner.close();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面就是 BMI 计算器 对应的 Java 代码，很多人喜欢 Python 语言不是没有道理的，通常它都能用更少的代码解决同样的问题。</p></blockquote><p>接下来，我们对上面的代码稍作修改，在 BMI 不满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mn>18.5</mn><mo>≤</mo><mi>B</mi><mi>M</mi><mi>I</mi><mo>&lt;</mo><mn>24</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{18.5 \le BMI &lt; 24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7373700000000001em;vertical-align:-0.12237300000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord">1</span><span class="mord">8</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">4</span></span></span></span></span> 的情况下，也给出相信的提示信息。<br />我们可以在<code>if</code>代码块的后面增加一个<code>else</code>代码块，它会在<code>if</code>语句给出的条件没有达成时执行，如下所示。<br />很显然，<code>if</code>下面的<code>print(&quot;你的身材很标准了，再接再厉&quot;)</code>和<code>else</code>下面的<code>print('你的身材不够标准哟！')</code>只有一个会被执行到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">BMI计算器</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>height = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;身高(m)：&#x27;</span>))<br>weight = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;体重(kg)：&#x27;</span>))<br>bmi = weight / (height * height)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;bmi = :<span class="hljs-number">.1</span>f&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt; <span class="hljs-number">24</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的身材很标准了，再接再厉&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的身材不够标准哟！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果要给出更为准确的提示信息，我们可以再次修改上面的代码，通过<code>elif</code>关键字为上面的分支结构增加更多的分支，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">BMI计算器</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.2</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>height = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;身高(cm)：&#x27;</span>))<br>weight = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;体重(kg)：&#x27;</span>))<br>bmi = weight / (height / <span class="hljs-number">100</span>) ** <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;bmi = :<span class="hljs-number">.1</span>f&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">if</span> bmi &lt; <span class="hljs-number">18.5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的体重过轻！&#x27;</span>)<br><span class="hljs-keyword">elif</span> bmi &lt; <span class="hljs-number">24</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的身材很棒！&#x27;</span>)<br><span class="hljs-keyword">elif</span> bmi &lt; <span class="hljs-number">27</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的体重过重！&#x27;</span>)<br><span class="hljs-keyword">elif</span> bmi &lt; <span class="hljs-number">30</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已轻度肥胖！&#x27;</span>)<br><span class="hljs-keyword">elif</span> bmi &lt; <span class="hljs-number">35</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已中度肥胖！&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已重度肥胖！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>大家可以自行试试运行上面的代码，输入不同的数值看看会得出什么样的结果</p><h3 id="使用match和case构造分支结构"><a class="markdownIt-Anchor" href="#使用match和case构造分支结构"></a> 使用match和case构造分支结构</h3><p>Python 3.10 中增加了一种新的构造分支结构的方式，通过使用<code>match</code>和<code>case</code> 关键字，我们可以轻松的构造出多分支结构。<br />Python的官方文档在介绍这个新语法时，举了一个 HTTP 响应状态码识别的例子（根据 HTTP 响应状态输出对应的描述），非常有意思。如果不知道什么是<br />HTTP 响应状态吗，可以看看 MDN 上面的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">文档</a>。<br />下面我们对官方文档上的示例稍作修改，为大家讲解这个语法，先看看下面用<code>if-else</code>结构实现的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">分数分类</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>score = <span class="hljs-number">85</span><br><br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是A&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是B&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是C&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是D&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是F&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">你的成绩是<span class="hljs-selector-tag">B</span><br></code></pre></td></tr></table></figure><p>下面是使用<code>match-case</code>语法实现的代码，虽然作用完全相同，但是代码显得更加简单优雅。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">分数分类</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>score = <span class="hljs-number">85</span><br><br><span class="hljs-keyword">match</span> score:<br>    <span class="hljs-keyword">case</span> _ <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是A&quot;</span>)<br>    <span class="hljs-keyword">case</span> _ <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">80</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是B&quot;</span>)<br>    <span class="hljs-keyword">case</span> _ <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">70</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是C&quot;</span>)<br>    <span class="hljs-keyword">case</span> _ <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">60</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是D&quot;</span>)<br>    <span class="hljs-keyword">case</span> _:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是F&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：带有<code>_</code>的<code>case</code>语句在代码中起到通配符的作用，如果前面的分支都没有匹配上，代码就会来到<code>case _</code>。<code>case _</code><br />的是可选的，并非每种分支结构都要给出通配符选项。如果分支中出现了<code>case _</code>，它只能放在分支结构的最后面，如果它的后面还有其他的分支，那么这些分支将是不可达的。</p></blockquote><p>当然，<code>match-case</code>语法还有很多高级玩法，其中有一个合并模式可以先教给大家。例如，我们要将分数<code>大于90</code>和<code>大于等于80小于90</code>归入一个分支<br /><code>大于等于70小于80</code>和<code>大于等于60小于70</code>归入到一个分支，其他保持不变，代码还可以这么写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">分数分类</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.2</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>score = <span class="hljs-number">85</span><br><br><span class="hljs-keyword">match</span> score:<br>    <span class="hljs-keyword">case</span> _ <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span> | (<span class="hljs-number">80</span> &lt;= score &lt; <span class="hljs-number">90</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是B及以上&quot;</span>)<br>    <span class="hljs-keyword">case</span> _ <span class="hljs-keyword">if</span> <span class="hljs-number">70</span> &lt;= score &lt; <span class="hljs-number">80</span> <span class="hljs-keyword">or</span> <span class="hljs-number">60</span> &lt;= score &lt; <span class="hljs-number">70</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是D及以上&quot;</span>)<br>    <span class="hljs-keyword">case</span> _:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩是F&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">你的成绩是<span class="hljs-selector-tag">B</span>及以上<br></code></pre></td></tr></table></figure><h3 id="分支结构的应用"><a class="markdownIt-Anchor" href="#分支结构的应用"></a> 分支结构的应用</h3><h4 id="例子1分段函数求值"><a class="markdownIt-Anchor" href="#例子1分段函数求值"></a> 例子1：分段函数求值</h4><p>有如下所示的分段函数，要求输入<code>x</code>，计算出<code>y</code>。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>5</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mn>2</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5</mn><mi>x</mi><mo>+</mo><mn>3</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>&lt;</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">y = \begin{cases} 3x - 5, &amp; (x \gt 1) \\\\ x + 2, &amp; (-1 \le x \le 1) \\\\ 5x + 3, &amp; (x \lt -1) \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mpunct">,</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mpunct">,</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">5</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">分段函数求值</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span>:<br>    y = <span class="hljs-number">3</span> * x - <span class="hljs-number">5</span><br><span class="hljs-keyword">elif</span> x &gt;= -<span class="hljs-number">1</span>:<br>    y = x + <span class="hljs-number">2</span><br><span class="hljs-keyword">else</span>:<br>    y = <span class="hljs-number">5</span> * x + <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;y = &#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>根据实际开发的需要，分支结构是可以嵌套的，也就是说在分支结构的<code>if</code>、<code>elif</code>或<code>else</code>代码块中还可以再次引入分支结构。<br />例如<code>if</code>条件成立表示玩家过关，但过关以后还要根据你获得宝物或者道具的数量对你的表现给出评价（比如点亮一颗、两颗或三颗星星），那么我们就需要在<code>if</code>的内部再构造一个新的分支结构。<br />同理，我们在<code>elif</code>和<code>else</code>中也可以构造新的分支，我们称之为嵌套的分支结构。按照这样的思路，上面的分段函数求值也可以用下面的代码来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">分段函数求值</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span>:<br>    y = <span class="hljs-number">3</span> * x - <span class="hljs-number">5</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">if</span> x &gt;= -<span class="hljs-number">1</span>:<br>        y = x + <span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        y = <span class="hljs-number">5</span> * x + <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;y = &#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：大家可以自己感受和评判一下上面两种写法哪一种更好。在“<a href="https://zhuanlan.zhihu.com/p/111843067"><strong>Python 之禅</strong></a>&gt; ”中有这么一句话 “<strong>Flat is better than nested</strong>”。<br />之所以认为“扁平化”的代码更好，是因为代码嵌套的层次如果很多，会严重的影响代码的可读性。所以，我个人更推荐大家使用第一种写法。</p></blockquote><h4 id="例子2百分制成绩转换成等级"><a class="markdownIt-Anchor" href="#例子2百分制成绩转换成等级"></a> 例子2：百分制成绩转换成等级</h4><p>要求：如果输入的成绩在90分以上（含90分），则输出<code>A</code>；输入的成绩在80分到90分之间（不含90分），则输出<code>B</code>；<br />输入的成绩在70分到80分之间（不含80分），则输出<code>C</code>；输入的成绩在60分到70分之间（不含70分），则输出<code>D</code>；输入的成绩在60分以下，则输出<br /><code>E</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">百分制成绩转换为等级制成绩</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>score = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入成绩: &#x27;</span>))<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>    grade = <span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span>:<br>    grade = <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span>:<br>    grade = <span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span>:<br>    grade = <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    grade = <span class="hljs-string">&#x27;E&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;grade = &#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>04.Python语言中的运算符</title>
    <link href="/waterbottle/posts/2f71/"/>
    <url>/waterbottle/posts/2f71/</url>
    
    <content type="html"><![CDATA[<p>了解python中的运算符和运算规则</p><span id="more"></span><h2 id="python语言中的运算符"><a class="markdownIt-Anchor" href="#python语言中的运算符"></a> Python语言中的运算符</h2><p>Python 语言支持很多种运算符，下面的表格按照运算符的优先级从高到低，对 Python中的运算符进行了罗列。有了变量和运算符，我们就可以构造各种各样的表达式来解决实际问题。<br />在计算机科学中，<strong>表达式是计算机程序中的句法实体，它由一个或多个常量、变量、函数和运算符组合而成，编程语言可以对其进行解释和计算以得到另一个值</strong>。<br />不理解这句话没有关系，但是一定要知道，不管使用什么样的编程语言，构造表达式都是非常重要的。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code>、<code>[:]</code></td><td>索引、切片</td></tr><tr><td><code>**</code></td><td>幂</td></tr><tr><td><code>~</code>、<code>+</code>、<code>-</code></td><td>按位取反、正号、负号</td></tr><tr><td><code>*</code>、<code>/</code>、<code>%</code>、<code>//</code></td><td>乘、除、模、整除</td></tr><tr><td><code>+</code>、<code>-</code></td><td>加、减</td></tr><tr><td><code>&gt;&gt;</code>、<code>&lt;&lt;</code></td><td>右移、左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code>、`</td><td>按位异或、按位或</td></tr><tr><td><code>&lt;=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&gt;=</code></td><td>小于等于、小于、大于、大于等于</td></tr><tr><td><code>==</code>、<code>!=</code></td><td>等于、不等于</td></tr><tr><td><code>is</code>、<code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code>、<code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code>、<code>or</code>、<code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>//=</code>、<code>**=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code></td><td>赋值运算符</td></tr></tbody></table><blockquote><p><strong>说明</strong>：<br />所谓优先级就是在一个运算的表达式中，如果出现了多个运算符，应该先执行什么再执行什么的顺序。编写代码的时候，如果搞不清楚一个表达式中运算符的优先级，可以仿照数学运算中先括号，后乘除，再加减的原则，使用圆括号（小括号）来确保运算的执行顺序。</p></blockquote><h3 id="算术运算符"><a class="markdownIt-Anchor" href="#算术运算符"></a> 算术运算符</h3><p>Python 中的算术运算符非常丰富，除了大家最为熟悉的加、减、乘、除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">算术运算符</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> + <span class="hljs-number">10</span>)     <span class="hljs-comment"># 加法运算，输出20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> - <span class="hljs-number">10</span>)     <span class="hljs-comment"># 减法运算，输出0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> * <span class="hljs-number">10</span>)     <span class="hljs-comment"># 乘法运算，输出100</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> / <span class="hljs-number">10</span>)     <span class="hljs-comment"># 除法运算，输出1.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> // <span class="hljs-number">10</span>)    <span class="hljs-comment"># 整除运算，输出1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> % <span class="hljs-number">10</span>)     <span class="hljs-comment"># 取余运算，输出0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> ** <span class="hljs-number">10</span>)    <span class="hljs-comment"># 求幂运算，输出10000000000</span><br></code></pre></td></tr></table></figure><p>算术运算需要先乘除后加减，这一点跟数学课本中讲的知识没有区别，也就是说乘除法的运算优先级是高于加减法的。如果还有求幂运算，求幂运算的优先级是高于乘除法的。如果想改变算术运算的执行顺序，可以使用英文输入法状态下的圆括号（小括号），写在圆括号中的表达式会被优先执行，如下面的例子所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">算术运算的优先级</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> + <span class="hljs-number">2</span> * <span class="hljs-number">3</span>)         <span class="hljs-comment"># 7</span><br><span class="hljs-built_in">print</span>((<span class="hljs-number">1</span>+<span class="hljs-number">2</span>) * <span class="hljs-number">3</span>)         <span class="hljs-comment"># 9</span><br><span class="hljs-built_in">print</span>((<span class="hljs-number">1</span>+<span class="hljs-number">2</span>) * <span class="hljs-number">3</span> ** <span class="hljs-number">2</span>)    <span class="hljs-comment"># 27</span><br><span class="hljs-built_in">print</span>(((<span class="hljs-number">1</span>+<span class="hljs-number">2</span>) * <span class="hljs-number">3</span>) ** <span class="hljs-number">2</span>)  <span class="hljs-comment"># 81</span><br></code></pre></td></tr></table></figure><h3 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h3><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。赋值运算符还可以跟上面的算术运算符放在一起，组合成复合赋值运算符。<br />例如：<code>a += b</code>相当于<code>a = a + b</code>，<code>a *= a + 2</code>相当于<code>a = a * (a + 2)</code>。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">赋值运算符和复合赋值运算符</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br>a += b        <span class="hljs-comment"># 相当于：a = a + b</span><br>a *= a + <span class="hljs-number">2</span>    <span class="hljs-comment"># 相当于：a = a * (a + 2)</span><br><span class="hljs-built_in">print</span>(a)      <span class="hljs-comment"># 大家算一下这里会输出什么</span><br></code></pre></td></tr></table></figure><p>赋值运算构成的表达式本身不产生任何值，也就是说，如果你把一个赋值表达式放到<code>print</code>函数中试图输出表达式的值，将会产生语法错误。<br />为了解决这个问题，Python3.8 中引入了一个新的赋值运算符<code>:=</code> 我们称之为海象运算符，大家可以猜一猜它为什么叫这个名字。<br />海象运算符也是将运算符右侧的值赋值给左边的变量，与赋值运算符不同的是，运算符右侧的值也是整个表达式的值，看看下面的代码大家就明白了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">海象运算符</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># SyntaxError: invalid syntax</span><br><span class="hljs-comment"># print((a = 1))</span><br><span class="hljs-comment"># 海象运算符</span><br><span class="hljs-built_in">print</span>((a := <span class="hljs-number">1</span>))  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(a)         <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：上面<code>print((a = 1))</code>代码如果不注释掉，运行代码会看到<code>SyntaxError: invalid syntax</code>错误信息。<br />注意，这行代码中我们给<code>a = 1</code>加上了圆括号，如果不小心写成了<code>print(a = 1)</code>，会看到<code>TypeError: 'a' is an invalid keyword argument for print()</code> 错误信息，后面讲到函数的时候，大家就会明白这个错误提示是什么意思了。</p></blockquote><h3 id="比较运算符和逻辑运算符"><a class="markdownIt-Anchor" href="#比较运算符和逻辑运算符"></a> 比较运算符和逻辑运算符</h3><p>比较运算符也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信大家一看就能懂。需要提醒的是比较相等用的是<code>==</code>，请注意这里是两个等号，因为<code>=</code>是赋值运算符。<br />我们在上面刚刚讲到过。比较不相等用的是<code>!=</code>，跟数学课本中使用的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mo mathvariant="normal" lspace="0em" rspace="0em">≠</mo></mstyle></mrow><annotation encoding="application/x-tex">\small{\neq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.799992em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span></span> 并不相同。Python 2 中曾经使用过<code>&lt;&gt;</code>来表示不等于，在 Python 3 中使用<code>&lt;&gt;</code>会引发<code>SyntaxError</code>（语法错误）。<br />比较运算符会产生布尔值，要么是<code>True</code>，要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值或者产生布尔值的表达式，如果两边的布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。<br />当然，如果<code>and</code>运算符左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，这时运算符右边的布尔值会被跳过（专业的说法叫短路处理，如果<code>and</code>右边是一个表达式，那么这个表达式不会执行）。<br /><code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值或产生布尔值的表达式，如果两边的布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，当它左边的布尔值为<code>True</code>的情况下，右边的布尔值会被短路（如果<code>or</code>右边是一个表达式，那么这个表达式不会执行）。<br /><code>not</code>运算符的后面可以跟一个布尔值，如果<code>not</code>后面的布尔值或表达式是<code>True</code>，那么运算的结果就是<code>False</code>；如果<code>not</code>后面的布尔值或表达式是<code>False</code>，那么运算的结果就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">比较运算符和逻辑运算符的使用</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>flag0 = <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br>flag1 = <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span><br>flag2 = <span class="hljs-number">2</span> &lt; <span class="hljs-number">1</span><br>flag3 = flag1 <span class="hljs-keyword">and</span> flag2<br>flag4 = flag1 <span class="hljs-keyword">or</span> flag2<br>flag5 = <span class="hljs-keyword">not</span> flag0<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag0 =&#x27;</span>, flag0)     <span class="hljs-comment"># flag0 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag1 =&#x27;</span>, flag1)     <span class="hljs-comment"># flag1 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag2 =&#x27;</span>, flag2)     <span class="hljs-comment"># flag2 = False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag3 =&#x27;</span>, flag3)     <span class="hljs-comment"># flag3 = False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag4 =&#x27;</span>, flag4)     <span class="hljs-comment"># flag4 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag5 =&#x27;</span>, flag5)     <span class="hljs-comment"># flag5 = False</span><br><span class="hljs-built_in">print</span>(flag1 <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> flag2)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> == <span class="hljs-number">2</span>)      <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以上面的<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<br /><code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容默认以空格分开。</p></blockquote><h3 id="运算符和表达式应用"><a class="markdownIt-Anchor" href="#运算符和表达式应用"></a> 运算符和表达式应用</h3><h4 id="例子1温度换算"><a class="markdownIt-Anchor" href="#例子1温度换算"></a> 例子1：温度换算</h4><blockquote><p><strong>要求</strong>：输入华氏温度将其转换为摄氏温度，华氏温度到摄氏温度的转换公式为： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>C</mi><mo>=</mo><mo stretchy="false">(</mo><mi>F</mi><mo>−</mo><mn>32</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>1.8</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{C = (F - 32) / 1.8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">1</span><span class="mord">.</span><span class="mord">8</span></span></span></span></span> 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将华氏温度转换为摄氏温度</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入华氏温度: &#x27;</span>))<br>c = (f - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;f:<span class="hljs-number">0.1</span>f&#125;</span>华氏度 = <span class="hljs-subst">&#123;c:<span class="hljs-number">0.1</span>f&#125;</span>摄氏度&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面代码中的<code>input</code>函数用于从键盘接收用户输入，由于输入的都是字符串，如果想处理成浮点小数来做后续的运算，可以用我们上一课讲解的类型转换的方法，用<code>float</code>函数将<code>str</code>类型处理成<code>float</code>类型。</p></blockquote><p>上面的代码中，我们对<code>print</code>函数输出的内容进行了格式化处理，<code>print</code>中我们使用了<code>f字符串</code>的形式输出内容，即在双引号前加入小写f(该写法为3.8之后添加的特性，注意版本号)，然后在要输出的内容中使用中括号<code>&#123;&#125;</code>把上面的变量带入。变量后使用<code>:0.1f</code>的形式告诉python，这两个数字只需要保留一位小数输出。</p><p>如果是低版本python，可以使用下面的输出方式，可以看到<code>print</code>输出的字符串中有两个<code>%.1f</code>占位符。<br />这两个占位符会被<code>%</code>之后的<code>(f, c)</code>中的两个<code>float</code>类型的变量值给替换掉，浮点数小数点后保留1位有效数字。<br />如果字符串中有<code>%d</code>占位符，那么我们会用<code>int</code>类型的值替换掉它，如果字符串中有<code>%s</code>占位符，那么它会被<code>str</code>类型的值替换掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将华氏温度转换为摄氏温度</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.1</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入华氏温度: &#x27;</span>))<br>c = (f - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.1f华氏度 = %.1f摄氏度&#x27;</span> % (f, c))<br></code></pre></td></tr></table></figure><h4 id="例子2计算圆的周长和面积"><a class="markdownIt-Anchor" href="#例子2计算圆的周长和面积"></a> 例子2：计算圆的周长和面积</h4><blockquote><p><strong>要求</strong>：输入一个圆的半径（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>r</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></span>），计算出它的周长（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mn>2</mn><mi>π</mi><mi>r</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{2 \pi r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5799960000000001em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></span> ）和面积（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>π</mi><msup><mi>r</mi><mn>2</mn></msup></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{\pi r^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.713364em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span> ）。</p></blockquote><p>学过Java的同学应该都知道，Java中内置了一个<code>math</code>允许我们调用常见的数学计算方程，其中就有<code>pi</code>这个方程。</p><p>同样的 Python 中也有一个名为<code>math</code> 的内置模块，该模块中定义了名为<code>pi</code>的变量，它的值就是圆周率。如果要使用 Python 内置的这个<code>pi</code>，我们可以对上面的代码稍作修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入半径计算圆的周长和面积</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> math<br><br>radius = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入圆的半径: &#x27;</span>))  <span class="hljs-comment"># 输入: 10</span><br>perimeter = <span class="hljs-number">2</span> * math.pi * radius<br>area = math.pi * radius ** <span class="hljs-number">2</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;perimeter = :<span class="hljs-number">0.2</span>f&#125;</span>&quot;</span>)  <span class="hljs-comment"># 输出：perimeter = 62.83</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;perimeter=<span class="hljs-subst">&#123;perimeter:<span class="hljs-number">0.2</span>f&#125;</span>&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;area = :<span class="hljs-number">0.2</span>f&#125;</span>&quot;</span>)       <span class="hljs-comment"># 输出：area = 314.16</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;area=<span class="hljs-subst">&#123;area:<span class="hljs-number">0.2</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>上面代码中的<code>import math</code>表示导入<code>math</code>模块，导入该模块以后，才能用<code>math.pi</code>得到圆周率的值。</p></blockquote><blockquote><p>上面的代码中，我们使用了<code>f-字符串</code>的两种格式化写法，<code>f'&#123;xxx =&#123;a:0.2f&#125; &#125;'</code>和<code>f'&#123;a = :0.2f&#125;'</code>，第一种已经在上面使用过一次，所以我们现在来讲解一下第二种用法。</p></blockquote><blockquote><p>假如变量<code>a</code>的值是<code>9.87</code>，那么字符串<code>f'&#123;a = 0.2f&#125;'</code>的值是<code>a = 9.87</code>；而字符串<code>f'&#123;a = :.1f&#125;'</code>的值是<code>a = 9.9</code>。这种格式化输出的方式会同时输出变量名和变量值。</p></blockquote><h4 id="例子3判断闰年"><a class="markdownIt-Anchor" href="#例子3判断闰年"></a> 例子3：判断闰年</h4><p>要求：输入一个 1582 年以后的年份，判断该年份是不是闰年。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入年份，闰年输出True，平年输出False</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>year = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入年份: &#x27;</span>))<br>is_leap = year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;is_leap = &#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：今天我们使用的公历，判断闰年的规则是：</p><ol><li>公元年份非 4 的倍数是平年；</li><li>公元年份为 4 的倍数但非 100 的倍数是闰年；</li><li>公元年份为 400 的倍数是闰年。我们在输入年份时要注意这一点。<br />上面的代码通过<code>%</code>来判断<code>year</code>是不是<code>4</code>的倍数、<code>100</code>的倍数、<code>400</code>&gt; 的倍数，然后用<code>and</code>和<code>or</code>运算符将三个条件组装在一起，前两个条件要同时满足，第三个条件跟前两个条件的组合只需满足其中之一。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>03.Python语言中的变量</title>
    <link href="/waterbottle/posts/b1d8/"/>
    <url>/waterbottle/posts/b1d8/</url>
    
    <content type="html"><![CDATA[<p>了解python中的变量</p><span id="more"></span><h2 id="python语言中的变量"><a class="markdownIt-Anchor" href="#python语言中的变量"></a> Python语言中的变量</h2><p>对于想学习编程的新手来说，有两个问题可能是他们很想知道的，其一是“什么是（计算机）程序”，其二是“写（计算机）程序能做什么”。先说说我对这两个问题的理解：<br /><strong>程序是数据和指令的有序集合</strong>，<strong>写程序就是用数据和指令控制计算机做我们想让它做的事情</strong>。<br />今时今日，为什么有那么多人选择用Python 语言来写程序，因为 Python 语言足够简单和强大。相较于 C、C++、Java 这样的编程语言，Python 对初学者和非专业人士更加友好，<br />很多问题在Python 语言中都能找到简单优雅的解决方案。接下来，我们就从最基础的语言元素开始，带大家认识和使用 Python 语言。</p><h3 id="一些常识"><a class="markdownIt-Anchor" href="#一些常识"></a> 一些常识</h3><p>在开始系统的学习 Python 编程之前，我们先来科普一些计算机的基础知识。计算机的硬件系统通常由五大部件构成，包括：<strong>运算器</strong>、<strong>控制器</strong>、<strong>存储器</strong>、<strong>输入设备</strong>和<strong>输出设备</strong>。<br />其中，运算器和控制器放在一起就是我们常说的<strong>中央处理器</strong>（CPU），它的功能是执行各种运算和控制指令。刚才我们提到过，程序是指令的集合，写程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。<br />存储器可以分为<strong>内部存储器</strong>和<strong>外部存储器</strong>，前者就是我们常说的内存，它是中央处理器可以直接寻址的存储空间，程序在执行的过程中，对应的数据和指令需要加载到内存中。<br />输入设备和输出设备经常被统称为I/O 设备，键盘、鼠标、麦克风、摄像头是典型的输入设备，而显示器、打印机、扬声器等则是典型的输出设备。<br />目前，我们使用的计算机基本大多是遵循“冯·诺依曼体系结构”的计算机，这种计算机有两个关键点：一是<strong>将存储器与中央处理器分开</strong>；二是<strong>将数据以二进制方式编码</strong>。</p><p>二进制是一种“逢二进一”的计数法，跟人类使用的“逢十进一”的计数法本质是一样的。人类因为有十根手指，所以使用了十进制计数法，在计数时十根手指用完之后，就只能用进位的方式来表示更大的数值。<br />当然凡事都有例外，玛雅人可能是因为长年光着脚的原因，把脚趾头也都用上了，于是他们使用了二十进制的计数法。基于这样的计数方式，玛雅人使用的历法跟我们平常使用的历法就产生了差异。<br />按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而 2013 年则是新的“太阳纪”的开始。后来这件事情还被以讹传讹的方式误传为“2012年是玛雅人预言的世界末日”的荒诞说法。今天有很多人猜测，玛雅文明之所以发展缓慢跟使用了二十进制是有关系的。<br />对于计算机来说，二进制在物理器件上最容易实现的，因为可以用高电压表示1，用低电压表示0。不是所有写程序的人都需要熟悉二进制，熟悉十进制与二进制、八进制、十六进制的转换，大多数时候我们即便不了解这些知识也能写程序。<br />但是，我们必须知道，计算机是使用二进制计数的，不管什么样的数据，到了计算机内存中都是以二进制形态存在的。</p><blockquote><p><strong>说明</strong><br />：关于二进制计数法以及它与其他进制如何相互转换，大家可以翻翻名为《计算机导论》或《计算机文化》的书，计算机专业的同学如果连进制转换都忘记怎么计算的话，建议重修一下《数字逻辑》。此处就不再进行赘述了，不清楚的读者可以自行研究。</p></blockquote><h3 id="变量和类型"><a class="markdownIt-Anchor" href="#变量和类型"></a> 变量和类型</h3><p>要想在计算机的内存中保存数据，首先得说一说变量这个概念。在编程语言中，<strong>变量是数据的载体</strong>，简单的说就是一块用来保存数据的内存空间。<br /><strong>变量的值可以被读取和修改</strong>，这是所有运算和控制的基础。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图像、音频、视频等各种各样的数据类型。<br />虽然数据在计算机中都是以二进制形态存在的，但是我们可以用不同类型的变量来表示数据类型的差异。Python语言中预设了多种数据类型，也允许我们自定义新的数据类型，这一点在后面会讲到。<br />我们首先来了解几种 Python 中最为常用的数据类型。</p><ol><li><p>整型（<code>int</code>）：Python 中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。运行下面的代码，看看会输出什么。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">0b100</span>)  <span class="hljs-comment"># 二进制整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0o100</span>)  <span class="hljs-comment"># 八进制整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span>)    <span class="hljs-comment"># 十进制整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0x100</span>)  <span class="hljs-comment"># 十六进制整数</span><br></code></pre></td></tr></table></figure></li><li><p>浮点型（<code>float</code>）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>，表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mn>1.23456</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{1.23456 \times 10^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.788361em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord">1</span><span class="mord">.</span><span class="mord">2</span><span class="mord">3</span><span class="mord">4</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span>）。运行下面的代码，看看会输出什么。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">123.456</span>)    <span class="hljs-comment"># 数学写法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1.23456e2</span>)  <span class="hljs-comment"># 科学计数法</span><br></code></pre></td></tr></table></figure></li><li><p>字符串型（<code>str</code>）：字符串是以单引号或双引号包裹起来的任意文本，比如<code>'hello'</code>和<code>&quot;hello&quot;</code>。</p></li><li><p>布尔型（<code>bool</code>）：布尔型只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，可以用来表示现实世界中的“是”和“否”，命题的“真”和“假”，状况的“好”与“坏”，水平的“高”与“低”等等。如果一个变量的值只有两种状态，我们就可以使用布尔型。</p></li></ol><h3 id="变量命名"><a class="markdownIt-Anchor" href="#变量命名"></a> 变量命名</h3><p>对于每个变量，我们都需要给它取一个名字，就如同我们每个人都有自己的名字一样。在 Python 中，变量命名需要遵循以下的规则和惯例。</p><ul><li>规则部分：<ul><li>规则1：变量名由<strong>字母</strong>、<strong>数字</strong>和<strong>下划线</strong>构成，数字不能开头。需要说明的是，这里说的字母指的是 Unicode 字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符。但是一些特殊字符（如：<code>！</code>、<code>@</code>、<code>#</code>等）是不能出现在变量名中的。我们强烈建议大家把这里说的字母理解为<strong>尽可能只使用英文字母</strong>。</li><li>规则2：Python 是<strong>大小写敏感</strong>的编程语言，简单的说就是大写的<code>A</code>和小写的<code>a</code>是两个不同的变量，这一条其实并不算规则，而是需要大家注意的地方。</li><li>规则3：变量名<strong>不要跟 Python 的关键字重名</strong>，<strong>尽可能避开 Python 的保留字</strong>。这里的关键字是指在 Python 程序中有特殊含义的单词（如：<code>is</code>、<code>if</code>、<code>else</code>、<code>for</code>、<code>while</code>、<code>True</code>、<code>False</code>等），保留字主要指 Python 语言内置函数、内置模块等的名字（如：<code>int</code>、<code>print</code>、<code>input</code>、<code>str</code>、<code>math</code>、<code>os</code>等）。</li></ul></li><li>惯例部分：<ul><li>惯例1：变量名通常使用<strong>小写英文字母</strong>，<strong>多个单词用下划线进行连接</strong>。</li><li>惯例2：受保护的变量用单个下划线开头。</li><li>惯例3：私有的变量用两个下划线开头。</li></ul></li></ul><p>惯例2和惯例3大家暂时不用管，讲到后面自然会明白的。当然，作为一个专业的程序员，给变量命名时做到<strong>见名知意</strong>也是非常重要，这彰显了一个程序员的专业气质，很多开发岗位的面试也非常看重这一点。</p><h3 id="变量的使用"><a class="markdownIt-Anchor" href="#变量的使用"></a> 变量的使用</h3><p>下面通过例子来说明变量的类型和变量的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用变量保存数据并进行加减乘除运算</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">20</span>        <span class="hljs-comment"># 定义变量a，赋值20</span><br>b = <span class="hljs-number">5</span>        <span class="hljs-comment"># 定义变量b，赋值5</span><br><span class="hljs-built_in">print</span>(a, b)   <span class="hljs-comment"># 20  15</span><br><span class="hljs-built_in">print</span>(a + b)  <span class="hljs-comment"># 25</span><br><span class="hljs-built_in">print</span>(a - b)  <span class="hljs-comment"># 26</span><br><span class="hljs-built_in">print</span>(a * b)  <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(a / b)  <span class="hljs-comment"># 4</span><br></code></pre></td></tr></table></figure><p>在 Python 中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念非常类似，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。<br />如果暂时不理解函数这个概念也不要紧，我们会在后续的内容中专门讲解函数的定义和使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用type函数检查变量的类型</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">3.14159</span><br>c = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>d = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))  <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))  <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))  <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d))  <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>可以通过 Python 内置的函数来改变变量的类型，下面是一些常用的和变量类型相关的函数。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串（在可能的情况下）转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码方式。</li><li><code>chr()</code>：将整数（字符编码）转换成对应的（一个字符的）字符串。</li><li><code>ord()</code>：将（一个字符的）字符串转换成对应的整数（字符编码）。</li></ul><p>下面的例子为大家演示了 Python 中类型转换的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">变量的类型转换操作</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">3.14159</span><br>c = <span class="hljs-string">&#x27;123&#x27;</span><br>d = <span class="hljs-string">&#x27;100&#x27;</span><br>e = <span class="hljs-string">&#x27;3.14159&#x27;</span><br>f = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>g = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(a))         <span class="hljs-comment"># int类型的100转成float，输出10.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(b))           <span class="hljs-comment"># float类型的3.14159转成int，输出3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(c))           <span class="hljs-comment"># str类型的&#x27;123&#x27;转成int，输出123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(c, base=<span class="hljs-number">16</span>))  <span class="hljs-comment"># str类型的&#x27;123&#x27;按十六进制转成int，输出291</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(d, base=<span class="hljs-number">2</span>))   <span class="hljs-comment"># str类型的&#x27;100&#x27;按二进制转成int，输出4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(e))         <span class="hljs-comment"># str类型的&#x27;3.14159&#x27;转成float，输出3.14159</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(f))          <span class="hljs-comment"># str类型的&#x27;hello, world&#x27;转成bool，输出True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(g))           <span class="hljs-comment"># bool类型的True转成int，输出1</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>str</code>类型转<code>int</code>类型时可以通过<code>base</code>参数来指定进制，可以将字符串视为对应进制的整数进行转换。<br /><code>str</code>类型转成<code>bool</code>&gt; 类型时，只要字符串有内容，不是<code>''</code>或<code>&quot;&quot;</code>，对应的布尔值都是<code>True</code>。&gt; <code>bool</code>类型转<code>int</code>类型时，<code>True</code>会变成<code>1</code>，<code>False</code>会变成<br /><code>0</code>。</p></blockquote><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>在 Python 程序中，我们可以<strong>使用变量来保存数据</strong>，<strong>变量有不同的类型</strong>，常用的类型有<code>int</code>、<code>float</code>、<code>str</code>和<code>bool</code>。<br />在有需要的情况下，可以通过 Python 内置的函数对变量进行类型转换。变量是可以做运算的，这是解决很多问题的先决条件，我们会在下一课中为大家详细介绍变量的运算。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>02.第一个Python程序</title>
    <link href="/waterbottle/posts/2c30/"/>
    <url>/waterbottle/posts/2c30/</url>
    
    <content type="html"><![CDATA[<p>创建一个python文件并运行</p><span id="more"></span><h2 id="第一个python程序"><a class="markdownIt-Anchor" href="#第一个python程序"></a> 第一个Python程序</h2><p>在上一课中，我们对 Python 语言的过去现在有了一些了解，我们准备好了运行 Python 程序所需要的解释器环境。相信大家已经迫不及待的想开始自己的Python 编程之旅了。<br />但是新问题来了，我们应该在什么地方书写 Python 程序，然后又怎么运行它呢？</p><h3 id="编写代码的工具"><a class="markdownIt-Anchor" href="#编写代码的工具"></a> 编写代码的工具</h3><p>下面我们为大家讲解几种可以编写和运行 Python 代码的工具，大家可以根据自己的需求来选择合适的工具。当然，对于初学者，我个人比较推荐使用PyCharm，因为它不需要太多的配置也非常的强大，对新手还是很友好的。<br />如果你也听说过或者喜欢 PyCharm，可以直接跳过下面对其他工具的介绍，直接快进到讲解PyCharm 的地方。</p><h4 id="默认的交互式环境"><a class="markdownIt-Anchor" href="#默认的交互式环境"></a> 默认的交互式环境</h4><p>我们打开 Windows 的“命令提示符”或“PowerShell”工具，输入<code>python</code>然后按下<code>Enter</code>键，这个命令会把我们带到一个交互式环境中。<br />所谓交互式环境，就是我们输入一行代码并按下<code>Enter</code>键，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中，如下所示。</p><style>.pfotcbobhdnp{}</style><img src="/waterbottle/posts/2c30/run_python.png" class="pfotcbobhdnp"><blockquote><p><strong>说明</strong>：使用 macOS 系统的用户需要打开“终端”工具，输入<code>python3</code>进入交互式环境。</p></blockquote><p>如果希望退出交互式环境，可以在交互式环境中输入<code>quit()</code>，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">quit()<br></code></pre></td></tr></table></figure><h4 id="更好的交互式环境-ipython"><a class="markdownIt-Anchor" href="#更好的交互式环境-ipython"></a> 更好的交互式环境 - IPython</h4><p>上面说的交互式环境用户体验并不怎么好，大家使用一下就能感受到。我们可以用 IPython 来替换掉它，因为 IPython提供了更为强大的编辑和交互功能。<br />我们可以在命令提示符或终端中使用 Python 的包管理工具<code>pip</code>来安装 IPython，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install ipython<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：在使用上面的命令安装 IPython 之前，可以先通过<br /><code>pip config set global.index-url https://mirrors.huaweicloud.com/repository/pypi/simple</code> 命令或<br /><code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/</code><br />将下载源修改为国内的华为镜像或清华镜像，否则下载安装的过程可能会非常的缓慢，个人来说这两个镜像使用感受相对较好。</p></blockquote><p>接下来可以使用下面的命令启动 IPython，进入交互式环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipython<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：还有一个网页版的 IPython 名叫 Jupyter，我们在用得着它的地方再为大家介绍。</p></blockquote><h4 id="文本编辑神器-visual-studio-code"><a class="markdownIt-Anchor" href="#文本编辑神器-visual-studio-code"></a> 文本编辑神器 - Visual Studio Code</h4><p>Visual Studio Code 是由微软开发能够在 Windows、 Linux 和 macOS等操作系统上运行的代码编辑神器。<br />它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。如果大家要选择一款高级文本编辑工具，强烈推荐Visual Studio Code，这款编辑器可以通过下载插件适配不同的编程语言和使用环境。但是集成开发环境我们还有更好的选择，所以关于它的<a href="https://code.visualstudio.com/">下载</a>、安装和使用，有兴趣的读者可以自行研究。</p><h4 id="集成开发环境-pycharm"><a class="markdownIt-Anchor" href="#集成开发环境-pycharm"></a> 集成开发环境 - PyCharm</h4><p>如果用 Python 语言开发商业项目，我们推荐大家使用更为专业的工具 PyCharm。PyCharm是由捷克一家名为 <a href="https://www.jetbrains.com/">JetBrains</a> 的公司针对 Python 语言提供的集成开发环境（IDE)。<br />所谓集成开发环境，通常是指提供了编写代码、运行代码、调试代码、分析代码、版本控制等一系列强大功能和便捷操作的开发工具，因此特别适合用于商业项目的开发。<br />我们可以在JetBrains 公司的官方网站上找到 PyCharm 的<a href="https://www.jetbrains.com/pycharm/download">下载链接</a>，如下图所示。</p><p>官方提供了两个 PyCharm 的版本，一个是免费的社区版（Community Edition），功能相对弱小，但对于初学者来说是完全够用的；另一个是付费的专业版（Professional<br />Edition），功能非常强大，但需要按年或按月支付费用，新用户可以免费试用30天时间。目前好像两个版本合并了，专业版转变成付费使用高级功能，不过免费版本足够我们使用了。<br />PyCharm的安装没有任何难度，运行下载的安装程序，几乎全部使用默认设置进行安装就可以了。<br />对于使用 Windows系统的小伙伴，其中有一个步骤可以按照下图所示勾选“创建桌面快捷方式”和“在右键菜单中添加&quot;Open Folder as Project&quot;”就可以了。</p><style>.kdnvzadvwtky{zoom:50%;}</style><img src="/waterbottle/posts/2c30/using_pycharm_1.png" class="kdnvzadvwtky"><p>第一次运行 PyCharm 时，在提示你导入 PyCharm 设置的界面上直接选择“Do not import settings”，然后我们就可以看到如下图所示的欢迎界面。<br />此处，我们可以先点击“Customize”选项对 PyCharm 做一些个性化的设置。</p><style>.qwoiggdmqfuo{zoom:45%;}</style><img src="/waterbottle/posts/2c30/using_pycharm_2.png" class="qwoiggdmqfuo"><p>我们先点击左下角的齿轮进入设置页面，然后搜索<code>language</code>，找到如图设置，把编辑器语言调整为中文，调整后需要重启编辑器。重新打开后就会发现我们已经将编辑器语言调整为了中文。</p><style>.pbpqhyjykksy{zoom:45%;}</style><img src="/waterbottle/posts/2c30/language.png" class="pbpqhyjykksy"><p>接下来，我们可以在“Projects”选项中点击“New Project”来创建一个新的项目，此处还可以“打开已有项目”或“从版本控制服务器（VCS）获取项目”，如下图所示。</p><style>.lxijmqtrjydf{zoom:45%;}</style><img src="/waterbottle/posts/2c30/using_pycharm_3.png" class="lxijmqtrjydf"><p>创建项目的时候需要指定项目的路径并创建”虚拟环境“，我们建议每个 Python 都在自己专属的虚拟环境中运行。<br />如果你的系统上还没Python 环境，那么 PyCharm 会提供官网的下载链接，当你点击“Create”按钮创建项目时，它会联网下载 Python 解释器。</p><p>当然，我们并不推荐这么做，因为我们在上一课已经安装过 Python 环境了。<br />在系统有 Python 环境的情况下，PyCharm 通常会自动发现Python 解释器的位置并以此为基础创建虚拟环境，所以大家看到的画面应该如下图所示。</p><style>.jytyxppkrdli{zoom:45%;}</style><img src="/waterbottle/posts/2c30/using_pycharm_4.png" class="jytyxppkrdli"><blockquote><p><strong>说明</strong>：上面的截图来自于 Windows 系统，如果使用 macOS 系统，你看到的项目路径和 Python 解释器路径会跟上面有所不同。</p></blockquote><p>创建好项目后会出现如下图所示的画面，我们可以通过在项目文件夹上点击鼠标右键，选择“新建”菜单下的“Python File”来创建一个Python 文件。<br />在给文件命名时建议使用英文字母和下划线的组合(<strong>这里为了方便查看，我使用了中文的目录名和文件名，正式开发时请不要学习我</strong>)，创建好的 Python 文件会自动打开，进入可编辑的状态。</p><style>.mdhycxijwlyd{zoom:50%;}</style><img src="/waterbottle/posts/2c30/using_pycharm_5.png" class="mdhycxijwlyd"><p>接下来，我们可以在代码窗口编写我们的 Python 代码。写好代码后，可以在窗口中点击鼠标右键，选择“运行”菜单项来运行代码，下面的“Run”窗口会显示代码的执行结果，如下图所示。</p><style>.zncubkibizxr{zoom:50%;}</style><img src="/waterbottle/posts/2c30/using_pycharm_7.png" class="zncubkibizxr"><p>到这里，我们的第一个 Python 程序已经运转起来了，很酷吧！对了，PyCharm 有一个叫“每日小贴士”的弹窗，会教给你一些使用 PyCharm的小技巧，如下图所示。<br />如果不需要，直接关闭就可以了；如果不希望它再次出现，在关闭前可以勾选“不显示”。</p><style>.njmhbvawxulm{zoom:50%;}</style><img src="/waterbottle/posts/2c30/using_pycharm_8.png" class="njmhbvawxulm"><h3 id="你好世界"><a class="markdownIt-Anchor" href="#你好世界"></a> 你好世界</h3><p>按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出<code>hello, world</code>，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了 Unix 操作系统）和布莱恩·柯尼汉（awk 语言的发明者）在他们的不朽著作《<em>The C Programming Language</em>》中写的第一段代码，下面是对应的 Python 语言的版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：上面代码中的圆括号、单引号都是在英文输入法状态下输入的，如果不小心写成了中文的圆括号或单引号，运行代码时会出现<code>SyntaxError: invalid character '（' (U+FF08)</code>或<code>SyntaxError: invalid character '‘' (U+2018)</code>这样的错误提示。</p></blockquote><p>上面的代码只有一个语句，在这个语句中，我们用到了一个名为<code>print</code>的函数，它可以帮助我们输出指定的内容；<br /><code>print</code>函数圆括号中的<code>'hello, world'</code>是一个字符串，它代表了一段文本内容；<br />在 Python 语言中，我们可以用单引号或双引号来表示一个字符串。不同于 C、C<ins>或 Java 这样的编程语言，Python 代码中的语句不需要用分号来表示结束，也就是说，如果我们想再写一条语句，只需要回车换行即可。<br />代码如下所示。此外，Python代码也不需要通过编写名为<code>main</code>的入口函数来使其运行，提供入口函数是编写可执行的 C、C</ins> 或 Java 代码必须要做的事情，这一点很多程序员都不陌生，但是在Python 语言中它并不是必要的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;goodbye, world&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果不使用 PyCharm 这样的集成开发环境，我们也可以直接调用 Python 解释器来运行 Python 程序。我们可以将上面的代码保存成一个名为<code>example01.py</code>的文件。<br />对于Windows 系统，我们假设该文件在<code>C:\code</code>目录下，我们打开“命令提示符”或“PowerShell”并输入下面的命令就可以运行它。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python C:\code\example01.py<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：如果路径比较长，不愿意手动输入，我们可以通过拖拽的方式将文件直接拖到“命令提示符”或“终端”中，这样会自动输入完整的文件路径。</p></blockquote><p>大家可以试着修改上面的代码，比如将单引号中的<code>hello, world</code>换成其他内容或者多写几个这样的语句，看看会运行出怎样的结果。<br />需要提醒大家的是，写Python 代码时，最好每一行只写一条语句。虽然，我们可以使用<code>;</code>作为分隔将多个语句写在一行中，但是这样做会让代码变得非常难看，不再具备良好的可读性。</p><h3 id="注释你的代码"><a class="markdownIt-Anchor" href="#注释你的代码"></a> 注释你的代码</h3><p>注释是编程语言的一个重要组成部分，用于在代码中解释代码的作用，从而达到增强代码可读性的目标。<br />当然，我们也可以将代码中暂时不需要运行的代码段通过添加注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。<br />简单的说，<strong>注释会让代码更容易看懂但不会影响代码的执行结果</strong>。</p><p>Python 中有两种形式的注释：</p><ol><li>单行注释：以<code>#</code>和空格开头，可以注释掉从<code>#</code>开始后面一整行的内容。</li><li>多行注释：三个引号（通常用双引号）开头，三个引号结尾，通常用于添加多行说明性内容。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第一个Python程序 - hello, world</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 1.0</span><br><span class="hljs-string">Author: 瓶子</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># print(&quot;你好，Python 学习者！&quot;)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你好，Python 学习者！&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>到此，我们已经把第一个 Python 程序运行起来了，是不是很有成就感？！只要你坚持学习下去，再过一段时间，我们就可以用 Python语言做更多更酷的事情。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>01.初识Python</title>
    <link href="/waterbottle/posts/29c/"/>
    <url>/waterbottle/posts/29c/</url>
    
    <content type="html"><![CDATA[<p>python简介</p><span id="more"></span><h2 id="初识python"><a class="markdownIt-Anchor" href="#初识python"></a> 初识Python</h2><h3 id="python简介"><a class="markdownIt-Anchor" href="#python简介"></a> Python简介</h3><p>Python（英式发音：/ˈpaɪθən/；美式发音：/ˈpaɪθɑːn/）是由荷兰人吉多·范罗苏姆（Guido vonRossum）发明的一种编程语言，是目前世界上最受欢迎和拥有最多用户的编程语言。<br />Python 强调代码的可读性和语法的简洁性，相较于C、C++、Java 这些同样影响深远的编程语言，Python 让使用者能够用更少的代码表达自己的意图。<br />下面是几个权威的编程语言排行榜给出的Python 语言的排名，其中第1张图由 TIOBE Index 提供，第3张图由 IEEE Spectrum 提供。<br />值得一提的是第2张图，它展示了编程语言在全球最大代码托管平台GitHub 上受欢迎的程度，最近的四年时间 Python 语言都占据了冠军的宝座。</p><style>.ikpqurwuplgp{zoom:40%;}</style><img src="/waterbottle/posts/29c/tiobe_index.png" class="ikpqurwuplgp"><style>.mvbjbsfguzgp{zoom:60%;}</style><img src="/waterbottle/posts/29c/github_pypl_and_ieee_spectrum.png" class="mvbjbsfguzgp"><h4 id="python编年史"><a class="markdownIt-Anchor" href="#python编年史"></a> Python编年史</h4><p>下面是 Python 语言发展过程中的一些重要时间点：</p><ol><li>1989年12月：吉多·范罗苏姆决心开发一个新的脚本语言及其解释器来打发无聊的圣诞节，新语言将作为 ABC 语言的继承者，主要用来替代 Unix shell 和 C 语言实现系统管理。 由于吉多本人是 BBC 电视剧《<em>Monty Python’s Flying Circus</em>》的忠实粉丝，所以他选择了 Python 这个词作为新语言的名字。</li><li>1991年02月：吉多·范罗苏姆在 alt.sources 新闻组上发布了 Python 解释器的最初代码，标记为版本0.9.0。</li><li>1994年01月：Python 1.0发布，梦开始的地方。</li><li>2000年10月：Python 2.0发布，Python 的整个开发过程更加透明，生态圈开始慢慢形成。</li><li>2008年12月：Python 3.0发布，引入了诸多现代编程语言的新特性，但并不完全向下兼容。</li><li>2011年04月：pip 首次发布，Python 语言有了自己的包管理工具。</li><li>2018年07月：吉多·范罗苏姆宣布从“终身仁慈独裁者”（开源项目社区出现争议时拥有最终决定权的人）的职位上“永久休假”。</li><li>2020年01月：在 Python 2和 Python 3共存了11年之后，官方停止了对 Python 2的更新和维护，希望用户尽快切换到 Python 3。</li><li>目前：Python 在大模型（GPT-3、GPT-4、BERT等）、计算机视觉（图像识别、目标检测、图像生成等）、智能推荐（YouTube、Netflix、字节跳动等）、自动驾驶（Waymo、Apollo等）、语音识别、数据科学、量化交易、自动化测试、自动化运维等领域都得到了广泛的应用，Python 语言的生态圈也是相当繁荣。</li></ol><blockquote><p><strong>说明</strong><br />：大多数软件的版本号一般分为三段，形如A.B.C，其中A表示大版本号，当软件整体重写升级或出现不向后兼容的改变时，才会增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。</p></blockquote><h4 id="python优缺点0"><a class="markdownIt-Anchor" href="#python优缺点0"></a> Python优缺点0</h4><p>Python 语言的优点很多，简单为大家列出几点。</p><ol><li><strong>简单优雅</strong>，跟其他很多编程语言相比，Python <strong>更容易上手</strong>。</li><li>能用更少的代码做更多的事情，<strong>提升开发效率</strong>。</li><li>开放源代码，拥有<strong>强大的社区和生态圈</strong>。</li><li><strong>能够做的事情非常多</strong>，有极强的适应性。</li><li><strong>胶水语言</strong>，能够黏合其他语言开发的东西。</li><li>解释型语言，更容易<strong>跨平台</strong>，能够在多种操作系统上运行。</li></ol><p>Python 最主要的缺点是<strong>执行效率低</strong>（解释型语言的通病），如果更看重代码的执行效率，C、C++ 或 Go 可能是你更好的选择。</p><h3 id="安装python环境"><a class="markdownIt-Anchor" href="#安装python环境"></a> 安装Python环境</h3><p>工欲善其事，必先利其器。想要开始你的 Python 编程之旅，首先得在计算机上安装 Python 环境，简单的说就是安装运行 Python 程序需要的Python 解释器。<br />我们推荐大家安装官方的 Python 3 解释器，它是用 C 语言编写的，我们通常也称之为CPython，它可能是你目前最好的选择。<br />首先，我们需要从官方网站的<a href="https://www.python.org/downloads/">下载页面</a>找到下载链接，点击“Download”按钮进入下载页面后，需要根据自己的操作系统选择合适的 Python 3安装程序，如下图所示。</p><style>.idfugppwnfmw{zoom:40%;}</style><img src="/waterbottle/posts/29c/python_download_page_1.png" class="idfugppwnfmw"><p>进入下载页面后，有些 Python 版本并没有提供 Windows 和 macOS 系统的安装程序，只提供了源代码的压缩文件，对于熟悉 Linux系统的小伙伴，我们可以通过源代码构建安装；<br />对于使用 Windows 或 macOS 系统的小伙伴，我们还是<strong>强烈建议</strong>使用安装程序。例如，你想安装Python 3.10，选择 Python 3.10.10 或 Python 3.10.11 就能找到 Windows 或 macOS 系统的安装包<br />而其他版本可能只有源代码，如下图所示。</p><style>.suvduykdxibb{zoom:36%;}</style><img src="/waterbottle/posts/29c/python_download_page_2.png" class="suvduykdxibb"><h4 id="windows环境"><a class="markdownIt-Anchor" href="#windows环境"></a> Windows环境</h4><p>下面我们以 Windows 11为例，讲解如何在 Windows 操作系统上安装 Python 环境。双击运行从官网下载的安装程序，会打开一个安装向导，如下图所示。</p><style>.ufgrupscyenm{zoom:50%;}</style><img src="/waterbottle/posts/29c/install_python_1.png" class="ufgrupscyenm"><p>首先，一定要记得勾选“Add python.exe to PATH”选项，它会帮助我们将 Python 解释器添加到 Windows 系统的 PATH环境变量中（不理解没关系，勾上就对了）；<br />其次，“Use admin privileges when installingpy.exe”是为了在安装过程中获得管理员权限，建议勾选。<br />然后，我们选择“CustomizeInstallation”，使用自定义安装的模式，这是专业人士的选择。而你就（假装）是那个专业人士，不建议使用“Install Now”（默认安装）。</p><p>接下来，安装向导会提示你勾选需要的“Optional Features”（可选特性），这里咱们可以直接全选。值得一提的是其中的第2项，它是 Python的包管理工具 pip，可以帮助我们安装三方库和三方工具，所以一定要记得勾选它，然后点击“Next”进入下一环节。</p><style>.kxhnflifxwhi{zoom:50%;}</style><img src="/waterbottle/posts/29c/install_python_2.png" class="kxhnflifxwhi"><p>接下来是对“Advanced Options”（高级选项）的选择，这里我们建议大家只勾选“Add Python to environment variables”和“Precompilestandard library”这两个选项<br />前者会帮助我们自动配置好环境变量，后者会预编译标准库（生成<code>.pyc</code>文件），这样在使用时就无需临时编译了。还是那句话，不理解没关系，勾上就对了。下面的“Customize install location”（自定义安装路径）<br /><strong>强烈建议</strong>修改为自定义的路径，这个路径中不应该包含中文、空格或其他特殊字符，注意这一点会为你将来减少很多不必要的麻烦。设置完成后，点击“Install”开始安装。</p><style>.nocvidvcobja{zoom:50%;}</style><img src="/waterbottle/posts/29c/install_python_3.png" class="nocvidvcobja"><p>安装成功会出现如下图所示的画面，安装成功的关键词是“successful”，如果安装失败，这里的单词会变成“failed”。</p><style>.mgvfajppsxqj{zoom:50%;}</style><img src="/waterbottle/posts/29c/install_python_4.png" class="mgvfajppsxqj"><p>安装完成后可以打开 Windows 的“命令行提示符”或 PowerShell，然后输入<code>python --version</code>或<code>python -V</code>来检查安装是否成功，这个命令是查看Python 解释器的版本号。<br />如果看到如下所示的画面，那么恭喜你，Python 环境已经安装成功了。这里我们建议再检查一下 Python 的包管理工具pip 是否可用，对应的命令是<code>pip --version</code>或<code>pip -V</code>。</p><style>.lrrzyyenomol{zoom:50%;}</style><img src="/waterbottle/posts/29c/install_python6.png" class="lrrzyyenomol"><blockquote><p><strong>说明</strong>：如果安装过程报错或提示安装失败，很有可能是你的 Windows</p></blockquote><p>系统缺失了一些动态链接库文件或缺少必要的构建工具导致的。可以在<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">微软官网</a></p><blockquote><p>下载“Visual Studio 2022 生成工具”进行修复，如下图所示。</p><style>.xofjstjpcpto{zoom:50%;}</style><img src="/waterbottle/posts/29c/vs_build_tools_download.png" class="xofjstjpcpto"><p>上面下载的“Visual Studio 2022生成工具”需要联网才能运行，运行后会出现如下图所示的画面，大家可以参考下图勾选对应的选项进行修复。<br />修复过程需要联网下载对应的软件包，这个过程可能会比较耗时间，修复成功后可能会要求重启你的操作系统。</p><style>.thcdbprjshix{zoom:50%;}</style><img src="/waterbottle/posts/29c/vs_build_tools_install.png" class="thcdbprjshix"></blockquote><h4 id="其他安装方式"><a class="markdownIt-Anchor" href="#其他安装方式"></a> 其他安装方式</h4><p>有人可能会推荐新手直接安装 <a href="https://www.anaconda.com/download/success">Anaconda</a>，因为 Anaconda 会帮助我们安装 Python解释器以及一些常用的三方库，除此之外还提供了一些便捷的工具，特别适合萌新小白。<br />我个人并不推荐这种方式，因为在安装 Anaconda时你会莫名其妙安装了一大堆有用没用的三方库（占用比较多的硬盘空间）。<br />其他关于 Anaconda 的小毛病此处就不再赘述了，如果你非要使用Anaconda，推荐安装 Miniconda，它跟 Anaconda 在同一个下载页面。</p><p>还有萌新经常会听到或说出，“我要写 Python 程序，安装一个 PyCharm 不就可以了吗？”。这里简单科普一下，PyCharm 只是一个辅助写Python 代码的工具，它本身并不具备运行 Python 代码的能力。<br />运行 Python 代码靠的是我们上面安装的 Python 解释器。当然，有些PyCharm 版本在创建 Python 项目时，如果检测不到你电脑上的 Python 环境，也会提示你联网下载 Python 解释器。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>快速入门手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快速文档</title>
    <link href="/waterbottle/posts/517f0a0e/"/>
    <url>/waterbottle/posts/517f0a0e/</url>
    
    <content type="html"><![CDATA[<p>工作常用内容，动态更新</p><span id="more"></span><h1 id="ftp下载"><a class="markdownIt-Anchor" href="#ftp下载"></a> ftp下载</h1><p><code>wget &quot;&quot; --ftp-user= --ftp-password=</code></p><h1 id="信息化看门狗替换"><a class="markdownIt-Anchor" href="#信息化看门狗替换"></a> 信息化看门狗替换</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#username替换为home目录下实际用户名称</span><br>sed -i <span class="hljs-string">&#x27;s/wwyt-server.jar/&quot;\/home\/&#123;username&#125;\/wwyt\/wwyt-server\/wwyt-server.jar&quot;/g&#x27;</span> /home/&#123;username&#125;/wwyt/watchdog.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作常用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo强化手册</title>
    <link href="/waterbottle/posts/b4c91620/"/>
    <url>/waterbottle/posts/b4c91620/</url>
    
    <content type="html"><![CDATA[<p>Hexo使用帮助文件，汇集总结使用中常见的各类配置和常见调整</p><span id="more"></span><h2 id="1-在博客中添加文件"><a class="markdownIt-Anchor" href="#1-在博客中添加文件"></a> 1、在博客中添加文件</h2><p>在博客的根目录的配置文件_config.yml中，找到 post_asset_folder项，设置为true ，这样在创建文章时会自动在文章.md所在目录/source/_posts文件夹内生成一个与文章同名的文件夹。例如新建文章hexo new post example则会生成一个example.md文件与一个名为example的文件夹。<br />例如 <code>hexo new &quot;Hexo强化手册&quot; -p 帮助文件/Hexo强化手册1</code><br />这样就可以在 <code>帮助文件</code> 这个目录下，创建一个title叫<code>Hexo强化手册</code>，文件名称叫<code>Hexo强化手册1</code>的文件和与其同名的目录。</p><p>把example这个博文需要展示的图片放在example文件夹目录下；</p><p>文章内使用<code>[title](file_name)</code> 的形式就可以创建一个跳转连接</p><hr />]]></content>
    
    
    <categories>
      
      <category>Hexo帮助</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Gitee仓库操作指南</title>
    <link href="/waterbottle/posts/703d05d2/"/>
    <url>/waterbottle/posts/703d05d2/</url>
    
    <content type="html"><![CDATA[<p>Gitee仓库操作指南合集，如果需要详细指南可以参考<a href="https://gitee.com/help">Gitee帮助中心</a></p><span id="more"></span><h2 id="仓库设置ssh生成添加ssh公钥"><a class="markdownIt-Anchor" href="#仓库设置ssh生成添加ssh公钥"></a> 仓库设置SSH，生成/添加SSH公钥</h2><p>按如下命令来生成 sshkey<br /><code>ssh-keygen -t ed25519 -C &quot;xxxxx@xxxxx.com&quot;</code><br />这里的-t 指定密钥类型，默认是 rsa ，可以省略。</p><p><strong>注意：这里的 <a href="mailto:xxxxx@xxxxx.com">xxxxx@xxxxx.com</a> 只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱。</strong><br /><strong>现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。</strong></p><p>按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_ed25519.pub 文件内容，获取到你的 public key<br /><code>cat ~/.ssh/id_ed25519.pub</code></p><p>复制生成后的 ssh key，通过仓库主页 「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」 ，添加生成的 public key 添加到仓库中。</p><p><code>ssh -T git@gitee.com</code><br />首次使用需要确认并添加主机到本机SSH可信列表。若返回 Hi XXX! You’ve successfully authenticated, but <a href="http://Gitee.com">Gitee.com</a> does not provide shell access. 内容，则证明添加成功。</p>]]></content>
    
    
    <categories>
      
      <category>Gitee指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS系统命令和操作技巧</title>
    <link href="/waterbottle/posts/7d6c437/"/>
    <url>/waterbottle/posts/7d6c437/</url>
    
    <content type="html"><![CDATA[<p>CentOS系统命令和操作技巧，整和大部分常用命令和操作方式等。</p><span id="more"></span><hr /><h2 id="一-系统配置类"><a class="markdownIt-Anchor" href="#一-系统配置类"></a> 一、系统配置类</h2><h3 id="11-防火墙操作命令"><a class="markdownIt-Anchor" href="#11-防火墙操作命令"></a> 1.1、防火墙操作命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看防火墙状态</span><br>firewall-cmd --state<br><br><span class="hljs-comment"># 启/停用防火墙</span><br>systemctl start/stop firewalld<br><br><span class="hljs-comment"># 禁止/开启firewall开机启动：</span><br>systemctl <span class="hljs-built_in">disable</span>/enable  firewalld<br><br><span class="hljs-comment"># 开放端口</span><br>firewall-cmd --zone=public --add-port=80/tcp --permanent<br><br><span class="hljs-comment"># 关闭端口</span><br>firewall-cmd --zone=public --remove-port=80/tcp --permanent<br>命令含义： --zone <span class="hljs-comment">#作用域 --add-port=80/tcp #添加端口，格式为：端口/通讯协议 --permanent #永久生效，没有此参数重启后失效</span><br><br><span class="hljs-comment">#做完重启防火墙；</span><br>[参考连接](https://www.cnblogs.com/Sungeek/p/8257681.html)<br><br><span class="hljs-comment"># 开启http</span><br>firewall-cmd --add-service=http --permanent<br><br><span class="hljs-comment"># 查看http是否开启</span><br>firewall-cmd --query-service http<br><br><span class="hljs-comment"># 重启防火墙命令：</span><br>firewall-cmd --reload<br><br><span class="hljs-comment"># 查询开放的端口：</span><br>firewall-cmd --list-port<br></code></pre></td></tr></table></figure><hr /><h3 id="12-修改系统ip地址等网络配置"><a class="markdownIt-Anchor" href="#12-修改系统ip地址等网络配置"></a> 1.2、修改系统ip地址等网络配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 路径：/etc/sysconfig/network-scripts/</span><br><br><span class="hljs-comment"># 安装ifconfig包：</span><br>yum -y install net-tools<br><span class="hljs-comment">#此目录下放置着系统的网络配置文件，修改时需要先确认目前本机使用的是哪个配置再进行修改</span><br><br><span class="hljs-comment"># 修改配置固定IP：</span><br>BOOTPROTO=static<br>IPADDR=xxx.xxx.xxx.xxx <span class="hljs-comment"># 这里填ip</span><br>NETMASK=xxx.xxx.xxx.xxx <span class="hljs-comment"># 这里填网络掩码，如255.255.255.0</span><br>GATEWAY=xxx.xxx.xx.xxx <span class="hljs-comment"># 这里填网关ip</span><br><br><span class="hljs-comment"># 添加DNS识别</span><br><span class="hljs-comment"># 修改/etc/resolv.conf文件，添加DNS识别地址</span><br><span class="hljs-comment"># 阿里解析</span><br>nameserver 223.5.5.5<br><span class="hljs-comment"># 谷歌解析</span><br>nameserver 8.8.8.8<br><br><span class="hljs-comment"># 查看网关配置：</span><br>netstat -rn<br><br><span class="hljs-comment"># 重启网卡，选其一执行即可</span><br>service network restart;<br>systemctl restart network<br></code></pre></td></tr></table></figure><hr /><h3 id="13-更改默认启动模式"><a class="markdownIt-Anchor" href="#13-更改默认启动模式"></a> 1.3、更改默认启动模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取当前默认模式</span><br><span class="hljs-comment"># multi-user.target 相当于之前的更改运行级别为3，意思就是命令行。</span><br><span class="hljs-comment"># graphical.target 相当于之前的更改运行级别为5，意思就是图形界面</span><br>systemctl get-default<br><br><span class="hljs-comment"># 修改启动模式为图形界面，</span><br>systemctl set-default graphical.target <br><br><span class="hljs-comment"># 修改为命令行</span><br>systemctl set-default multi-user.target <br></code></pre></td></tr></table></figure><hr /><h3 id="14-禁用swap"><a class="markdownIt-Anchor" href="#14-禁用swap"></a> 1.4、禁用swap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行如下命令，关闭所有swap分区：</span><br>swapoff -a<br><br><span class="hljs-comment"># 检查sysctl.conf文件，添加swap权重限制</span><br><span class="hljs-built_in">cat</span> /etc/sysctl.conf |grep swappiness<br><br><span class="hljs-comment"># 如无输出，root用户执行</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;vm.swappiness=0&quot;</span> &gt;&gt; /etc/sysctl.conf<br><br><span class="hljs-comment"># 如无输出，普通用户执行</span><br><span class="hljs-built_in">sudo</span> sh -c <span class="hljs-string">&quot;echo &quot;</span>vm.swappiness=0<span class="hljs-string">&quot; &gt;&gt; /etc/sysctl.conf&quot;</span><br><br><span class="hljs-comment"># 刷新stsctl文件</span><br>sysctl -p<br></code></pre></td></tr></table></figure><hr /><h3 id="15-定时任务"><a class="markdownIt-Anchor" href="#15-定时任务"></a> 1.5、定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看定时任务是否启动 </span><br>service crond status<br><br><span class="hljs-comment"># 强杀干扰crond任务启动的所有进程</span><br>pkill cron<br><br><span class="hljs-comment"># 再执行命令：</span><br>service crond start<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/han20180705/p/9638992.html">https://www.cnblogs.com/han20180705/p/9638992.html</a></p><h3 id="16-时间校准"><a class="markdownIt-Anchor" href="#16-时间校准"></a> 1.6、时间校准</h3><p>1)、服务器可以通外网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装NTP同步工具</span><br>yum -y install ntpdate<br><span class="hljs-comment"># 手动同步一次时间</span><br><span class="hljs-comment"># 中国科学院国家授时中心NTP授时服务器地址： ntp.ntsc.ac.cn</span><br>ntpdate ntp.ntsc.ac.cn &amp;&amp; clock -w<br><br><span class="hljs-comment"># 录入定时任务，实现自动同步</span><br>crontab -e<br><span class="hljs-comment"># 定时每天2点同步时间</span><br>0 2 * * * ntpdate ntp.ntsc.ac.cn &amp;&amp; clock -w<br></code></pre></td></tr></table></figure><p>2)、服务器不通外网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 手动设置时间并写入时钟</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;2021-08-05 10:52:40&quot;</span> &amp;&amp; clock -w<br></code></pre></td></tr></table></figure><h3 id="17-修改允许打开的最大文件数"><a class="markdownIt-Anchor" href="#17-修改允许打开的最大文件数"></a> 1.7、修改允许打开的最大文件数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/security/limits.conf <br><span class="hljs-comment"># 所有用户允许打开的文件数量最大为65535</span><br>* soft nofile 65536<br>* hard nofile 65536<br><span class="hljs-comment"># 也可以把 * 换成指定的用户</span><br></code></pre></td></tr></table></figure><hr /><h2 id="二-使用和操作技巧"><a class="markdownIt-Anchor" href="#二-使用和操作技巧"></a> 二、使用和操作技巧</h2><h3 id="21-解压和压缩"><a class="markdownIt-Anchor" href="#21-解压和压缩"></a> 2.1、解压和压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将目录里所有jpg文件打包并且将其用gzip压缩，生成命名为jpg.tar.gz的压缩包</span><br>tar –zcvf jpg.tar.gz *.jpg <br><br><span class="hljs-comment"># 解压tar.gz</span><br>tar -zxvf file.tar.gz <br></code></pre></td></tr></table></figure><hr /><h3 id="22-查看目录下文件数量"><a class="markdownIt-Anchor" href="#22-查看目录下文件数量"></a> 2.2、查看目录下文件数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 统计当前文件夹下文件的个数，不包含子文件夹</span><br><span class="hljs-built_in">ls</span> -l |grep <span class="hljs-string">&quot;^-&quot;</span>|<span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 在默认的情况下，wc将计算指定文件的行数、字数，以及字节数。</span><br><span class="hljs-built_in">wc</span> testfile <br>3 92 598 testfile <span class="hljs-comment"># testfile文件的行数为3、单词数92、字节数598</span><br></code></pre></td></tr></table></figure><hr /><h3 id="23-nginx日志切割"><a class="markdownIt-Anchor" href="#23-nginx日志切割"></a> 2.3、nginx日志切割</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#日志路径</span><br>log_path=/data/nginx/log<br>log_bak=/data/nginx/logbak<br><span class="hljs-comment">#PID路径</span><br>pid_path=/run/nginx.pid<br><span class="hljs-comment">#昨天日期</span><br>YesterDay=$(<span class="hljs-built_in">date</span> `+%Y-%m-%d`)<br><span class="hljs-comment">#今天日期</span><br>today=$(<span class="hljs-built_in">date</span> `+%Y-%m-%d`)<br><span class="hljs-comment">#生成昨天的日志文件</span><br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$&#123;log_path&#125;</span>/wxds1.towngasvcc.com.access.log <span class="hljs-variable">$&#123;log_bak&#125;</span>/wxds1.towngasvcc.com.access.log_<span class="hljs-variable">$&#123;YesterDay&#125;</span>.<span class="hljs-built_in">log</span><br><span class="hljs-comment"># 向 Nginx 主进程发送 USR1 信号。USR1 信号是重新打开日志文件</span><br><span class="hljs-built_in">kill</span> -USR1 `<span class="hljs-built_in">cat</span> <span class="hljs-variable">$&#123;pid_path&#125;</span>`<br></code></pre></td></tr></table></figure><hr /><h3 id="24-find命令技巧"><a class="markdownIt-Anchor" href="#24-find命令技巧"></a> 2.4、Find命令技巧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出当前目录下符合条件的文件名</span><br>find -name <span class="hljs-string">&#x27;tcis3.201912*&#x27;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">basename</span> &#123;&#125; \;<br><br><span class="hljs-comment"># 找到当前目录下指定开头的文件，并全部使用gzip解压</span><br>find -maxdepth 1 -name <span class="hljs-string">&quot;trans*&quot;</span> | xargs -i gzip -d &#123;&#125;<br><br><span class="hljs-comment"># 找到目录下日志大于当前30天的文件并删除</span><br><span class="hljs-comment"># 替换 username</span><br>find /home/&#123;username&#125;/wwyt/db_backfiles -mtime +30 -name <span class="hljs-string">&quot;*.sql&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; ;<br></code></pre></td></tr></table></figure><hr /><h3 id="25-dos文件转unix"><a class="markdownIt-Anchor" href="#25-dos文件转unix"></a> 2.5、dos文件转unix</h3><p>vi进入文件后，使用 <code>set ff?</code>查看当前文件格式。用<code>set ff=unix</code> 来修改为linux可读取格式</p><hr /><h3 id="26-查询硬件信息"><a class="markdownIt-Anchor" href="#26-查询硬件信息"></a> 2.6、查询硬件信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询线程：</span><br>grep <span class="hljs-string">&#x27;processor&#x27;</span> /proc/cpuinfo | <span class="hljs-built_in">sort</span> -u | <span class="hljs-built_in">wc</span> -l<br><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;processor&quot;</span> |<span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 查询核数</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;cores&quot;</span>|<span class="hljs-built_in">uniq</span><br><br><span class="hljs-comment"># cpu详细信息</span><br>lscpu<br><br><span class="hljs-comment"># 硬盘信息</span><br>lsscsi<br><span class="hljs-comment"># 如不存在该命令，需安装</span><br>yum -y install lsscsi<br><br><span class="hljs-comment"># 磁盘层级信息</span><br>lsblk<br><br><span class="hljs-comment"># 打印硬盘信息</span><br><span class="hljs-built_in">sudo</span> fdisk -l<br><br><span class="hljs-comment"># 打印硬盘详细信息</span><br><span class="hljs-built_in">sudo</span> lshw -class disk<br><span class="hljs-comment"># 如不存在该命令，需安装</span><br>yum -y install lshw<br><br><span class="hljs-comment"># 固态机械盘判定  （返回值0即为SSD；返回1即为HDD）</span><br><span class="hljs-built_in">cat</span> /sys/block/ 盘名 /queue/rotational<br></code></pre></td></tr></table></figure><hr /><h3 id="27-磁盘读写性能测试"><a class="markdownIt-Anchor" href="#27-磁盘读写性能测试"></a> 2.7、磁盘读写性能测试</h3><details><p><strong><summary> 脚本内容 </summary></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys, os, time, random<br><br><span class="hljs-comment">#--------------------------------------------------------------------------------------------------</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BytesString</span>(<span class="hljs-params">n</span>):<br>    suffixes = [<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;KB&#x27;</span>,<span class="hljs-string">&#x27;MB&#x27;</span>,<span class="hljs-string">&#x27;GB&#x27;</span>,<span class="hljs-string">&#x27;TB&#x27;</span>,<span class="hljs-string">&#x27;PB&#x27;</span>,<span class="hljs-string">&#x27;EB&#x27;</span>,<span class="hljs-string">&#x27;ZB&#x27;</span>,<span class="hljs-string">&#x27;YB&#x27;</span>]<br>    suffix = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> n % <span class="hljs-number">1024</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> suffix+<span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(suffixes):<br>        suffix += <span class="hljs-number">1</span><br>        n /= <span class="hljs-number">1024</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;0&#125;&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(n, suffixes[suffix])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BytesInt</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(c <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0123456789&#x27;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(s)<br>    suffixes = [<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;KB&#x27;</span>,<span class="hljs-string">&#x27;MB&#x27;</span>,<span class="hljs-string">&#x27;GB&#x27;</span>,<span class="hljs-string">&#x27;TB&#x27;</span>,<span class="hljs-string">&#x27;PB&#x27;</span>,<span class="hljs-string">&#x27;EB&#x27;</span>,<span class="hljs-string">&#x27;ZB&#x27;</span>,<span class="hljs-string">&#x27;YB&#x27;</span>]<br>    <span class="hljs-keyword">for</span> power,suffix <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(suffixes))):<br>        <span class="hljs-keyword">if</span> s.endswith(suffix):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(s.rstrip(suffix))*<span class="hljs-number">1024</span>**power<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;BytesInt requires proper suffix (&#x27;</span>+<span class="hljs-string">&#x27; &#x27;</span>.join(suffixes)+<span class="hljs-string">&#x27;).&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BytesStringFloat</span>(<span class="hljs-params">n</span>):<br>    x = <span class="hljs-built_in">float</span>(n)<br>    suffixes = [<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;KB&#x27;</span>,<span class="hljs-string">&#x27;MB&#x27;</span>,<span class="hljs-string">&#x27;GB&#x27;</span>,<span class="hljs-string">&#x27;TB&#x27;</span>,<span class="hljs-string">&#x27;PB&#x27;</span>,<span class="hljs-string">&#x27;EB&#x27;</span>,<span class="hljs-string">&#x27;ZB&#x27;</span>,<span class="hljs-string">&#x27;YB&#x27;</span>]<br>    suffix = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x &gt; <span class="hljs-number">1024.0</span> <span class="hljs-keyword">and</span> suffix+<span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(suffixes):<br>        suffix += <span class="hljs-number">1</span><br>        x /= <span class="hljs-number">1024.0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;0:0.2f&#125;&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, suffixes[suffix])<br><br><br><span class="hljs-comment">#--------------------------------------------------------------------------------------------------</span><br><br>disk = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/dev/dm-2&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>disk.seek(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br>disksize = disk.tell()<br>os.system(<span class="hljs-string">&#x27;echo noop | sudo tee /sys/block/sdb/queue/scheduler &gt; /dev/null&#x27;</span>)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Syntax: progam [-s -sr -t -tr] [-v]:  to run specific modes; for verbose mode.&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Disk name: &#123;0&#125;  Disk size: &#123;1&#125;  Scheduler disabled.&#x27;</span>.<span class="hljs-built_in">format</span>(<br>    disk.name, BytesStringFloat(disksize))<br><br>displaytimes = <span class="hljs-string">&#x27;-v&#x27;</span> <span class="hljs-keyword">in</span> sys.argv<br><br><br><span class="hljs-comment">#--------------------------------------------------------------------------------------------------</span><br><br>bufsize = <span class="hljs-number">512</span><br>bufcount = <span class="hljs-number">100</span><br>displaysamplecount = <span class="hljs-number">24</span><br><br><span class="hljs-keyword">for</span> randomareas <span class="hljs-keyword">in</span> [<span class="hljs-literal">False</span>,<span class="hljs-literal">True</span>]:<br>    <span class="hljs-built_in">print</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Measuring: Random seek time &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        <span class="hljs-string">&#x27;using random areas of disk.&#x27;</span> <span class="hljs-keyword">if</span> randomareas <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;using beginning of disk.&#x27;</span>)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Samples: &#123;0&#125;&#123;1&#125;   Sample size: &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        bufcount, <span class="hljs-string">&#x27; (displayed &#123;0&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(displaysamplecount) <span class="hljs-keyword">if</span> displaytimes <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>, bufsize)<br><br>    <span class="hljs-keyword">for</span> area <span class="hljs-keyword">in</span> [BytesInt(<span class="hljs-string">&#x27;1MB&#x27;</span>)*<span class="hljs-number">2</span>**i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">64</span>)]+[disksize]:<br>        <span class="hljs-keyword">if</span> area &gt; disksize:<br>            <span class="hljs-keyword">continue</span><br><br>        os.system(<span class="hljs-string">&#x27;echo 3 | sudo tee /proc/sys/vm/drop_caches &gt; /dev/null&#x27;</span>)<br><br>        times = []<br>        disk.seek(<span class="hljs-number">0</span>)<br>        disk.read(bufsize)<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bufcount):<br>            left = random.randint(<span class="hljs-number">0</span>, disksize-area) <span class="hljs-keyword">if</span> randomareas <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            right = left + random.randint(<span class="hljs-number">0</span>, area)<br>            disk.seek(left)<br>            disk.read(bufsize)<br>            start = time.time()<br>            disk.seek(right)<br>            disk.read(bufsize)<br>            finish = time.time()<br>            times.append(finish-start)<br><br>        times = <span class="hljs-built_in">sorted</span>(times)[:bufcount*<span class="hljs-number">95</span>/<span class="hljs-number">100</span>]<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Area tested: &#123;0:6&#125;   Average: &#123;1:5.2f&#125; ms   Max: &#123;2:5.2f&#125; ms   Total: &#123;3:0.2f&#125; sec&#x27;</span>.<span class="hljs-built_in">format</span>(<br>            BytesString(area) <span class="hljs-keyword">if</span> area &lt; disksize <span class="hljs-keyword">else</span> BytesStringFloat(area),<br>            <span class="hljs-built_in">sum</span>(times)/<span class="hljs-built_in">len</span>(times)*<span class="hljs-number">1000</span>, <span class="hljs-built_in">max</span>(times)*<span class="hljs-number">1000</span>, <span class="hljs-built_in">sum</span>(times))<br>        <span class="hljs-keyword">if</span> displaytimes:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Read times: &#123;0&#125; ... &#123;1&#125; ms&#x27;</span>.<span class="hljs-built_in">format</span>(<br>                <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-string">&#x27;&#123;0:0.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x*<span class="hljs-number">1000</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> times[:displaysamplecount/<span class="hljs-number">2</span>]]),<br>                <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-string">&#x27;&#123;0:0.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x*<span class="hljs-number">1000</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> times[-displaysamplecount/<span class="hljs-number">2</span>:]]))<br></code></pre></td></tr></table></figure></details><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> python iotestlinux.py<br></code></pre></td></tr></table></figure><hr /><h3 id="28-查看监听的端口"><a class="markdownIt-Anchor" href="#28-查看监听的端口"></a> 2.8、查看监听的端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -lnpt<br>iptables -L -n<br></code></pre></td></tr></table></figure><hr /><h3 id="29-查看服务器网卡流量"><a class="markdownIt-Anchor" href="#29-查看服务器网卡流量"></a> 2.9、查看服务器网卡流量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>yum install -y sysstat<br><br><span class="hljs-comment"># 1秒提取一次网络数据 共提取两次数据。</span><br>sar -n DEV 1 2<br><br></code></pre></td></tr></table></figure><hr /><h3 id="210-查看连接进程流量"><a class="markdownIt-Anchor" href="#210-查看连接进程流量"></a> 2.10、查看连接/进程流量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ss 和 netstat 是查看活动链接/监听端口的常用命令。ss 是 netstat 的上位替代，性能更好</span><br>ss/netstat<br><br><span class="hljs-comment"># ss安装</span><br>yum install -y iproute<br><br><span class="hljs-comment"># netstat安装：</span><br>yum install -y net-tools<br><br><span class="hljs-comment"># iftop是一款实时流量监控工具，可以查看每个连接的实时速率。</span><br><span class="hljs-comment"># 安装命令</span><br>yum install -y epel-release &amp;&amp; yum install -y iftop <br><span class="hljs-comment"># 实时查看eth0网卡的各个连接和网速：</span><br>iftop -nN -i eth0<br><br><span class="hljs-comment"># nethogs是为了查看单个进程流量而设计的工具，按照进程进行带宽分组。</span><br><span class="hljs-comment"># 安装命令</span><br>yum install -y epel-release &amp;&amp; yum install -y nethogs<br><span class="hljs-comment"># 每2秒刷新流经eth0网卡的进程流量信息：</span><br>nethogs -d 2 eth0 <br></code></pre></td></tr></table></figure><hr /><h3 id="211-清理缓存"><a class="markdownIt-Anchor" href="#211-清理缓存"></a> 2.11、清理缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 非root用户执行</span><br><span class="hljs-built_in">sync</span><br><span class="hljs-built_in">sudo</span> sh -c <span class="hljs-string">&quot;echo 3 &gt; /proc/sys/vm/drop_caches&quot;</span> <br><br><span class="hljs-comment"># 也可以写成下面的脚本放到服务器里</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">sync</span><br><span class="hljs-built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches<br><br><span class="hljs-comment"># 添加定时任务</span><br>*/10 * * * * clean_free.sh<br><br><span class="hljs-comment"># 保存定时任务并重启</span><br>service crond restart <br></code></pre></td></tr></table></figure><hr /><h3 id="212-磁盘挂载"><a class="markdownIt-Anchor" href="#212-磁盘挂载"></a> 2.12、磁盘挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查磁盘</span><br>fdisk -l<br><br><span class="hljs-comment"># 找到需要处理的磁盘，例如 /dev/sda 格式化</span><br>mkfs.ext4 /dev/sda<br><br><span class="hljs-comment"># 创建挂载点</span><br><span class="hljs-built_in">mkdir</span> /data<br><br><span class="hljs-comment"># 挂载磁盘到挂载点</span><br>mount /dev/sda /data/<br><br><span class="hljs-comment"># 修改fstab任务，让系统启动时就自动挂载，防止重启后磁盘未挂载</span><br>vi /etc/fstab<br>/dev/sda /data ext4 defaults 0 0 <span class="hljs-comment"># 系统启动时自动挂载</span><br><br><span class="hljs-comment"># 赋予用户账户使用权限，任选一个就行</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R user:user /data <span class="hljs-comment"># 把挂载点改为指定用户的权限</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> -R 775 /data <span class="hljs-comment"># 挂载点服务器全部用户都可以使用的权限。</span><br><br><span class="hljs-comment"># 设置开机时自动赋予权限</span><br>vi /etc/rc.local<br><br><span class="hljs-built_in">chown</span> -R user:user /data<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> -R 775 /data<br><br><span class="hljs-comment"># 设置软连接（如需要）</span><br><span class="hljs-comment"># 进入到你需要设置软连接的目录下</span><br><span class="hljs-built_in">ln</span> -s /data/xxx 放软连接的目录<br></code></pre></td></tr></table></figure><h3 id="213-系统性能监控工具"><a class="markdownIt-Anchor" href="#213-系统性能监控工具"></a> 2.13、系统性能监控工具</h3><p><a href="nmon-16g-3.el7.x86_64.rpm">点击此处下载文件</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载文件，然后上传到服务器目录，执行</span><br><span class="hljs-built_in">sudo</span> rpm -ivh nmon-16g-3.el7.x86_64.rpm<br><br><span class="hljs-comment"># 进入交互页面，按提示按下快捷键，进入具体的硬件性能监控</span><br>nmon<br></code></pre></td></tr></table></figure><h3 id="214-网络测速"><a class="markdownIt-Anchor" href="#214-网络测速"></a> 2.14、网络测速</h3><p><a href="speedtest.py">点击此处下载文件</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载文件，然后上传到服务器目录，授予权限</span><br><span class="hljs-built_in">chmod</span> 775 speedtest.py<br><span class="hljs-comment"># 执行,等待结果</span><br>./speedtest.py<br><br></code></pre></td></tr></table></figure><h3 id="215-sed命令替换指定内容"><a class="markdownIt-Anchor" href="#215-sed命令替换指定内容"></a> 2.15、sed命令替换指定内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将新字符串替换旧字符串</span><br>sed -i <span class="hljs-string">&#x27;s/ 旧字符串 / 新字符串 /g&#x27;</span> file1 file2 file3 <br><br></code></pre></td></tr></table></figure><h3 id="216-scp文件传输"><a class="markdownIt-Anchor" href="#216-scp文件传输"></a> 2.16、SCP文件传输</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp [options] [<span class="hljs-built_in">source</span>] [user@]destination<br><span class="hljs-comment"># [options]：是可选参数，比如-r用于递归复制目录，-p用于保留文件属性。</span><br><span class="hljs-comment"># [source]：指定要复制的源文件或目录的路径。</span><br><span class="hljs-comment"># [user@]destination：远程系统的用户名和IP地址（或者主机名），以及目的文件或目录的路径。</span><br><span class="hljs-comment"># 例如 ：</span><br>scp file.txt remote_user@10.0.109.19:/home/remote_user/<br><span class="hljs-comment"># 如果需要指定目标文件的名称，可以在远程路径后面加上文件名</span><br>scp file.txt remote_user@10.0.109.19:/home/remote_user/file.txt<br><br><span class="hljs-comment"># 如果想要保留文件的基本属性（如修改时间、访问时间等），可以使用-p选项；</span><br><span class="hljs-comment"># 如果需要递归复制整个目录及其子目录和文件，则应使用-r选项</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>命令配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB常用命令</title>
    <link href="/waterbottle/posts/c08448a5/"/>
    <url>/waterbottle/posts/c08448a5/</url>
    
    <content type="html"><![CDATA[<p>MongoDB常用命令和操作方案</p><span id="more"></span><h2 id="重启和启动"><a class="markdownIt-Anchor" href="#重启和启动"></a> 重启和启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭命令</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;path to&quot;</span>/mongodb/bin/<br>./mongod --dbpath=**** --shutdown<br><br><span class="hljs-comment"># 启动命令</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;path to&quot;</span>/mongodb/bin/<br>./mongod -f mongodb.conf<br></code></pre></td></tr></table></figure><h2 id="运行内存使用限制"><a class="markdownIt-Anchor" href="#运行内存使用限制"></a> 运行内存使用限制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi mongodb.conf<br><span class="hljs-comment"># 添加然后重启生效</span><br>wiredTigerCacheSizeGB=2<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MongoDB</category>
      
      <category>常用命令</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx技巧</title>
    <link href="/waterbottle/posts/aca97dde/"/>
    <url>/waterbottle/posts/aca97dde/</url>
    
    <content type="html"><![CDATA[<p>文章引言<br />简单汇总 Nginx 使用中常见操作和机技巧</p><span id="more"></span><h2 id="替换https证书"><a class="markdownIt-Anchor" href="#替换https证书"></a> 替换https证书</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx">第一步，进入 <span class="hljs-attribute">nginx</span> 安装目录下，找到conf/cert目录，将新的证书文件，key和pem上传上去。<br><br>第二步，grep -r -l <span class="hljs-string">&quot;旧证书名&quot;</span>，搜索conf目录下配置了证书的配置文件。然后将里面的名称替换为新的证书名称<br><br>第三步，nginx -t，测试配置文件是否正确。nginx -s reload 热重启nginx<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库常用技巧</title>
    <link href="/waterbottle/posts/b2e78535/"/>
    <url>/waterbottle/posts/b2e78535/</url>
    
    <content type="html"><![CDATA[<p>Mysql使用过程中常见配置和SQL使用技巧</p><span id="more"></span><h2 id="一-配置类"><a class="markdownIt-Anchor" href="#一-配置类"></a> 一、配置类</h2><h3 id="11-修改连接数"><a class="markdownIt-Anchor" href="#11-修改连接数"></a> 1.1、修改连接数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># my.cnf中添加配置项</span><br><span class="hljs-comment"># 最大连接数</span><br>max_connections=1000<br></code></pre></td></tr></table></figure><hr /><h3 id="12-只读模式强制启动"><a class="markdownIt-Anchor" href="#12-只读模式强制启动"></a> 1.2、只读模式强制启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># my.cnf 添加</span><br>innodb_force_recovery = 6<br></code></pre></td></tr></table></figure><hr /><h3 id="13-表名大小写区分"><a class="markdownIt-Anchor" href="#13-表名大小写区分"></a> 1.3、表名大小写区分</h3><p>配置方法一：数据内修改配置变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看 lower_case_table_names 变量的值</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;lower_case_table_names&#x27;</span>;<br><br><span class="hljs-comment">-- 设置 lower_case_table_names 变量的值为 1（需要重启 MySQL 服务）</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> lower_case_table_names <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>配置方法二：my.cnf中添加配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在【mysqld】下增加lower_case_table_names=1</span><br>lower_case_table_names=1<br></code></pre></td></tr></table></figure><hr /><h3 id="14-开启通用日志"><a class="markdownIt-Anchor" href="#14-开启通用日志"></a> 1.4、开启通用日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在my.cnf文件中的`[mysqld]`模块下添加添加</span><br><span class="hljs-comment"># 设置日志使用系统时间</span><br>log_timestamps = SYSTEM <br>general_log = 1<br>general_log_file = /var/log/mysql/mysql.log<br></code></pre></td></tr></table></figure><hr /><h3 id="15-解除用户访问限制"><a class="markdownIt-Anchor" href="#15-解除用户访问限制"></a> 1.5、解除用户访问限制</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `mysql`.`<span class="hljs-keyword">user</span>` <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-comment">-- 如果不是全权限或者指定IP，看情况执行下面的SQL</span><br><span class="hljs-keyword">update</span> `mysql`.`<span class="hljs-keyword">user</span>` <span class="hljs-keyword">set</span> host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-comment">-- 最后执行，刷新</span><br>flush privileges<br></code></pre></td></tr></table></figure><hr /><h3 id="16-释放数据库连接"><a class="markdownIt-Anchor" href="#16-释放数据库连接"></a> 1.6、释放数据库连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 30分钟无请求则释放连接，默认值为28800即8个小时。</span><br>wait_timeout=1800<br></code></pre></td></tr></table></figure><hr /><h3 id="17-提示数据库大量连接错误无法连接"><a class="markdownIt-Anchor" href="#17-提示数据库大量连接错误无法连接"></a> 1.7、提示数据库大量连接错误无法连接</h3><p>报错：<code>Host is blocked because of many connection errors;unblock with 'mysqladmin flush-hosts'</code><br />服务器连上数据库后，执行：<code>FLUSH HOSTS</code>;</p><hr /><h3 id="18-修改数据库缓冲池"><a class="markdownIt-Anchor" href="#18-修改数据库缓冲池"></a> 1.8、修改数据库缓冲池</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 调整为4G</span><br>innodb_buffer_pool_size = 4G<br></code></pre></td></tr></table></figure><h2 id="二-增删改查sql"><a class="markdownIt-Anchor" href="#二-增删改查sql"></a> 二、增删改查SQL</h2><h3 id="21-查询数据库内表数据大小"><a class="markdownIt-Anchor" href="#21-查询数据库内表数据大小"></a> 2.1、查询数据库内表数据大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询数据库表行数</span><br><span class="hljs-keyword">SELECT</span> TABLE_NAME,TABLE_ROWS <span class="hljs-keyword">FROM</span> information_schema.`TABLES`<br><span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> database()) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> TABLE_ROWS <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><hr /><h3 id="22-创建存储事务存储过程"><a class="markdownIt-Anchor" href="#22-创建存储事务存储过程"></a> 2.2、创建存储事务(存储过程)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> WhileLoopExample()<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">DECLARE</span> counter <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>;<br>  WHILE counter <span class="hljs-operator">&lt;=</span> <span class="hljs-number">5</span> DO<br>    <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span>device_config_history <span class="hljs-keyword">WHERE</span>create_time <span class="hljs-operator">&lt;=</span> &quot;2023-06-04 00:00:00&quot; LIMIT <span class="hljs-number">5000</span>;<br>    <span class="hljs-keyword">SET</span> counter <span class="hljs-operator">=</span> counter <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">END</span> WHILE;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br></code></pre></td></tr></table></figure><hr /><h3 id="23-表字段增删改"><a class="markdownIt-Anchor" href="#23-表字段增删改"></a> 2.3、表字段增删改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 增</span><br><span class="hljs-keyword">ALTER TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> column_name <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;备注&#x27;</span>;<br><span class="hljs-comment">-- 删</span><br><br><span class="hljs-comment">-- 改</span><br><br><br></code></pre></td></tr></table></figure><hr /><h3 id="24-筛选重复字段"><a class="markdownIt-Anchor" href="#24-筛选重复字段"></a> 2.4、筛选重复字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>,<span class="hljs-built_in">count</span>(pkid) <span class="hljs-keyword">from</span> t_temp_meter_YH0105_copy <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> pkid <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(pkid)<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr /><h3 id="25-筛选字段大于指定长度的结果"><a class="markdownIt-Anchor" href="#25-筛选字段大于指定长度的结果"></a> 2.5、筛选字段大于指定长度的结果</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_temp_gas_user_YH0105_copy <span class="hljs-keyword">where</span> length(usertype)<span class="hljs-operator">&gt;</span><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><hr /><h3 id="26-按指定规则排序"><a class="markdownIt-Anchor" href="#26-按指定规则排序"></a> 2.6、按指定规则排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 指定规则，如1&gt;3&gt;2&gt;0，order by后使用FIELD来指定所需字段的排序规则</span><br><span class="hljs-keyword">SELECT</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> `user_status` <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIELD(`user_status`,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><hr /><h3 id="27-时间格式化"><a class="markdownIt-Anchor" href="#27-时间格式化"></a> 2.7、时间格式化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用函数DATE_FORMAT()</span><br>DATE_FORMAT(<span class="hljs-built_in">date</span>,<span class="hljs-string">&quot;format&quot;</span>)<br></code></pre></td></tr></table></figure><p>format参数的常用格式有</p><table><thead><tr><th>格式符</th><th>描述</th><th>格式符</th><th>描述</th></tr></thead><tbody><tr><td><code>%y</code></td><td>年，2 位</td><td><code>%Y</code></td><td>年，4 位</td></tr><tr><td><code>%m</code></td><td>月，数值(00-12)</td><td><code>%d</code></td><td>月的天，数值(00-31)</td></tr><tr><td><code>%H</code></td><td>小时 (00-23)</td><td><code>%h</code></td><td>小时 (01-12)</td></tr><tr><td><code>%i</code></td><td>分钟，数值(00-59)</td><td><code>%S</code></td><td>秒(00-59)</td></tr><tr><td><code>%T</code></td><td>时间， 24-小时 (hh:mm:ss)</td><td><code>%r</code></td><td>时间，12-小时（hh:mm:ss AM 或 PM）</td></tr></tbody></table><hr /><h3 id="28-sql执行时长检查慢查询"><a class="markdownIt-Anchor" href="#28-sql执行时长检查慢查询"></a> 2.8、SQL执行时长检查（慢查询）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 任选其一执行</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">FULL</span> PROCESSLIST;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> PROCESSLIST <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-type">time</span> <span class="hljs-keyword">DESC</span> limit <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">-- 找到执行时间过长导致慢查询的SQL的id。</span><br>kill id;<br></code></pre></td></tr></table></figure><hr /><h3 id="29-备份"><a class="markdownIt-Anchor" href="#29-备份"></a> 2.9、备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 &gt; 文件名.sql</span><br><span class="hljs-comment"># 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码</span><br>mysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql &gt; /data/backup/mysql.sql<br><span class="hljs-comment"># 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩</span><br>mysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip &gt; /data/backup/mysql.sql.gz<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ArkTS语言介绍</title>
    <link href="/waterbottle/posts/b501a5f5/"/>
    <url>/waterbottle/posts/b501a5f5/</url>
    
    <content type="html"><![CDATA[<p>ArkTS语言基础语法和介绍</p><span id="more"></span><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 被此装饰器装饰的组件，代表用作页面的默认入口组件。</span><br><span class="hljs-comment">// 加载页面时，将首先创建并呈现 @Entry 装饰自定义组件。</span><br><span class="hljs-meta">@Entry</span><br><span class="hljs-comment">// 表示自定义组件，用来装饰下面的 struct ListItemComponent</span><br><span class="hljs-meta">@Component</span> <br><span class="hljs-comment">// 被 @Component 装饰，代表一个自定义的结构体，是可重用的UI单元，可以和其他组件组合。</span><br><span class="hljs-comment">// export 关键字可以导出 ListItemComponent 组件</span><br><span class="hljs-comment">// 在其他地方调用时，须先使用 import 导入子组件。</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">ListItemComponent</span> &#123; <br>    <span class="hljs-comment">// 使用 @State 装饰的变量 isChange。</span><br>    <span class="hljs-comment">// 含义是当 isChange 发生变化时，会触发该变量所对应的自定义组件 ListItemComponent 的UI界面进行自动刷新</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-attr">isChange</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>; <br><span class="hljs-comment">// 上述结构为装饰器内容，装饰器主要是用来装饰类、结构、方法和变量，赋予其特殊的含义。</span><br><span class="hljs-comment">// UI描述：指 build 方法中的代码块，以声明式的方式描述该自定义组件 ListItemComponent 的UI结构</span><br>    <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 内置组件：系统提供的基础组件和容器组件，可以直接调用</span><br>        <span class="hljs-comment">// 内置组件 Row 指水平方向布局的容器组件</span><br>        <span class="hljs-title class_">Row</span>() &#123;<br>            <span class="hljs-comment">// 内置组件 Text 文本组件，用来展示文件。</span><br>            <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>              <span class="hljs-comment">// 属性方法：设置组件属性，使用 “.” 运算符来进行链接</span><br>              .<span class="hljs-title function_">width</span>(<span class="hljs-title class_">ItemStyle</span>.<span class="hljs-property">LAYOUT_WEIGHT_CENTER</span>)<br>              .<span class="hljs-title function_">fontSize</span>(<span class="hljs-title class_">FontSize</span>.<span class="hljs-property">MIDDLE</span>)<br>            <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vote</span>)<br>              <span class="hljs-comment">// 属性方法：设置组件属性，使用 “.” 运算符来进行链接</span><br>              .<span class="hljs-title function_">width</span>(<span class="hljs-title class_">ItemStyle</span>.<span class="hljs-property">LAYOUT_WEIGHT_CENTER</span>)<br>              .<span class="hljs-title function_">fontSize</span>(<span class="hljs-title class_">FontSize</span>.<span class="hljs-property">SMALL</span>)<br>            ...<br>        &#125;<br>    &#125;<br>    .<span class="hljs-title function_">height</span>(<span class="hljs-title class_">ItemStyle</span>.<span class="hljs-property">BAR_HEIGHT</span>)<br>    .<span class="hljs-title function_">width</span>(<span class="hljs-variable constant_">WEIGHT</span>)<br>    <span class="hljs-comment">// 事件方法：设置组件对事件的响应逻辑</span><br>    <span class="hljs-comment">// 此为 Row 组件的 onClick 方法，点击组件可以触发该方法的调用，并在其中进行响应处理。</span><br>    .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isChange</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isChange</span>;<br>    &#125;)<br>&#125;<br>...<br></code></pre></td></tr></table></figure><h2 id="自定义组件生命周期回调函数"><a class="markdownIt-Anchor" href="#自定义组件生命周期回调函数"></a> 自定义组件生命周期回调函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 生命周期回调函数用于通知开发者组件所属的生命周期阶段</span><br><span class="hljs-comment">// 这两个函数是私有的，系统会在合适的时间自动调用，是无法手动调用这些函数的</span><br><br>aboutToAppear<br>在创建自定义组件实例后，到执行其 build 函数前执行。<br>可以在该函数中对 <span class="hljs-variable constant_">UI</span> 需要展示的数据进行初始化，或申请定时器资源等。<br>便于在 build 函数中使用这些数据展示。<br><br>aboutToDisappear<br>自定义组件实例被销毁时调用，可以在其中释放不再使用的资源，避免资源泄露。<br>比如释放 aboutToAppear 中申请的定时器。<br><br><br></code></pre></td></tr></table></figure><h2 id="entry-修饰的页面入口组件生命周期回调函数"><a class="markdownIt-Anchor" href="#entry-修饰的页面入口组件生命周期回调函数"></a> @Entry 修饰的页面入口组件生命周期回调函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>ArkTS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7 常用工具和软件包</title>
    <link href="/waterbottle/posts/2199b204/"/>
    <url>/waterbottle/posts/2199b204/</url>
    
    <content type="html"><![CDATA[<p>CentOS 系统常用于作为服务器，因此多数情况下都需要使用 SSH 方式连接，本文主要介绍常用的 SSH 连接服务器的工具和服务器内一些好用的软件包。</p><span id="more"></span><h2 id="一-常用工具"><a class="markdownIt-Anchor" href="#一-常用工具"></a> 一、常用工具</h2><h3 id="11-windterm"><a class="markdownIt-Anchor" href="#11-windterm"></a> 1.1、WindTerm</h3><p>一款完全开源，免费，轻量级的工具<br />优点：<br />1、支持本地 CMD 和 PowerShell 命令使用。<br />2、可以远程 SSH 连接服务器进行操作。<br />3、内置了文件上传下载功能。<br />4、够轻量化，启动速度够快。<br />5、命令操作提示和补全</p><p>缺点：截至2.5版本<br />1、文件上传下载需要服务器上装有 rzsz 组件包。（勉强算一个缺点吧。）<br />2、出现部分服务器密码循环校验错误的情况，使用其他 SSH 登录器可以正常登录。(解决办法是 SSH 密码校验中，关闭除密码外的所有选项)<br />3、无法直接从 XShell 中导入已有连接</p><p><a href="https://github.com/kingToolbox/WindTerm/releases">下载地址</a></p><p>作者有自己的博客用来介绍软件详细情况，具体可以看这个<a href="https://kingtoolbox.github.io/">传送门</a></p><h2 id="二-常用软件包"><a class="markdownIt-Anchor" href="#二-常用软件包"></a> 二、常用软件包</h2><h3 id="21-上传下载"><a class="markdownIt-Anchor" href="#21-上传下载"></a> 2.1、上传下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># CentOS 系统里，不依赖第三方软件的话，上传下载主要使用 rz 和 sz 命令</span><br><span class="hljs-comment"># 但是命令需要额外安装。</span><br><span class="hljs-comment"># 安装完成后可以使用help命令查看具体用法</span><br>yum -y install lrzsz<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>常用工具和软件包</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python小技巧</title>
    <link href="/waterbottle/posts/76683f9/"/>
    <url>/waterbottle/posts/76683f9/</url>
    
    <content type="html"><![CDATA[<h2 id="配置国内pip源"><a class="markdownIt-Anchor" href="#配置国内pip源"></a> 配置国内pip源</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 阿里云源:https://mirrors.aliyun.com/pypi/simple/</span><br><span class="hljs-comment"># 中科大:https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="hljs-comment"># 清华大学:https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><br><span class="hljs-comment"># 命令换源，最后的 URL 直接替换为上面的链接就行</span><br>pip config <span class="hljs-built_in">set</span> <span class="hljs-keyword">global</span>.index-url https://pypi.mirrors.ustc.edu.cn/simple<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python小技巧</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux小练习</title>
    <link href="/waterbottle/posts/9e9006f1/"/>
    <url>/waterbottle/posts/9e9006f1/</url>
    
    <content type="html"><![CDATA[<p>问题难度不分先后，实现答案<strong>不唯一</strong>。一个题不会可以先跳去另一个。有思路可以不急着看答案，先百度找找资料尝试一下。如果思路也没有，百度也不会，那建议对着答案和注释找AI一点点分析为毛这么做。</p><span id="more"></span><h2 id="第一题-tcp链接和进程可打开文件数的检测与配置"><a class="markdownIt-Anchor" href="#第一题-tcp链接和进程可打开文件数的检测与配置"></a> 第一题 TCP链接和进程可打开文件数的检测与配置。</h2><p>请写出一个脚本<br />1、可以判断系统是否已配置可将 TIME-WAIT 状态下的 TCP 重新用于新的 TCP 连接。<br />2、可以判断系统是否已配置单个进程最大可打开文件数为204800。<br />3、如系统无相关配置，则该脚本需要按上述要求配置。<br />4、如系统有相关配置但未启用，则该脚本需要将配置修改为允许。<br />5、设置后需要即时生效</p><details><summary> 答案 </summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># TCP连接复用</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">cat</span> /etc/sysctl.conf | grep <span class="hljs-string">&quot;net.ipv4.tcp_tw_reuse&quot;</span> ; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/sysctl.conf</span><br><span class="hljs-string">net.ipv4.tcp_tw_reuse = 1</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">else</span> <br>sed -i <span class="hljs-string">&#x27;/net.ipv4.tcp_tw_reuse/c\net.ipv4.tcp_tw_reuse = 1&#x27;</span> /etc/sysctl.conf <span class="hljs-comment">#调整</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已调整配置为 ： <span class="hljs-subst">$(cat /etc/sysctl.conf | grep <span class="hljs-string">&quot;net.ipv4.tcp_tw_reuse&quot;</span>)</span>&quot;</span> <span class="hljs-comment">#输出调整后的结果</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 单个进程最大文件打开数</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">cat</span> /etc/sysctl.conf | grep <span class="hljs-string">&quot;fs.file-max&quot;</span> ; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/sysctl.conf</span><br><span class="hljs-string">fs.file-max = 204800</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">else</span> <br>sed -i <span class="hljs-string">&#x27;fs.file-max/c\fs.file-max = 204800&#x27;</span> /etc/sysctl.conf <span class="hljs-comment">#调整</span><br>ehco <span class="hljs-string">&quot;已调整配置为 ： <span class="hljs-subst">$(cat /etc/sysctl.conf | grep <span class="hljs-string">&quot;fs.file-max&quot;</span>)</span>&quot;</span> <span class="hljs-comment">#输出调整后的结果</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 刷新内核配置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;重新加载内核文件....&quot;</span><br>/sbin/sysctl -p<br><br></code></pre></td></tr></table></figure></details><h2 id="第二题-tcp链接的检测与清理"><a class="markdownIt-Anchor" href="#第二题-tcp链接的检测与清理"></a> 第二题 tcp链接的检测与清理</h2><p>写出一个脚本<br />1、查询并输出出所有状态为 ESTABLISHED 的 ssh 连接<br />2、清理上述连接</p><details><summary> 答案 </summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 查询链接信息</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;查询链接信息.....&quot;</span><br>netstat -natp|awk <span class="hljs-string">&#x27;/ssh/&amp;&amp;/ESTABLISHED/&#x27;</span><br><br><span class="hljs-comment"># 清理连接 </span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------------------&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;查询完毕，开始清理。。。&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------------------&quot;</span><br><br>netstat -natp|awk <span class="hljs-string">&#x27;/ssh/&amp;&amp;/ESTABLISHED/ &#123;print $7&#125;&#x27;</span>|awk -F <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>|xargs <span class="hljs-built_in">kill</span><br><br><span class="hljs-comment"># 验证</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------------------&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;清理完毕，请确认剩余连接信息:&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------------------&quot;</span><br>netstat -natp|awk <span class="hljs-string">&#x27;/ssh/&amp;&amp;/ESTABLISHED/&#x27;</span><br></code></pre></td></tr></table></figure></details><h2 id="第三题-文件的移动"><a class="markdownIt-Anchor" href="#第三题-文件的移动"></a> 第三题 文件的移动</h2><p>解压 root 目录下的 log.tar.gz 文件至 opt 目录下</p><details><summary> 答案 </summary><p><code>tar -zxvf /root/log.tar.gz -C /opt/</code></p></details><h2 id="第四题-文件内容的快速替换"><a class="markdownIt-Anchor" href="#第四题-文件内容的快速替换"></a> 第四题 文件内容的快速替换</h2><p>将 opt 目录下的 log.tar.gz 解压出来的文件内，以 Listen 开头的所有内容替换为 Listen=12123</p><details><summary> 答案 </summary><p><code>sed -i 's/^Listen*/Listen=12123/g' log.log</code></p></details><h2 id="第五题-日志关键字的快速检索与输出"><a class="markdownIt-Anchor" href="#第五题-日志关键字的快速检索与输出"></a> 第五题 日志关键字的快速检索与输出</h2><p>从文件 info.log 中检索 logics 为关键字的日志，并将其内容输出到 log1.log 文件内</p><details><summary> 答案 </summary><p><code>cat info.log |grep logics &gt;&gt; log1.log</code></p></details><h2 id="第六题-监控脚本"><a class="markdownIt-Anchor" href="#第六题-监控脚本"></a> 第六题 监控脚本</h2><p>请写出一个脚本<br />1、该脚本监视名为 server 的服务进程<br />2、当服务掉线时，使用 /root/start.sh 脚本启动程序，并输出带有启动时间和服务重启的关键字至 monitor.log<br />3、如果服务在运行，输出包含当前时间和服务运行正常关键字的日志到 monitor.log</p><details><summary> 答案 </summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">flag=$(ps -ef|grep <span class="hljs-string">&quot;server&quot;</span>|grep -v <span class="hljs-string">&quot;grep&quot;</span>|<span class="hljs-built_in">wc</span> -l)<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$flag</span> == 0 ]<br>    <span class="hljs-keyword">then</span><br>        /root/start.sh <br>        ehco <span class="hljs-string">&quot;服务已重启，重启时间为：<span class="hljs-subst">$(date)</span>&quot;</span> &gt;&gt; /root/monitor.log<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;server 运行正常，检测时间：<span class="hljs-subst">$(date)</span> &quot;</span> &gt;&gt; /root/monitor.log<br>    <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></details><h2 id="第七题-nginx配置理解"><a class="markdownIt-Anchor" href="#第七题-nginx配置理解"></a> 第七题 Nginx配置理解</h2><p>请写出下面代码中四行内容分别代表什么配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># nginx配置</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>      <span class="hljs-number">80</span> ;<br>        <span class="hljs-attribute">server_name</span> rabbitmq-dingxuanwen.yovole.com;      <br>        <span class="hljs-section">location</span>  / &#123;       <br>        <span class="hljs-attribute">proxy_pass</span> http://paas.yovole.com:15672/; <br>        &#125;<br><br></code></pre></td></tr></table></figure><details><summary> 答案 </summary><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># nginx配置</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>      <span class="hljs-number">80</span> ;   <span class="hljs-comment">#监听端口</span><br>        <span class="hljs-attribute">server_name</span> rabbitmq-dingxuanwen.yovole.com;   <span class="hljs-comment">#监听地址       </span><br>        <span class="hljs-section">location</span>  / &#123;       <span class="hljs-comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br>        <span class="hljs-attribute">proxy_pass</span> http://paas.yovole.com:15672/;  <span class="hljs-comment">#请求转向定义的服务列表     </span><br>        &#125;<br></code></pre></td></tr></table></figure></details><h2 id="第八题-文件的复制"><a class="markdownIt-Anchor" href="#第八题-文件的复制"></a> 第八题 文件的复制</h2><p>将 /root/logs/ 下的所有文件，<strong>复制</strong>到 /home/ 下</p><details><summary> 答案 </summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /root/logs/* /home/<br></code></pre></td></tr></table></figure></details><h2 id="第九题-多个组件的检测与安装"><a class="markdownIt-Anchor" href="#第九题-多个组件的检测与安装"></a> 第九题 多个组件的检测与安装</h2><p>写出一个脚本<br />1、该脚本可以检测多个第三方库是否已安装<br />2、如果未安装该脚本需要将库安装完。</p><details><summary> 答案 </summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>Bakge=(dos2unix lrzsz telnet mailx net-tools vim)<br><br><span class="hljs-comment">#遍历包</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;Bakge[@]&#125;</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> rpm -qa | grep <span class="hljs-variable">$i</span>; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span><span class="hljs-string">&quot;<span class="hljs-variable">$i</span> 已安装无需重复安装&quot;</span><br>    <span class="hljs-keyword">else</span><br>        yum -y install <span class="hljs-variable">$i</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure></details><hr /><details><summary> 千万别点开 </summary><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">未完待续。。。。<br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Linux练习题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/waterbottle/posts/a1751c09/"/>
    <url>/waterbottle/posts/a1751c09/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo帮助手册</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>windows系统常用命令</title>
    <link href="/waterbottle/posts/89db17f7/"/>
    <url>/waterbottle/posts/89db17f7/</url>
    
    <content type="html"><![CDATA[<h2 id="如何开启win10远程桌面"><a class="markdownIt-Anchor" href="#如何开启win10远程桌面"></a> 如何开启win10远程桌面：</h2><p><a href="https://blog.csdn.net/jianglg2008/article/details/52839340">https://blog.csdn.net/jianglg2008/article/details/52839340</a><br /><a href="https://github.com/stascorp/rdpwrap/issues/744">https://github.com/stascorp/rdpwrap/issues/744</a></p><p>远程桌面服务启停：<br /><code>net stop/start termservice</code></p><hr /><h2 id="使用powershell做端口联通性测试"><a class="markdownIt-Anchor" href="#使用powershell做端口联通性测试"></a> 使用powershell做端口联通性测试</h2><p><code>test-netconnection 112.33.11.113 -port 8889</code></p><hr /><h2 id="网络联通性测试此命令cmd也可以使用"><a class="markdownIt-Anchor" href="#网络联通性测试此命令cmd也可以使用"></a> 网络联通性测试（此命令CMD也可以使用）</h2><p><code>tracert ip</code><br />可以用来追踪机器链接到服务器的跳点，可以来判断网络是否通畅<br />也可以用 ping 获取对应 ip 然后使用 tracert 命令</p><hr /><h2 id="重新初始化网络环境"><a class="markdownIt-Anchor" href="#重新初始化网络环境"></a> 重新初始化网络环境</h2><p><code>netsh winsock reset</code><br />可以用以解决由于软件冲突、病毒原因造成的系统参数错误问题。</p>]]></content>
    
    
    <categories>
      
      <category>windows系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于hexo和gitee从零创建个人博客（一）</title>
    <link href="/waterbottle/posts/8f01206d/"/>
    <url>/waterbottle/posts/8f01206d/</url>
    
    <content type="html"><![CDATA[<p>这一部分主要介绍如何先在本地搭建Hexo。<br />本文主要介绍基于 Hexo 和 Gitee Pages 功能来实现个人页面的创建和托管<br />网页页面是基于 Markdown 文件来生成的。<br />代码托管基于 Gitee 实现。<br />所以如果你想要使用同样的方法来操作，你需要学会 Markdown 格式下的文本写法。Git代码管理工具的使用。</p><h2 id="一-安装git"><a class="markdownIt-Anchor" href="#一-安装git"></a> 一、安装Git</h2><p>Windows：你需要点击<a href="https://git-scm.com/download">这里</a>去下载 window 版的客户端，以管理员身份运行后，一直选择下一步安装即可，请注意，如果你不熟悉每个选项的意思，请保持默认的选项。<br />虽然Git的使用网上有很多介绍，但是如果你需要Git的官方帮助文档，可以点击<a href="https://git-scm.com/book/zh/v2">这里</a><br />安装好之后，使用 <strong><code>git --version</code></strong> 来确认安装是否成功。</p><h2 id="二-安装nodejs"><a class="markdownIt-Anchor" href="#二-安装nodejs"></a> 二、安装NodeJS</h2><p>Hexo 是基于 NodeJS 编写的，所以需要安装一下 NodeJS 和里面的 npm 工具。<br />Windows：点击<a href="https://nodejs.org/en/download/">这里</a>下载，直接下载LTS下的安装包就可以了。<br />下载完成后，命令行工具验证一下是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br><span class="hljs-comment">#由于npm默认的下载源地址在国外，所以这里建议将源切换为淘宝的源</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br><br><span class="hljs-comment">#然后确认一下当前设置的源</span><br>npm config get registry<br><br><span class="hljs-comment">#如果你需要默认源</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org<br></code></pre></td></tr></table></figure><h2 id="三-安装并初始化hexo"><a class="markdownIt-Anchor" href="#三-安装并初始化hexo"></a> 三、安装并初始化Hexo</h2><p>前面两部安装完成后我们就可以开始安装 Hexo 了。你可以先创建一个文件夹(例如MyBlog)，然后在这个文件夹内右键，使用 Git bash 打开(Open Git Bash here)。如果你Git安装成功的话，这一步应该难不倒你。<br />输入命令<br /><strong><code>npm install -g hexo-cli</code></strong><br />执行完成后还是使用 <strong><code>hexo -v</code></strong> 查看版本来确认是否安装成功、<br />接下来，初始化一下Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># YourBlogName请替换成你自己取得名字，这个目录将成为存放你blog文件的目录。</span><br>hexo init YourBlogName<br><br><span class="hljs-comment"># 然后cd进入这个目录</span><br><span class="hljs-built_in">cd</span> YourBlogName<br><br><span class="hljs-comment">#执行</span><br>npm install<br></code></pre></td></tr></table></figure><p>执行成功后，目录内将会出现存放博客运行所需要的依赖和 Hexo 的文章模板以及自带的默认主题的目录。<br />接下来，启动 Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器输入<a href="http://localhost:4000/">http://localhost:4000/</a>就可以看到你的博客主页了</p><p><em><strong>注意！！！</strong></em><br />如果你现在关闭了 bash 页面，那 Hexo 也会停止运行。所以如果你想一直保持 Hexo 运行的话有两种选择<br />1、不关闭打开的这个 bash 页面（<strong>不推荐</strong>）<br />2、安装 pm2 ,使用 pm2 来执行脚本保证 Hexo 的运行（<strong>推荐</strong>）<br />第一步：<strong>安装 pm2</strong><br /><code>npm  install -g pm2</code><br />第二步：在根目录下创建一个文件，命名为 hexo_run.js 然后把下面的命令复制进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//run</span><br><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br><span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;hexo server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(error)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>第三步：在根目录下执行<br /><code>pm2 start hexo_run.js</code><br />如果需要停止，只要把 start 替换成 stop 即可<br />参考：<a href="https://blog.csdn.net/tangcuyuha/article/details/80331169">hexo后台运行</a></p><p>到现在为止，你已经可以在本机和内网网络上访问你的博客了。当然请记得将作为服务器的电脑设置为固定ip或保持开机哦。</p>]]></content>
    
    
    <categories>
      
      <category>从零搭建博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于hexo和gitee从零创建个人博客（二）</title>
    <link href="/waterbottle/posts/bf17ccb5/"/>
    <url>/waterbottle/posts/bf17ccb5/</url>
    
    <content type="html"><![CDATA[<p>这一部分主要介绍如何将博客托管到Gitee<br />本文主要介绍基于 Hexo 和 Gitee Pages 功能来实现个人页面的创建和托管<br />网页页面是基于 Markdown 文件来生成的。<br />代码托管基于 Gitee 实现。<br />所以如果你想要使用同样的方法来操作，你需要学会 Markdown 格式下的文本写法。Git代码管理工具的使用。</p><span id="more"></span><h2 id="一-在-gitee-上新建一个仓库"><a class="markdownIt-Anchor" href="#一-在-gitee-上新建一个仓库"></a> 一、在 Gitee 上新建一个仓库</h2><p>在 Gitee 上新建一个仓库，注意仓库必须是公开开源的，仓库名称和路径尽量使用方便记忆的名称，你最终访问的地址和这个有关。<br /><strong>注意</strong>仓库语言必须选择为 <code>JavaScript</code><br />当然你也可以给这个仓库配置上SSH公钥实现免密登录。（不是必须的）<br />如果你不清楚如何创建一个仓库并配置SSH，可以参考 <a href="/waterbottle/posts/703d05d2/" title="Gitee仓库操作指南">Gitee仓库操作指南</a> 中 <strong>仓库设置SSH，生成/添加SSH公钥</strong> 段落</p><h2 id="二-安装-hexo-的部署插件"><a class="markdownIt-Anchor" href="#二-安装-hexo-的部署插件"></a> 二、安装 Hexo 的部署插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#切换到项目根目录，安装插件</span><br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>安装成功后，在项目根目录下找到 <code>_config.yml</code> 文件，该文件为默认配置文件。<br />在文件中找到类似下方结构的配置，并进行修改<br />如果你不知道如何找到仓库地址，参考 <a href="https://help.gitee.com/enterprise/code-manage/%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/git%20clone%E6%88%96%E4%B8%8B%E8%BD%BD%E4%BB%A3%E7%A0%81">gitee帮助手册</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo:  仓库URL地址 <span class="hljs-comment">#https://gitee.com/gitee/HelloGitee.git</span><br>  branch: master <span class="hljs-comment">#这里填写仓库分支，一般默认是master，如果和你的不一致，你也可以进行修改</span><br></code></pre></td></tr></table></figure><h2 id="三-将项目文件推送到远程仓库"><a class="markdownIt-Anchor" href="#三-将项目文件推送到远程仓库"></a> 三、将项目文件推送到远程仓库</h2><p>在推送文件之前，我们需要先去 Git 内配置一些配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;XXX&quot;</span> <span class="hljs-comment">#码云用户名</span><br>git config --global user.email <span class="hljs-string">&quot;XXX@xx.com&quot;</span> <span class="hljs-comment">#码云的关联邮箱</span><br></code></pre></td></tr></table></figure><p>在项目根目录打开 Git bash 窗口，然后输入 <code>hexo d</code>，然后等待文件被推送到仓库即可，如果你没有配置SSH公钥，那会出现弹窗让你输入远程仓库的账号密码用来验证。</p><h2 id="四-开启-gitee-pages-静态网页托管服务"><a class="markdownIt-Anchor" href="#四-开启-gitee-pages-静态网页托管服务"></a> 四、开启 Gitee Pages 静态网页托管服务</h2><p>检查项目文件已经全部上传完毕后，我们需要去仓库主页面内，找到服务按钮，点击其中的 Gitee Pages，选择好分支后，启动服务。进入生成的网址即可访问博客。<br /><strong>注意</strong> 每次代码上传后都需要回到此页面内点击<strong>更新</strong>按钮重启 Pages 服务。</p>]]></content>
    
    
    <categories>
      
      <category>从零搭建博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
